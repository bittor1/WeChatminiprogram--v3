From 60a43bee50028f5e667689f28f3a12945c622bd2 Mon Sep 17 00:00:00 2001
From: Marusmurong <marusmurong@gmail.com>
Date: Fri, 22 Aug 2025 03:13:01 +0800
Subject: [PATCH] =?UTF-8?q?fix:=20=E4=BF=AE=E5=A4=8D=E9=A1=B5=E9=9D=A2?=
 =?UTF-8?q?=E5=8A=A0=E8=BD=BD=E6=AD=BB=E5=BE=AA=E7=8E=AF=E9=97=AE=E9=A2=98?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- 在 pages/index/index.js 添加 isRefreshing 和 hasInitialized 状态控制
- 修改 onShow 逻辑，只在初始化后执行 loadData
- 修改 loadData 方法，移除自动刷新逻辑
- 在 refreshData 添加重复刷新保护
- 修改 app.js 的 refreshRankingData，增加查询限制到50条
---
 .DS_Store                                     |  Bin 0 -> 6148 bytes
 CHANGELOG.md                                  |   96 +-
 CLAUDE.md                                     |  133 +
 GUARDIAN_REPORT.md                            |  138 +-
 QUICK_START.md                                |   93 +
 app.js                                        |   13 +-
 cloudfunctions/commentManage/index.js         |  457 +++
 cloudfunctions/commentManage/package.json     |   26 +-
 cloudfunctions/contentReview/index.js         |  560 ++--
 cloudfunctions/contentReview/package.json     |   26 +-
 cloudfunctions/grantShareReward/index.js      |  166 +-
 .../grantShareReward/package-lock.json        | 2576 ++++++++---------
 cloudfunctions/grantShareReward/package.json  |   26 +-
 cloudfunctions/login/package.json             |   16 +
 cloudfunctions/messageManage/package.json     |   26 +-
 cloudfunctions/search/index.js                |  367 +++
 cloudfunctions/shareAnalytics/package.json    |   26 +-
 cloudfunctions/statistics/index.js            |  706 ++---
 cloudfunctions/statistics/package.json        |   26 +-
 code-review-report.md                         |  708 ++---
 components/.DS_Store                          |  Bin 0 -> 6148 bytes
 components/auth-dialog/auth-dialog.js         |  112 +
 components/auth-dialog/auth-dialog.wxml       |   31 +
 components/auth-dialog/auth-dialog.wxss       |  111 +
 components/login-dialog/login-dialog.json     |    6 +-
 database-schema/content_review_logs.md        |  236 +-
 database-schema/messages.md                   |  202 +-
 database-schema/search_logs.md                |  138 +
 database-schema/share_records.md              |  288 +-
 open-project.sh                               |   26 +
 pages/.DS_Store                               |  Bin 0 -> 6148 bytes
 pages/deeds-wall/deeds-wall.js                |  376 +--
 pages/deeds-wall/deeds-wall.json              |   12 +-
 pages/deeds-wall/deeds-wall.wxml              |   64 +-
 pages/deeds-wall/deeds-wall.wxss              |  280 +-
 pages/detail/detail.wxml                      |    3 +-
 pages/index/index.js                          |   41 +-
 pages/orders/orders.wxml                      |    2 +-
 pages/report-deed/report-deed.js              |  328 +--
 pages/report-deed/report-deed.json            |   10 +-
 pages/report-deed/report-deed.wxml            |  144 +-
 pages/report-deed/report-deed.wxss            |  318 +-
 preview.html                                  |  329 +++
 quick-start-uniapp.md                         |  278 ++
 44 files changed, 5814 insertions(+), 3706 deletions(-)
 create mode 100644 .DS_Store
 create mode 100644 CLAUDE.md
 create mode 100644 QUICK_START.md
 create mode 100644 cloudfunctions/search/index.js
 create mode 100644 components/.DS_Store
 create mode 100644 components/auth-dialog/auth-dialog.js
 create mode 100644 components/auth-dialog/auth-dialog.wxml
 create mode 100644 components/auth-dialog/auth-dialog.wxss
 create mode 100644 database-schema/search_logs.md
 create mode 100644 open-project.sh
 create mode 100644 pages/.DS_Store
 create mode 100644 preview.html
 create mode 100644 quick-start-uniapp.md

diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000000000000000000000000000000000000..ae0a46be0a6f13bfd8856cc360f7f9a43f04fc4e
GIT binary patch
literal 6148
zcmeHK%TB{E5S*ngs(?d}9Q_OYK~$A5-~)g*2qA?UDfFICXU6MRjmQ;*(5__9W?zm+
zik$^u>qC17tN<)IgeGM|WS(?g)ZhitN{x&?UN}C{PZau#CcXO=cF1_g2j|oKxBaf$
z=G<{(xWpUX&v@nL`g6w&9bMa_NgKRjiHw$!kIa#FV9;5ff)-qBqMTeI!9Xw&3<Lwg
zzz;K^tBta}c8oa~2nK?I69YOQ5{Iy<I5?K0gHve%h;y2YP**RZoK&%?I5^TnF;69W
zs?`?5Je~Gb<C=<tqo>1a^I>)6WAkEVb=FTM9M(9-91H{lV+LmaxYGT9&rfEu$sec0
zQ!o$={4)k@zIoWJxv6@$e%qez+Qjk1AyM2Qg+hJw6Tk<ZBe%ur{v@4oO~t`cRb(&e
P#P|^?gv1mK`~m}CB$X_)

literal 0
HcmV?d00001

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 6d866a6..d107029 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,49 +1,49 @@
-# 变更日志
-
-## 2025-08-16 - 用户体验优化
-
-### 用户登录逻辑修复
-- [登录逻辑] pages/index/index.js: 修改loadData函数，移除自动从本地存储加载用户信息的逻辑
-- [登录逻辑] pages/index/index.js: 修改openUserCenter函数，确保点击时显示抽屉而不是直接调用登录API
-- [登录界面] components/user-center-drawer/user-center-drawer.wxml: 添加登录按钮，区分已登录和未登录状态
-- [登录功能] components/user-center-drawer/user-center-drawer.js: 添加login函数，实现符合微信官方规范的登录流程
-- [事件处理] pages/index/index.js: 添加handleUserLogin和handleUserInfoUpdate函数，处理登录和用户信息更新事件
-
-## 2025-08-16 - 数据加载优化
-
-### 致命错误修复
-- [数据初始化] app.js: 修改全局数据初始化逻辑，移除默认的张三数据，初始化rankings为空数组
-- [数据加载] pages/index/index.js: 修改onLoad函数，首次加载时强制刷新数据而非使用缓存
-- [数据加载] pages/index/index.js: 修改onShow和loadData函数，检测空数据时自动刷新
-
-## 2025-08-15 - 项目全面优化
-
-### 致命错误修复
-- [API修复] app.js: 移除已废弃的 wx.getSystemInfoSync() API的monkey patch
-- [数据一致性] app.js: 修改排行榜数据刷新逻辑，移除votes > 0的过滤条件，确保新提名能显示
-- [数据一致性] pages/detail/detail.js: 修改默认的achievements和comments为空数组，避免新提名显示张三数据
-- [异常处理] pages/detail/detail.js: 修改generateDanmakuItems函数，为新用户不生成随机弹幕
-- [API修复] pages/detail/detail.js: 修复onShareAppMessage函数，使用promise属性处理异步逻辑，符合官方规范
-- [异常处理] pages/detail/detail.js: 为音频API调用添加完整的异常处理逻辑
-- [授权逻辑] pages/detail/detail.js: 修复录音授权逻辑，确保符合微信官方规范
-
-### 功能缺陷修复
-- [表单验证] pages/create/create.js: 添加checkFormValidity函数，完善提名表单验证逻辑
-- [表单验证] pages/create/create.wxml: 修改提名上榜按钮的禁用条件，使用isFormValid状态
-- [异常处理] pages/create/create.js: 修复视频转GIF功能的异常处理
-- [异常处理] pages/create/create.js: 修复提名表单提交的异常处理，使用标准的云函数调用
-- [分享API] pages/index/index.js: 修复分享API实现，确保符合官方规范
-
-### 性能优化
-- [图片优化] pages/index/index.wxml: 为排行榜头像添加lazy-load属性
-- [图片优化] pages/detail/detail.wxml: 为用户头像添加lazy-load属性
-
-### 体验改进
-- [加载提示] pages/index/index.js: 为loadData和refreshData函数添加加载状态提示
-- [错误提示] pages/index/index.js: 修复统计数据加载的异常处理，添加友好错误提示
-- [错误提示] app.js: 为refreshRankingData添加友好的错误提示
-
-### 代码规范
-- [注释优化] 为关键函数添加更详细的注释
-- [错误处理] 统一使用try-catch和Promise.catch处理异常
+# 变更日志
+
+## 2025-08-16 - 用户体验优化
+
+### 用户登录逻辑修复
+- [登录逻辑] pages/index/index.js: 修改loadData函数，移除自动从本地存储加载用户信息的逻辑
+- [登录逻辑] pages/index/index.js: 修改openUserCenter函数，确保点击时显示抽屉而不是直接调用登录API
+- [登录界面] components/user-center-drawer/user-center-drawer.wxml: 添加登录按钮，区分已登录和未登录状态
+- [登录功能] components/user-center-drawer/user-center-drawer.js: 添加login函数，实现符合微信官方规范的登录流程
+- [事件处理] pages/index/index.js: 添加handleUserLogin和handleUserInfoUpdate函数，处理登录和用户信息更新事件
+
+## 2025-08-16 - 数据加载优化
+
+### 致命错误修复
+- [数据初始化] app.js: 修改全局数据初始化逻辑，移除默认的张三数据，初始化rankings为空数组
+- [数据加载] pages/index/index.js: 修改onLoad函数，首次加载时强制刷新数据而非使用缓存
+- [数据加载] pages/index/index.js: 修改onShow和loadData函数，检测空数据时自动刷新
+
+## 2025-08-15 - 项目全面优化
+
+### 致命错误修复
+- [API修复] app.js: 移除已废弃的 wx.getSystemInfoSync() API的monkey patch
+- [数据一致性] app.js: 修改排行榜数据刷新逻辑，移除votes > 0的过滤条件，确保新提名能显示
+- [数据一致性] pages/detail/detail.js: 修改默认的achievements和comments为空数组，避免新提名显示张三数据
+- [异常处理] pages/detail/detail.js: 修改generateDanmakuItems函数，为新用户不生成随机弹幕
+- [API修复] pages/detail/detail.js: 修复onShareAppMessage函数，使用promise属性处理异步逻辑，符合官方规范
+- [异常处理] pages/detail/detail.js: 为音频API调用添加完整的异常处理逻辑
+- [授权逻辑] pages/detail/detail.js: 修复录音授权逻辑，确保符合微信官方规范
+
+### 功能缺陷修复
+- [表单验证] pages/create/create.js: 添加checkFormValidity函数，完善提名表单验证逻辑
+- [表单验证] pages/create/create.wxml: 修改提名上榜按钮的禁用条件，使用isFormValid状态
+- [异常处理] pages/create/create.js: 修复视频转GIF功能的异常处理
+- [异常处理] pages/create/create.js: 修复提名表单提交的异常处理，使用标准的云函数调用
+- [分享API] pages/index/index.js: 修复分享API实现，确保符合官方规范
+
+### 性能优化
+- [图片优化] pages/index/index.wxml: 为排行榜头像添加lazy-load属性
+- [图片优化] pages/detail/detail.wxml: 为用户头像添加lazy-load属性
+
+### 体验改进
+- [加载提示] pages/index/index.js: 为loadData和refreshData函数添加加载状态提示
+- [错误提示] pages/index/index.js: 修复统计数据加载的异常处理，添加友好错误提示
+- [错误提示] app.js: 为refreshRankingData添加友好的错误提示
+
+### 代码规范
+- [注释优化] 为关键函数添加更详细的注释
+- [错误处理] 统一使用try-catch和Promise.catch处理异常
 - [命名规范] 使用更语义化的变量名和函数名 
\ No newline at end of file
diff --git a/CLAUDE.md b/CLAUDE.md
new file mode 100644
index 0000000..fbdfac8
--- /dev/null
+++ b/CLAUDE.md
@@ -0,0 +1,133 @@
+# CLAUDE.md
+
+This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.
+
+## 项目概述
+
+这是一个名为"伦敦必吃榜"的微信小程序项目，采用混合架构：
+- 前端：微信小程序原生开发（使用原生JS，非框架）
+- 后端：基于微信云开发（Cloud Functions）
+- 部分页面使用了 Next.js（但主要是小程序项目）
+
+## 常用开发命令
+
+### 小程序开发
+```bash
+# 使用微信开发者工具打开项目
+# 项目AppID: wx29cb754190a5c042
+
+# 云函数本地调试
+# 在微信开发者工具中右键云函数文件夹 -> 本地调试
+
+# 上传云函数
+# 在微信开发者工具中右键云函数文件夹 -> 上传并部署
+```
+
+### Next.js 部分（如果需要）
+```bash
+npm run dev      # 开发模式
+npm run build    # 构建项目
+npm run lint     # 代码检查
+npm run start    # 生产环境运行
+```
+
+## 项目架构
+
+### 小程序端结构
+- `/pages/` - 小程序页面
+  - `index` - 首页（排行榜）
+  - `detail` - 餐厅详情页
+  - `create` - 创建提名页
+  - `my-nominations` - 我的提名
+  - `my-votes` - 我的投票
+  - `orders` - 订单页面
+  - `deeds-wall` - 善行墙
+  - `report-deed` - 汇报善行
+- `/components/` - 自定义组件
+  - `auth-dialog` - 授权对话框组件
+- `/utils/` - 工具函数
+- `/service/` - 服务层代码
+
+### 云函数结构
+- `/cloudfunctions/` - 所有云函数
+  - `userManage` - 用户管理（登录、获取用户信息）
+  - `nominationManage` - 提名管理
+  - `voteManage` - 投票管理
+  - `commentManage` - 评论管理
+  - `contentReview` - 内容审核
+  - `statistics` - 统计功能
+  - `search` - 搜索功能
+  - `dbInit` - 数据库初始化
+
+### 数据库集合
+- `users` - 用户信息
+- `entries` - 餐厅提名条目
+- `votes` - 投票记录
+- `comments` - 评论记录
+- `orders` - 订单记录
+
+## 关键技术点
+
+### 云开发环境
+- 环境ID: `cloud1-2g2sby6z920b76cb`
+- 所有云函数都需要使用此环境ID初始化
+
+### 用户认证流程
+1. 用户点击登录 -> 调用 `wx.getUserProfile` 获取用户信息
+2. 上传头像到云存储获取 fileID
+3. 调用 `userManage` 云函数的 `login` action
+4. 存储用户信息到本地存储
+
+### 文件上传处理
+- 所有用户头像和餐厅图片都上传到云存储
+- 使用 `wx.cloud.uploadFile` 上传文件
+- 数据库中存储的是云存储的 fileID
+
+### API 调用规范
+- 所有 API 调用使用相对路径，不使用绝对地址
+- 云函数调用使用 `wx.cloud.callFunction`
+- 异步操作都需要正确的错误处理
+
+## 注意事项
+
+1. **不要使用已废弃的API**
+   - 避免使用 `wx.getUserInfo`（已废弃）
+   - 使用 `wx.getUserProfile` 替代
+
+2. **分享功能实现**
+   - 使用 `onShareAppMessage` 的 promise 属性处理异步逻辑
+   - 朋友圈分享使用 `onShareTimeline`
+
+3. **音频功能**
+   - 需要用户授权录音权限
+   - 使用 `wx.getRecorderManager()` 管理录音
+
+4. **图片优化**
+   - 所有图片使用 `lazy-load` 属性
+   - 大图片上传前需要压缩
+
+5. **错误处理**
+   - 所有异步操作都需要 try-catch 或 .catch
+   - 为用户提供友好的错误提示
+
+6. **数据一致性**
+   - 新建的条目初始投票数为0也要显示
+   - 避免显示默认测试数据（如"张三"）
+
+## 开发规范
+
+1. **代码风格**
+   - 使用2空格缩进
+   - 异步函数使用 async/await
+   - 适当添加注释说明复杂逻辑
+
+2. **测试要点**
+   - 测试新用户注册流程
+   - 测试投票功能限制
+   - 测试内容审核功能
+   - 测试分享奖励机制
+
+3. **性能优化**
+   - 使用分页加载大量数据
+   - 图片使用懒加载
+   - 减少不必要的云函数调用
\ No newline at end of file
diff --git a/GUARDIAN_REPORT.md b/GUARDIAN_REPORT.md
index a9a503c..540fb85 100644
--- a/GUARDIAN_REPORT.md
+++ b/GUARDIAN_REPORT.md
@@ -1,70 +1,70 @@
-# 微信小程序项目诊断报告
-
-**报告生成时间**: 2025-08-15
-**最后更新时间**: 2025-08-16
-
-## 修复总结
-
-所有已识别的问题已经按照优先级进行了修复。主要修复内容包括：
-
-1. **致命错误**：
-   - 已废弃API的替换
-   - 异步API缺少异常处理的补充
-   - 数据一致性问题的修复
-   - **首次加载问题修复**：解决了首次进入小程序只显示张三默认数据的问题
-   - **用户中心登录问题修复**：确保用户中心默认显示未登录状态，点击后调用微信登录API
-
-2. **功能缺陷**：
-   - 授权逻辑规范化
-   - 分享API实现优化
-   - 表单验证逻辑完善
-
-3. **性能优化**：
-   - 图片资源添加lazy-load属性
-   - 优化数据加载逻辑
-
-4. **体验问题**：
-   - 添加加载状态提示
-   - 完善错误处理和提示
-
-5. **代码规范**：
-   - 注释优化
-   - 命名规范化
-
-详细修复内容请参考项目根目录下的 CHANGELOG.md 文件。
-
-## 概述
-
-本报告是对"伦敦必吃榜"微信小程序项目的全面诊断结果。通过静态代码分析和逻辑审查，识别出项目中存在的各类问题，并按严重程度分类。
-
-## 问题分类与统计
-
-| 问题等级 | 问题数量 |
-|---------|---------|
-| 致命错误 | 5 |
-| 功能缺陷 | 7 |
-| 性能隐患 | 5 |
-| 体验问题 | 8 |
-| 代码规范 | 12 |
-
-## 致命错误
-
-1. **已废弃API使用**:
-   - `app.js`: 使用了被弃用的 `wx.getSystemInfoSync()` API，虽然有 monkey patch 但实现不完整
-   - `pages/detail/detail.js`: 使用了可能被弃用的音频API调用方式
-
-2. **异步API缺少异常处理**:
-   - `pages/create/create.js`: 多处云函数调用缺少 `.catch()` 异常处理
-   - `pages/detail/detail.js`: 音频相关API调用缺少完整的异常处理逻辑
-
-3. **未定义变量/函数调用**:
-   - `app.js`: 可能存在对 `cloudUtils.getSystemInfo()` 的调用，但未确认该函数是否存在
-   - `pages/index/index.js`: 对 `app.checkUserLogin()` 的调用可能存在问题
-
-4. **数据初始化问题**:
-   - `app.js`: 全局数据中默认包含张三的示例数据，导致首次加载时只显示张三
-   - `pages/index/index.js`: 首次加载使用全局数据而非强制刷新，导致用户看到不完整的数据
-
-5. **用户登录逻辑问题**:
-   - `pages/index/index.js`: 用户中心默认自动从本地存储加载用户信息，而不是显示未登录状态
+# 微信小程序项目诊断报告
+
+**报告生成时间**: 2025-08-15
+**最后更新时间**: 2025-08-16
+
+## 修复总结
+
+所有已识别的问题已经按照优先级进行了修复。主要修复内容包括：
+
+1. **致命错误**：
+   - 已废弃API的替换
+   - 异步API缺少异常处理的补充
+   - 数据一致性问题的修复
+   - **首次加载问题修复**：解决了首次进入小程序只显示张三默认数据的问题
+   - **用户中心登录问题修复**：确保用户中心默认显示未登录状态，点击后调用微信登录API
+
+2. **功能缺陷**：
+   - 授权逻辑规范化
+   - 分享API实现优化
+   - 表单验证逻辑完善
+
+3. **性能优化**：
+   - 图片资源添加lazy-load属性
+   - 优化数据加载逻辑
+
+4. **体验问题**：
+   - 添加加载状态提示
+   - 完善错误处理和提示
+
+5. **代码规范**：
+   - 注释优化
+   - 命名规范化
+
+详细修复内容请参考项目根目录下的 CHANGELOG.md 文件。
+
+## 概述
+
+本报告是对"伦敦必吃榜"微信小程序项目的全面诊断结果。通过静态代码分析和逻辑审查，识别出项目中存在的各类问题，并按严重程度分类。
+
+## 问题分类与统计
+
+| 问题等级 | 问题数量 |
+|---------|---------|
+| 致命错误 | 5 |
+| 功能缺陷 | 7 |
+| 性能隐患 | 5 |
+| 体验问题 | 8 |
+| 代码规范 | 12 |
+
+## 致命错误
+
+1. **已废弃API使用**:
+   - `app.js`: 使用了被弃用的 `wx.getSystemInfoSync()` API，虽然有 monkey patch 但实现不完整
+   - `pages/detail/detail.js`: 使用了可能被弃用的音频API调用方式
+
+2. **异步API缺少异常处理**:
+   - `pages/create/create.js`: 多处云函数调用缺少 `.catch()` 异常处理
+   - `pages/detail/detail.js`: 音频相关API调用缺少完整的异常处理逻辑
+
+3. **未定义变量/函数调用**:
+   - `app.js`: 可能存在对 `cloudUtils.getSystemInfo()` 的调用，但未确认该函数是否存在
+   - `pages/index/index.js`: 对 `app.checkUserLogin()` 的调用可能存在问题
+
+4. **数据初始化问题**:
+   - `app.js`: 全局数据中默认包含张三的示例数据，导致首次加载时只显示张三
+   - `pages/index/index.js`: 首次加载使用全局数据而非强制刷新，导致用户看到不完整的数据
+
+5. **用户登录逻辑问题**:
+   - `pages/index/index.js`: 用户中心默认自动从本地存储加载用户信息，而不是显示未登录状态
    - `components/user-center-drawer/user-center-drawer.wxml`: 未提供明确的登录按钮，不符合微信官方登录最佳实践 
\ No newline at end of file
diff --git a/QUICK_START.md b/QUICK_START.md
new file mode 100644
index 0000000..074a6f0
--- /dev/null
+++ b/QUICK_START.md
@@ -0,0 +1,93 @@
+# 伦敦必吃榜 - 快速启动指南
+
+## 🚀 5分钟快速启动
+
+### 1. 准备工作
+- 安装[微信开发者工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)
+- 确保有微信开发者账号
+
+### 2. 导入项目
+1. 打开微信开发者工具
+2. 选择"导入项目"
+3. 项目目录：选择 `/Users/jimmu/vdogo.com/伦敦必吃榜`
+4. AppID：`wx29cb754190a5c042`
+5. 项目名称：伦敦必吃榜
+
+### 3. 配置云开发环境
+1. 点击工具栏的"云开发"按钮
+2. 如果没有环境，创建一个新环境
+3. 环境ID设置为：`cloud1-2g2sby6z920b76cb`
+4. 或在 `app.js` 中修改环境ID为您的环境
+
+### 4. 初始化数据库
+1. 在云开发控制台创建以下集合：
+   - `users` - 用户信息
+   - `entries` - 餐厅条目
+   - `votes` - 投票记录
+   - `comments` - 评论记录
+   - `orders` - 订单记录
+
+2. 上传云函数（右键点击每个云函数文件夹 -> 上传并部署）：
+   - `userManage` - 用户管理
+   - `nominationManage` - 提名管理
+   - `voteManage` - 投票管理
+   - `commentManage` - 评论管理
+   - `contentReview` - 内容审核
+   - `statistics` - 统计功能
+   - `dbInit` - 数据库初始化
+
+### 5. 快速测试
+1. 点击"编译"按钮
+2. 在模拟器中查看效果
+3. 扫码在手机上预览
+
+## 🔧 已修复的主要问题
+
+### ✅ 登录逻辑优化
+- 修复了自动登录问题
+- 优化了用户信息存储
+- 改进了授权流程
+
+### ✅ 数据加载改进
+- 修复了空数据显示问题
+- 优化了数据刷新逻辑
+- 改进了错误处理
+
+### ✅ 性能优化
+- 增加了图片懒加载
+- 优化了数据查询限制
+- 改进了加载提示
+
+## 📱 核心功能
+
+1. **排行榜展示** - 查看餐厅投票排名
+2. **投票功能** - 为喜欢的餐厅投票
+3. **提名餐厅** - 添加新的餐厅
+4. **评论功能** - 对餐厅进行评论
+5. **分享功能** - 分享给好友和朋友圈
+
+## 🛠 开发调试
+
+### 查看日志
+- 在开发者工具的"调试器"中查看 Console 输出
+- 云函数日志在"云开发控制台" -> "云函数" -> "日志"
+
+### 常见问题
+
+**Q: 提示"云开发未初始化"**
+A: 检查环境ID是否正确，确保已开通云开发
+
+**Q: 数据加载失败**
+A: 检查云函数是否已部署，数据库集合是否已创建
+
+**Q: 登录失败**
+A: 确保 `userManage` 云函数已正确部署
+
+## 📞 技术支持
+
+如遇到问题，请检查：
+1. 控制台错误信息
+2. 云函数日志
+3. 网络请求状态
+
+项目已经过优化，可以直接运行！
\ No newline at end of file
diff --git a/app.js b/app.js
index db0ae46..e58c90f 100644
--- a/app.js
+++ b/app.js
@@ -170,7 +170,7 @@ App({
         const db = wx.cloud.database();
         db.collection('entries')
           .orderBy('votes', 'desc')
-          .limit(20) // 增加限制数量，确保能看到更多提名
+          .limit(50) // 增加限制数量，确保能看到更多提名
           .get()
           .then(res => {
             console.log('获取排行榜数据成功:', res);
@@ -192,6 +192,9 @@ App({
               
               // 更新全局数据
               this.globalData.rankings = rankings;
+            } else {
+              // 如果没有数据，保持空数组
+              this.globalData.rankings = [];
             }
             
             resolve(this.globalData.rankings);
@@ -203,7 +206,9 @@ App({
               title: '获取数据失败，请重试',
               icon: 'none'
             });
-            reject(err);
+            // 返回空数组而不是拒绝
+            this.globalData.rankings = [];
+            resolve(this.globalData.rankings);
           });
       } else {
         console.error('云开发未初始化');
@@ -211,7 +216,9 @@ App({
           title: '系统初始化失败',
           icon: 'none'
         });
-        reject(new Error('云开发未初始化'));
+        // 返回空数组而不是拒绝
+        this.globalData.rankings = [];
+        resolve(this.globalData.rankings);
       }
     });
   },
diff --git a/cloudfunctions/commentManage/index.js b/cloudfunctions/commentManage/index.js
index 2ec7eda..c7d1b49 100644
--- a/cloudfunctions/commentManage/index.js
+++ b/cloudfunctions/commentManage/index.js
@@ -1,3 +1,4 @@
+<<<<<<< Updated upstream
 const cloud = require('wx-server-sdk');
 cloud.init({ env: cloud.DYNAMIC_CURRENT_ENV });
 const db = cloud.database();
@@ -452,4 +453,460 @@ async function createReplyNotification(nominationId, replyerId, receiverId, comm
     console.error('创建回复通知失败:', error);
     // 通知失败不影响主流程，继续执行
   }
+=======
+const cloud = require('wx-server-sdk');
+cloud.init({ env: cloud.DYNAMIC_CURRENT_ENV });
+const db = cloud.database();
+const _ = db.command;
+
+// 主函数入口
+exports.main = async (event, context) => {
+  const { action, data } = event;
+  const wxContext = cloud.getWXContext();
+  const userId = wxContext.OPENID;
+
+  try {
+    switch (action) {
+      case 'add': 
+        return await addComment(data, userId);
+      case 'reply':
+        return await replyComment(data, userId);
+      case 'list':
+        return await listComments(data);
+      case 'listReplies':
+        return await listReplies(data);
+      case 'delete':
+        return await deleteComment(data, userId);
+      case 'like':
+        return await likeComment(data, userId);
+      default:
+        return { success: false, message: '未知操作' };
+    }
+  } catch (error) {
+    console.error(`评论管理云函数错误: ${error.message}`, error);
+    return { success: false, message: '操作失败', error: error.message };
+  }
+};
+
+// 添加评论
+async function addComment(data, userId) {
+  // 参数验证
+  if (!data.nominationId || !data.content) {
+    return { success: false, message: '参数不完整' };
+  }
+  
+  // 获取用户信息
+  let userInfo;
+  try {
+    const userResult = await db.collection('users').where({
+      _openid: userId
+    }).get();
+    
+    if (userResult.data.length > 0) {
+      userInfo = userResult.data[0];
+    } else {
+      // 如果用户不存在，使用默认值
+      userInfo = {
+        name: '用户',
+        avatar: '/public/placeholder-user.jpg'
+      };
+    }
+  } catch (error) {
+    console.error('获取用户信息失败:', error);
+    // 使用默认值继续
+    userInfo = {
+      name: '用户',
+      avatar: '/public/placeholder-user.jpg'
+    };
+  }
+  
+  // 创建评论
+  const commentData = {
+    nominationId: data.nominationId,
+    content: data.content,
+    creatorId: userId,
+    creatorName: userInfo.name || '用户',
+    creatorAvatar: userInfo.avatar || '/public/placeholder-user.jpg',
+    parentId: null,
+    rootId: null,
+    replyTo: { userId: null, userName: null },
+    createTime: db.serverDate(),
+    updateTime: db.serverDate(),
+    likes: 0,
+    status: 0  // 0-正常，1-删除
+  };
+  
+  try {
+    // 添加评论
+    const result = await db.collection('comments').add({
+      data: commentData
+    });
+    
+    // 更新提名评论数
+    await db.collection('nominations').doc(data.nominationId).update({
+      data: {
+        commentCount: _.inc(1),
+        updateTime: db.serverDate()
+      }
+    });
+    
+    // 创建消息通知
+    await createCommentNotification(data.nominationId, userId);
+    
+    return { success: true, commentId: result._id };
+  } catch (error) {
+    console.error('添加评论失败:', error);
+    return { success: false, message: '添加评论失败', error: error.message };
+  }
+}
+
+// 回复评论
+async function replyComment(data, userId) {
+  // 参数验证
+  if (!data.nominationId || !data.content || !data.parentId) {
+    return { success: false, message: '参数不完整' };
+  }
+  
+  try {
+    // 获取用户信息和父评论信息
+    const [userResult, parentComment] = await Promise.all([
+      db.collection('users').where({ _openid: userId }).get(),
+      db.collection('comments').doc(data.parentId).get()
+    ]);
+    
+    const userInfo = userResult.data.length > 0 ? userResult.data[0] : {
+      name: '用户',
+      avatar: '/public/placeholder-user.jpg'
+    };
+    
+    // 确定根评论ID
+    const rootId = parentComment.data.rootId || parentComment.data._id;
+    
+    // 创建回复评论
+    const commentData = {
+      nominationId: data.nominationId,
+      content: data.content,
+      creatorId: userId,
+      creatorName: userInfo.name || '用户',
+      creatorAvatar: userInfo.avatar || '/public/placeholder-user.jpg',
+      parentId: data.parentId,
+      rootId: rootId,
+      replyTo: {
+        userId: parentComment.data.creatorId,
+        userName: parentComment.data.creatorName
+      },
+      createTime: db.serverDate(),
+      updateTime: db.serverDate(),
+      likes: 0,
+      status: 0
+    };
+    
+    // 添加评论
+    const result = await db.collection('comments').add({
+      data: commentData
+    });
+    
+    // 更新提名评论数
+    await db.collection('nominations').doc(data.nominationId).update({
+      data: {
+        commentCount: _.inc(1),
+        updateTime: db.serverDate()
+      }
+    });
+    
+    // 创建回复通知
+    await createReplyNotification(
+      data.nominationId,
+      userId,
+      parentComment.data.creatorId,
+      data.parentId
+    );
+    
+    return { success: true, commentId: result._id };
+  } catch (error) {
+    console.error('回复评论失败:', error);
+    return { success: false, message: '回复评论失败', error: error.message };
+  }
+}
+
+// 获取评论列表
+async function listComments(data) {
+  // 参数验证
+  if (!data.nominationId) {
+    return { success: false, message: '参数不完整' };
+  }
+  
+  const { nominationId, page = 1, pageSize = 10 } = data;
+  const skip = (page - 1) * pageSize;
+  
+  try {
+    // 获取总数
+    const countResult = await db.collection('comments')
+      .where({
+        nominationId,
+        parentId: null,  // 只获取顶级评论
+        status: 0  // 正常状态
+      })
+      .count();
+    
+    // 获取顶级评论
+    const commentsResult = await db.collection('comments')
+      .where({
+        nominationId,
+        parentId: null,
+        status: 0
+      })
+      .orderBy('createTime', 'desc')
+      .skip(skip)
+      .limit(pageSize)
+      .get();
+    
+    // 获取每个顶级评论的部分回复
+    const topComments = commentsResult.data;
+    for (const comment of topComments) {
+      // 获取每个顶级评论的前3条回复
+      const repliesResult = await db.collection('comments')
+        .where({
+          rootId: comment._id,
+          status: 0
+        })
+        .orderBy('createTime', 'asc')
+        .limit(3)
+        .get();
+      
+      comment.replies = repliesResult.data;
+      
+      // 获取回复总数
+      const replyCountResult = await db.collection('comments')
+        .where({
+          rootId: comment._id,
+          status: 0
+        })
+        .count();
+      
+      comment.replyCount = replyCountResult.total;
+    }
+    
+    return {
+      success: true,
+      comments: topComments,
+      total: countResult.total,
+      page,
+      pageSize
+    };
+  } catch (error) {
+    console.error('获取评论列表失败:', error);
+    return { success: false, message: '获取评论列表失败', error: error.message };
+  }
+}
+
+// 获取回复列表
+async function listReplies(data) {
+  // 参数验证
+  if (!data.rootId) {
+    return { success: false, message: '参数不完整' };
+  }
+  
+  const { rootId, page = 1, pageSize = 10 } = data;
+  const skip = (page - 1) * pageSize;
+  
+  try {
+    // 获取总数
+    const countResult = await db.collection('comments')
+      .where({
+        rootId,
+        status: 0
+      })
+      .count();
+    
+    // 获取回复
+    const repliesResult = await db.collection('comments')
+      .where({
+        rootId,
+        status: 0
+      })
+      .orderBy('createTime', 'asc')
+      .skip(skip)
+      .limit(pageSize)
+      .get();
+    
+    return {
+      success: true,
+      replies: repliesResult.data,
+      total: countResult.total,
+      page,
+      pageSize
+    };
+  } catch (error) {
+    console.error('获取回复列表失败:', error);
+    return { success: false, message: '获取回复列表失败', error: error.message };
+  }
+}
+
+// 删除评论
+async function deleteComment(data, userId) {
+  // 参数验证
+  if (!data.commentId) {
+    return { success: false, message: '参数不完整' };
+  }
+  
+  try {
+    // 获取评论信息
+    const commentResult = await db.collection('comments').doc(data.commentId).get();
+    const comment = commentResult.data;
+    
+    // 检查权限（只有评论创建者可以删除）
+    if (comment.creatorId !== userId) {
+      return { success: false, message: '没有权限删除此评论' };
+    }
+    
+    // 软删除评论
+    await db.collection('comments').doc(data.commentId).update({
+      data: {
+        status: 1,  // 1-删除
+        updateTime: db.serverDate()
+      }
+    });
+    
+    // 如果是顶级评论，更新提名评论数
+    if (!comment.parentId) {
+      await db.collection('nominations').doc(comment.nominationId).update({
+        data: {
+          commentCount: _.inc(-1),
+          updateTime: db.serverDate()
+        }
+      });
+    }
+    
+    return { success: true };
+  } catch (error) {
+    console.error('删除评论失败:', error);
+    return { success: false, message: '删除评论失败', error: error.message };
+  }
+}
+
+// 点赞评论
+async function likeComment(data, userId) {
+  // 参数验证
+  if (!data.commentId) {
+    return { success: false, message: '参数不完整' };
+  }
+  
+  try {
+    // 检查是否已点赞
+    const likeRecord = await db.collection('comment_likes')
+      .where({
+        commentId: data.commentId,
+        userId
+      })
+      .get();
+    
+    if (likeRecord.data.length > 0) {
+      return { success: false, message: '已经点过赞了' };
+    }
+    
+    // 添加点赞记录
+    await db.collection('comment_likes').add({
+      data: {
+        commentId: data.commentId,
+        userId,
+        createTime: db.serverDate()
+      }
+    });
+    
+    // 更新评论点赞数
+    await db.collection('comments').doc(data.commentId).update({
+      data: {
+        likes: _.inc(1),
+        updateTime: db.serverDate()
+      }
+    });
+    
+    return { success: true };
+  } catch (error) {
+    console.error('点赞评论失败:', error);
+    return { success: false, message: '点赞评论失败', error: error.message };
+  }
+}
+
+// 创建评论通知
+async function createCommentNotification(nominationId, commenterId) {
+  try {
+    // 获取提名信息和评论者信息
+    const [nominationResult, commenterResult] = await Promise.all([
+      db.collection('nominations').doc(nominationId).get(),
+      db.collection('users').where({ _openid: commenterId }).get()
+    ]);
+    
+    const nomination = nominationResult.data;
+    const commenter = commenterResult.data.length > 0 ? commenterResult.data[0] : {
+      name: '用户',
+      avatar: '/public/placeholder-user.jpg'
+    };
+    
+    // 如果评论者不是提名者，则发送通知
+    if (nomination.creatorId !== commenterId) {
+      await cloud.callFunction({
+        name: 'messageManage',
+        data: {
+          action: 'create',
+          data: {
+            receiverId: nomination.creatorId,
+            senderId: commenterId,
+            senderName: commenter.name || '用户',
+            senderAvatar: commenter.avatar || '/public/placeholder-user.jpg',
+            type: 'comment',
+            content: `${commenter.name || '用户'} 评论了你的提名`,
+            nominationId: nominationId,
+            nominationTitle: nomination.title || '提名'
+          }
+        }
+      });
+    }
+  } catch (error) {
+    console.error('创建评论通知失败:', error);
+    // 通知失败不影响主流程，继续执行
+  }
+}
+
+// 创建回复通知
+async function createReplyNotification(nominationId, replyerId, receiverId, commentId) {
+  try {
+    // 获取提名信息和回复者信息
+    const [nominationResult, replierResult] = await Promise.all([
+      db.collection('nominations').doc(nominationId).get(),
+      db.collection('users').where({ _openid: replyerId }).get()
+    ]);
+    
+    const nomination = nominationResult.data;
+    const replier = replierResult.data.length > 0 ? replierResult.data[0] : {
+      name: '用户',
+      avatar: '/public/placeholder-user.jpg'
+    };
+    
+    // 如果回复者不是被回复者，则发送通知
+    if (receiverId !== replyerId) {
+      await cloud.callFunction({
+        name: 'messageManage',
+        data: {
+          action: 'create',
+          data: {
+            receiverId: receiverId,
+            senderId: replyerId,
+            senderName: replier.name || '用户',
+            senderAvatar: replier.avatar || '/public/placeholder-user.jpg',
+            type: 'reply',
+            content: `${replier.name || '用户'} 回复了你的评论`,
+            relatedId: commentId,
+            nominationId: nominationId,
+            nominationTitle: nomination.title || '提名'
+          }
+        }
+      });
+    }
+  } catch (error) {
+    console.error('创建回复通知失败:', error);
+    // 通知失败不影响主流程，继续执行
+  }
+>>>>>>> Stashed changes
 } 
\ No newline at end of file
diff --git a/cloudfunctions/commentManage/package.json b/cloudfunctions/commentManage/package.json
index f297b81..8909901 100644
--- a/cloudfunctions/commentManage/package.json
+++ b/cloudfunctions/commentManage/package.json
@@ -1,14 +1,14 @@
-{
-  "name": "commentManage",
-  "version": "1.0.0",
-  "description": "评论管理云函数",
-  "main": "index.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "",
-  "license": "ISC",
-  "dependencies": {
-    "wx-server-sdk": "~2.6.3"
-  }
+{
+  "name": "commentManage",
+  "version": "1.0.0",
+  "description": "评论管理云函数",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "wx-server-sdk": "~2.6.3"
+  }
 } 
\ No newline at end of file
diff --git a/cloudfunctions/contentReview/index.js b/cloudfunctions/contentReview/index.js
index 31934c2..2692393 100644
--- a/cloudfunctions/contentReview/index.js
+++ b/cloudfunctions/contentReview/index.js
@@ -1,281 +1,281 @@
-// 云函数入口文件
-const cloud = require('wx-server-sdk')
-
-cloud.init({
-  env: cloud.DYNAMIC_CURRENT_ENV
-})
-
-const db = cloud.database()
-const _ = db.command
-
-// 云函数入口函数
-exports.main = async (event, context) => {
-  const wxContext = cloud.getWXContext()
-  const { OPENID } = wxContext
-  const { action, content, imageUrl, type } = event
-  
-  // 根据不同的操作执行不同的功能
-  switch (action) {
-    case 'reviewText':
-      return await reviewText(content, type)
-    case 'reviewImage':
-      return await reviewImage(imageUrl, type)
-    default:
-      return {
-        success: false,
-        message: '未知操作类型'
-      }
-  }
-}
-
-/**
- * 审核文本内容
- * @param {string} content 要审核的文本
- * @param {string} type 内容类型（comment, nomination, etc.）
- */
-async function reviewText(content, type) {
-  if (!content) {
-    return {
-      success: false,
-      message: '缺少审核内容'
-    }
-  }
-  
-  try {
-    // 调用微信内容安全API
-    const result = await cloud.openapi.security.msgSecCheck({
-      content: content
-    })
-    
-    // 记录审核日志
-    await logReviewResult({
-      type: 'text',
-      contentType: type || 'unknown',
-      content: content.substring(0, 100), // 仅记录前100个字符
-      result: result,
-      pass: true
-    })
-    
-    return {
-      success: true,
-      message: '内容审核通过',
-      data: result
-    }
-  } catch (err) {
-    console.error('文本内容审核失败:', err)
-    
-    // 记录审核日志
-    await logReviewResult({
-      type: 'text',
-      contentType: type || 'unknown',
-      content: content.substring(0, 100), // 仅记录前100个字符
-      result: err,
-      pass: false
-    })
-    
-    // 内容违规
-    if (err.errCode === 87014) {
-      return {
-        success: false,
-        message: '内容包含敏感信息，请修改后重试',
-        errCode: err.errCode
-      }
-    }
-    
-    return {
-      success: false,
-      message: '内容审核失败',
-      error: err.message
-    }
-  }
-}
-
-/**
- * 审核图片内容
- * @param {string} imageUrl 要审核的图片URL
- * @param {string} type 内容类型（avatar, nomination, etc.）
- */
-async function reviewImage(imageUrl, type) {
-  if (!imageUrl) {
-    return {
-      success: false,
-      message: '缺少图片URL'
-    }
-  }
-  
-  try {
-    // 如果是云存储链接，需要下载临时文件进行审核
-    let fileID = imageUrl;
-    
-    // 如果不是云文件ID格式，先上传到云存储
-    if (!imageUrl.startsWith('cloud://')) {
-      // 从网络下载图片
-      const res = await cloud.downloadFile({
-        url: imageUrl,
-        options: {
-          timeout: 10000 // 10秒超时
-        }
-      })
-      
-      // 上传到云存储
-      const uploadResult = await cloud.uploadFile({
-        cloudPath: `temp/review_${Date.now()}.jpg`,
-        fileContent: res.fileContent
-      })
-      
-      fileID = uploadResult.fileID
-    }
-    
-    // 调用微信内容安全API
-    const result = await cloud.openapi.security.imgSecCheck({
-      media: {
-        contentType: 'image/png',
-        value: Buffer.from(fileID)
-      }
-    })
-    
-    // 记录审核日志
-    await logReviewResult({
-      type: 'image',
-      contentType: type || 'unknown',
-      content: imageUrl,
-      result: result,
-      pass: true
-    })
-    
-    // 如果是临时上传的图片，审核完后删除
-    if (fileID !== imageUrl) {
-      await cloud.deleteFile({
-        fileList: [fileID]
-      })
-    }
-    
-    return {
-      success: true,
-      message: '图片审核通过',
-      data: result
-    }
-  } catch (err) {
-    console.error('图片审核失败:', err)
-    
-    // 记录审核日志
-    await logReviewResult({
-      type: 'image',
-      contentType: type || 'unknown',
-      content: imageUrl,
-      result: err,
-      pass: false
-    })
-    
-    // 内容违规
-    if (err.errCode === 87014) {
-      return {
-        success: false,
-        message: '图片包含敏感内容，请更换后重试',
-        errCode: err.errCode
-      }
-    }
-    
-    return {
-      success: false,
-      message: '图片审核失败',
-      error: err.message
-    }
-  }
-}
-
-/**
- * 记录审核日志
- * @param {object} logData 日志数据
- */
-async function logReviewResult(logData) {
-  try {
-    await db.collection('content_review_logs').add({
-      data: {
-        ...logData,
-        createTime: db.serverDate()
-      }
-    })
-  } catch (error) {
-    console.error('记录审核日志失败:', error)
-    // 日志记录失败不影响主流程
-  }
-}
-
-/**
- * 自动违规内容检测（定时触发器调用）
- */
-async function autoReviewContent() {
-  const collections = ['nominations', 'comments'];
-  let flag = false;
-  
-  try {
-    for (const collection of collections) {
-      // 获取最近添加的内容进行审核
-      const data = await db.collection(collection)
-        .where({
-          reviewed: _.neq(true) // 未审核过的内容
-        })
-        .limit(100)
-        .get();
-      
-      for (const item of data.data) {
-        if (item.content) {
-          // 审核文本内容
-          try {
-            const result = await reviewText(item.content, collection);
-            
-            // 更新审核状态
-            await db.collection(collection).doc(item._id).update({
-              data: {
-                reviewed: true,
-                reviewResult: result.success,
-                reviewTime: db.serverDate()
-              }
-            });
-            
-            // 如果内容违规，通知用户并隐藏内容
-            if (!result.success && result.errCode === 87014) {
-              flag = true;
-              
-              // 标记内容为违规
-              await db.collection(collection).doc(item._id).update({
-                data: {
-                  isViolation: true,
-                  hidden: true
-                }
-              });
-              
-              // 发送违规通知
-              await cloud.callFunction({
-                name: 'messageManage',
-                data: {
-                  action: 'create',
-                  data: {
-                    receiverId: item.userId || item.createdBy,
-                    type: 'system',
-                    content: `您的${collection === 'nominations' ? '提名' : '评论'}内容包含敏感信息，已被系统自动隐藏。请修改后重新提交。`,
-                    nominationId: item.nominationId || item._id
-                  }
-                }
-              });
-            }
-          } catch (err) {
-            console.error(`审核${collection}内容失败:`, err);
-          }
-        }
-      }
-    }
-    
-    return {
-      success: true,
-      flag: flag
-    };
-  } catch (err) {
-    console.error('自动审核内容失败:', err);
-    return {
-      success: false,
-      error: err.message
-    };
-  }
+// 云函数入口文件
+const cloud = require('wx-server-sdk')
+
+cloud.init({
+  env: cloud.DYNAMIC_CURRENT_ENV
+})
+
+const db = cloud.database()
+const _ = db.command
+
+// 云函数入口函数
+exports.main = async (event, context) => {
+  const wxContext = cloud.getWXContext()
+  const { OPENID } = wxContext
+  const { action, content, imageUrl, type } = event
+  
+  // 根据不同的操作执行不同的功能
+  switch (action) {
+    case 'reviewText':
+      return await reviewText(content, type)
+    case 'reviewImage':
+      return await reviewImage(imageUrl, type)
+    default:
+      return {
+        success: false,
+        message: '未知操作类型'
+      }
+  }
+}
+
+/**
+ * 审核文本内容
+ * @param {string} content 要审核的文本
+ * @param {string} type 内容类型（comment, nomination, etc.）
+ */
+async function reviewText(content, type) {
+  if (!content) {
+    return {
+      success: false,
+      message: '缺少审核内容'
+    }
+  }
+  
+  try {
+    // 调用微信内容安全API
+    const result = await cloud.openapi.security.msgSecCheck({
+      content: content
+    })
+    
+    // 记录审核日志
+    await logReviewResult({
+      type: 'text',
+      contentType: type || 'unknown',
+      content: content.substring(0, 100), // 仅记录前100个字符
+      result: result,
+      pass: true
+    })
+    
+    return {
+      success: true,
+      message: '内容审核通过',
+      data: result
+    }
+  } catch (err) {
+    console.error('文本内容审核失败:', err)
+    
+    // 记录审核日志
+    await logReviewResult({
+      type: 'text',
+      contentType: type || 'unknown',
+      content: content.substring(0, 100), // 仅记录前100个字符
+      result: err,
+      pass: false
+    })
+    
+    // 内容违规
+    if (err.errCode === 87014) {
+      return {
+        success: false,
+        message: '内容包含敏感信息，请修改后重试',
+        errCode: err.errCode
+      }
+    }
+    
+    return {
+      success: false,
+      message: '内容审核失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 审核图片内容
+ * @param {string} imageUrl 要审核的图片URL
+ * @param {string} type 内容类型（avatar, nomination, etc.）
+ */
+async function reviewImage(imageUrl, type) {
+  if (!imageUrl) {
+    return {
+      success: false,
+      message: '缺少图片URL'
+    }
+  }
+  
+  try {
+    // 如果是云存储链接，需要下载临时文件进行审核
+    let fileID = imageUrl;
+    
+    // 如果不是云文件ID格式，先上传到云存储
+    if (!imageUrl.startsWith('cloud://')) {
+      // 从网络下载图片
+      const res = await cloud.downloadFile({
+        url: imageUrl,
+        options: {
+          timeout: 10000 // 10秒超时
+        }
+      })
+      
+      // 上传到云存储
+      const uploadResult = await cloud.uploadFile({
+        cloudPath: `temp/review_${Date.now()}.jpg`,
+        fileContent: res.fileContent
+      })
+      
+      fileID = uploadResult.fileID
+    }
+    
+    // 调用微信内容安全API
+    const result = await cloud.openapi.security.imgSecCheck({
+      media: {
+        contentType: 'image/png',
+        value: Buffer.from(fileID)
+      }
+    })
+    
+    // 记录审核日志
+    await logReviewResult({
+      type: 'image',
+      contentType: type || 'unknown',
+      content: imageUrl,
+      result: result,
+      pass: true
+    })
+    
+    // 如果是临时上传的图片，审核完后删除
+    if (fileID !== imageUrl) {
+      await cloud.deleteFile({
+        fileList: [fileID]
+      })
+    }
+    
+    return {
+      success: true,
+      message: '图片审核通过',
+      data: result
+    }
+  } catch (err) {
+    console.error('图片审核失败:', err)
+    
+    // 记录审核日志
+    await logReviewResult({
+      type: 'image',
+      contentType: type || 'unknown',
+      content: imageUrl,
+      result: err,
+      pass: false
+    })
+    
+    // 内容违规
+    if (err.errCode === 87014) {
+      return {
+        success: false,
+        message: '图片包含敏感内容，请更换后重试',
+        errCode: err.errCode
+      }
+    }
+    
+    return {
+      success: false,
+      message: '图片审核失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 记录审核日志
+ * @param {object} logData 日志数据
+ */
+async function logReviewResult(logData) {
+  try {
+    await db.collection('content_review_logs').add({
+      data: {
+        ...logData,
+        createTime: db.serverDate()
+      }
+    })
+  } catch (error) {
+    console.error('记录审核日志失败:', error)
+    // 日志记录失败不影响主流程
+  }
+}
+
+/**
+ * 自动违规内容检测（定时触发器调用）
+ */
+async function autoReviewContent() {
+  const collections = ['nominations', 'comments'];
+  let flag = false;
+  
+  try {
+    for (const collection of collections) {
+      // 获取最近添加的内容进行审核
+      const data = await db.collection(collection)
+        .where({
+          reviewed: _.neq(true) // 未审核过的内容
+        })
+        .limit(100)
+        .get();
+      
+      for (const item of data.data) {
+        if (item.content) {
+          // 审核文本内容
+          try {
+            const result = await reviewText(item.content, collection);
+            
+            // 更新审核状态
+            await db.collection(collection).doc(item._id).update({
+              data: {
+                reviewed: true,
+                reviewResult: result.success,
+                reviewTime: db.serverDate()
+              }
+            });
+            
+            // 如果内容违规，通知用户并隐藏内容
+            if (!result.success && result.errCode === 87014) {
+              flag = true;
+              
+              // 标记内容为违规
+              await db.collection(collection).doc(item._id).update({
+                data: {
+                  isViolation: true,
+                  hidden: true
+                }
+              });
+              
+              // 发送违规通知
+              await cloud.callFunction({
+                name: 'messageManage',
+                data: {
+                  action: 'create',
+                  data: {
+                    receiverId: item.userId || item.createdBy,
+                    type: 'system',
+                    content: `您的${collection === 'nominations' ? '提名' : '评论'}内容包含敏感信息，已被系统自动隐藏。请修改后重新提交。`,
+                    nominationId: item.nominationId || item._id
+                  }
+                }
+              });
+            }
+          } catch (err) {
+            console.error(`审核${collection}内容失败:`, err);
+          }
+        }
+      }
+    }
+    
+    return {
+      success: true,
+      flag: flag
+    };
+  } catch (err) {
+    console.error('自动审核内容失败:', err);
+    return {
+      success: false,
+      error: err.message
+    };
+  }
 } 
\ No newline at end of file
diff --git a/cloudfunctions/contentReview/package.json b/cloudfunctions/contentReview/package.json
index a28a0b7..68999ec 100644
--- a/cloudfunctions/contentReview/package.json
+++ b/cloudfunctions/contentReview/package.json
@@ -1,14 +1,14 @@
-{
-  "name": "contentReview",
-  "version": "1.0.0",
-  "description": "内容审核云函数",
-  "main": "index.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "",
-  "license": "ISC",
-  "dependencies": {
-    "wx-server-sdk": "~2.6.3"
-  }
+{
+  "name": "contentReview",
+  "version": "1.0.0",
+  "description": "内容审核云函数",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "wx-server-sdk": "~2.6.3"
+  }
 } 
\ No newline at end of file
diff --git a/cloudfunctions/grantShareReward/index.js b/cloudfunctions/grantShareReward/index.js
index 59b431e..a2692c3 100644
--- a/cloudfunctions/grantShareReward/index.js
+++ b/cloudfunctions/grantShareReward/index.js
@@ -1,84 +1,84 @@
-// 引入云开发服务端SDK
-const cloud = require('wx-server-sdk');
-cloud.init({ env: cloud.DYNAMIC_CURRENT_ENV });
-const db = cloud.database();
-
-// 获取今日零点的Date对象
-function getStartOfDay() {
-    const now = new Date();
-    return new Date(now.getFullYear(), now.getMonth(), now.getDate());
-}
-
-// 主函数
-exports.main = async (event, context) => {
-    console.log('云函数收到请求:', event);
-    
-    const wxContext = cloud.getWXContext();
-    const openid = wxContext.OPENID;
-    const DAILY_LIMIT = 5; // 每日奖励上限次数
-    const shareType = event.shareType || 'vote'; // 默认为投票类型
-    const userId = event.userId || '';
-    const itemId = event.itemId || '';
-    
-    console.log('用户信息:', {openid, userId, itemId, shareType});
-
-    try {
-        // 1. 查询用户今日已分享获得奖励的次数
-        const todayStart = getStartOfDay();
-        console.log('查询今日分享记录，开始时间:', todayStart);
-        
-        const countResult = await db.collection('share_logs')
-            .where({
-                _openid: openid,
-                shareTime: db.command.gte(todayStart),
-                shareType: shareType
-            })
-            .count();
-        
-        const todayCount = countResult.total;
-        console.log('今日已分享次数:', todayCount);
-
-        // 2. 检查是否已达到每日上限
-        if (todayCount >= DAILY_LIMIT) {
-            console.log('已达到每日上限');
-            return {
-                success: false,
-                code: 'LIMIT_REACHED',
-                message: `今日${shareType === 'vote' ? '投票' : '减票'}奖励已达上限(${DAILY_LIMIT}次)`,
-                remainingTimes: 0
-            };
-        }
-
-        // 3. 记录本次分享
-        console.log('记录本次分享');
-        const addResult = await db.collection('share_logs').add({
-            data: {
-                _openid: openid,
-                shareTime: new Date(),
-                shareType: shareType,
-                userId: userId,
-                itemId: itemId
-            }
-        });
-        
-        console.log('分享记录添加结果:', addResult);
-        
-        // 4. 返回成功信息
-        return {
-            success: true,
-            code: 'SUCCESS',
-            message: `分享成功，已获得${shareType === 'vote' ? '投票' : '减票'}奖励！`,
-            remainingTimes: DAILY_LIMIT - (todayCount + 1),
-            shareType: shareType
-        };
-
-    } catch (error) {
-        console.error('grantShareReward function error:', error);
-        return {
-            success: false,
-            code: 'DATABASE_ERROR',
-            message: '服务器繁忙，请稍后再试',
-            error: error.message
-        };
-    }
+// 引入云开发服务端SDK
+const cloud = require('wx-server-sdk');
+cloud.init({ env: cloud.DYNAMIC_CURRENT_ENV });
+const db = cloud.database();
+
+// 获取今日零点的Date对象
+function getStartOfDay() {
+    const now = new Date();
+    return new Date(now.getFullYear(), now.getMonth(), now.getDate());
+}
+
+// 主函数
+exports.main = async (event, context) => {
+    console.log('云函数收到请求:', event);
+    
+    const wxContext = cloud.getWXContext();
+    const openid = wxContext.OPENID;
+    const DAILY_LIMIT = 5; // 每日奖励上限次数
+    const shareType = event.shareType || 'vote'; // 默认为投票类型
+    const userId = event.userId || '';
+    const itemId = event.itemId || '';
+    
+    console.log('用户信息:', {openid, userId, itemId, shareType});
+
+    try {
+        // 1. 查询用户今日已分享获得奖励的次数
+        const todayStart = getStartOfDay();
+        console.log('查询今日分享记录，开始时间:', todayStart);
+        
+        const countResult = await db.collection('share_logs')
+            .where({
+                _openid: openid,
+                shareTime: db.command.gte(todayStart),
+                shareType: shareType
+            })
+            .count();
+        
+        const todayCount = countResult.total;
+        console.log('今日已分享次数:', todayCount);
+
+        // 2. 检查是否已达到每日上限
+        if (todayCount >= DAILY_LIMIT) {
+            console.log('已达到每日上限');
+            return {
+                success: false,
+                code: 'LIMIT_REACHED',
+                message: `今日${shareType === 'vote' ? '投票' : '减票'}奖励已达上限(${DAILY_LIMIT}次)`,
+                remainingTimes: 0
+            };
+        }
+
+        // 3. 记录本次分享
+        console.log('记录本次分享');
+        const addResult = await db.collection('share_logs').add({
+            data: {
+                _openid: openid,
+                shareTime: new Date(),
+                shareType: shareType,
+                userId: userId,
+                itemId: itemId
+            }
+        });
+        
+        console.log('分享记录添加结果:', addResult);
+        
+        // 4. 返回成功信息
+        return {
+            success: true,
+            code: 'SUCCESS',
+            message: `分享成功，已获得${shareType === 'vote' ? '投票' : '减票'}奖励！`,
+            remainingTimes: DAILY_LIMIT - (todayCount + 1),
+            shareType: shareType
+        };
+
+    } catch (error) {
+        console.error('grantShareReward function error:', error);
+        return {
+            success: false,
+            code: 'DATABASE_ERROR',
+            message: '服务器繁忙，请稍后再试',
+            error: error.message
+        };
+    }
 }; 
\ No newline at end of file
diff --git a/cloudfunctions/grantShareReward/package-lock.json b/cloudfunctions/grantShareReward/package-lock.json
index cfeab07..85fcd71 100644
--- a/cloudfunctions/grantShareReward/package-lock.json
+++ b/cloudfunctions/grantShareReward/package-lock.json
@@ -1,1288 +1,1288 @@
-{
-  "name": "grantShareReward",
-  "version": "1.0.0",
-  "lockfileVersion": 3,
-  "requires": true,
-  "packages": {
-    "": {
-      "name": "grantShareReward",
-      "version": "1.0.0",
-      "license": "ISC",
-      "dependencies": {
-        "wx-server-sdk": "latest"
-      }
-    },
-    "node_modules/@cloudbase/database": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/@cloudbase/database/-/database-1.4.1.tgz",
-      "integrity": "sha512-BYLXHS6c+WhxAvvdak8Z3W+heScqBBPu/CQ76gC8v1Scuy5qf4qxuPWNzyoxde/eZsmc+BRRCFyIq4xUnIot8g==",
-      "license": "ISC",
-      "dependencies": {
-        "bson": "^4.0.3",
-        "lodash.clonedeep": "4.5.0",
-        "lodash.set": "4.3.2",
-        "lodash.unset": "4.5.2"
-      }
-    },
-    "node_modules/@cloudbase/node-sdk": {
-      "version": "2.10.0",
-      "resolved": "https://registry.npmjs.org/@cloudbase/node-sdk/-/node-sdk-2.10.0.tgz",
-      "integrity": "sha512-P9loxdwN6qG3iIzjx2Z3uBk/4iyn9+KoiWYGi9ZwhWP1toijpQu0+eLSAaMupNJecJopS21IWUmmGSetlZh8UA==",
-      "license": "MIT",
-      "dependencies": {
-        "@cloudbase/database": "1.4.1",
-        "@cloudbase/signature-nodejs": "1.0.0-beta.0",
-        "agentkeepalive": "^4.3.0",
-        "axios": "^0.21.1",
-        "jsonwebtoken": "^8.5.1",
-        "request": "^2.87.0",
-        "retry": "^0.13.1",
-        "xml2js": "^0.5.0"
-      },
-      "engines": {
-        "node": ">=8.6.0"
-      }
-    },
-    "node_modules/@cloudbase/signature-nodejs": {
-      "version": "1.0.0-beta.0",
-      "resolved": "https://registry.npmjs.org/@cloudbase/signature-nodejs/-/signature-nodejs-1.0.0-beta.0.tgz",
-      "integrity": "sha512-gpKqwsVk/D2PzvFamYNReymXSdvRSY90eZ1ARf+1wZ8oT6OpK9kr6nmevGykMxN1n17Gn92hBbWqAxU9o3+kAQ==",
-      "dependencies": {
-        "@types/clone": "^0.1.30",
-        "clone": "^2.1.2",
-        "is-stream": "^2.0.0",
-        "url": "^0.11.0"
-      }
-    },
-    "node_modules/@protobufjs/aspromise": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
-      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/base64": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
-      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/codegen": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
-      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/eventemitter": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
-      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/fetch": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
-      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@protobufjs/aspromise": "^1.1.1",
-        "@protobufjs/inquire": "^1.1.0"
-      }
-    },
-    "node_modules/@protobufjs/float": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
-      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/inquire": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
-      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/path": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
-      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/pool": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
-      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/utf8": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
-      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@types/clone": {
-      "version": "0.1.30",
-      "resolved": "https://registry.npmjs.org/@types/clone/-/clone-0.1.30.tgz",
-      "integrity": "sha512-vcxBr+ybljeSiasmdke1cQ9ICxoEwaBgM1OQ/P5h4MPj/kRyLcDl5L8PrftlbyV1kBbJIs3M3x1A1+rcWd4mEA==",
-      "license": "MIT"
-    },
-    "node_modules/@types/node": {
-      "version": "24.3.0",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.3.0.tgz",
-      "integrity": "sha512-aPTXCrfwnDLj4VvXrm+UUCQjNEvJgNA8s5F1cvwQU+3KNltTOkBm1j30uNLyqqPNe7gE3KFzImYoZEfLhp4Yow==",
-      "license": "MIT",
-      "dependencies": {
-        "undici-types": "~7.10.0"
-      }
-    },
-    "node_modules/agentkeepalive": {
-      "version": "4.6.0",
-      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
-      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
-      "license": "MIT",
-      "dependencies": {
-        "humanize-ms": "^1.2.1"
-      },
-      "engines": {
-        "node": ">= 8.0.0"
-      }
-    },
-    "node_modules/ajv": {
-      "version": "6.12.6",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
-      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
-      "license": "MIT",
-      "dependencies": {
-        "fast-deep-equal": "^3.1.1",
-        "fast-json-stable-stringify": "^2.0.0",
-        "json-schema-traverse": "^0.4.1",
-        "uri-js": "^4.2.2"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/epoberezkin"
-      }
-    },
-    "node_modules/asn1": {
-      "version": "0.2.6",
-      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
-      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
-      "license": "MIT",
-      "dependencies": {
-        "safer-buffer": "~2.1.0"
-      }
-    },
-    "node_modules/assert-plus": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
-      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
-    "node_modules/asynckit": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
-      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
-      "license": "MIT"
-    },
-    "node_modules/aws-sign2": {
-      "version": "0.7.0",
-      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
-      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/aws4": {
-      "version": "1.13.2",
-      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.2.tgz",
-      "integrity": "sha512-lHe62zvbTB5eEABUVi/AwVh0ZKY9rMMDhmm+eeyuuUQbQ3+J+fONVQOZyj+DdrvD4BY33uYniyRJ4UJIaSKAfw==",
-      "license": "MIT"
-    },
-    "node_modules/axios": {
-      "version": "0.21.4",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz",
-      "integrity": "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==",
-      "license": "MIT",
-      "dependencies": {
-        "follow-redirects": "^1.14.0"
-      }
-    },
-    "node_modules/base64-js": {
-      "version": "1.5.1",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
-      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/bcrypt-pbkdf": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
-      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "tweetnacl": "^0.14.3"
-      }
-    },
-    "node_modules/bignumber.js": {
-      "version": "9.3.1",
-      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.1.tgz",
-      "integrity": "sha512-Ko0uX15oIUS7wJ3Rb30Fs6SkVbLmPBAKdlm7q9+ak9bbIeFf0MwuBsQV6z7+X768/cHsfg+WlysDWJcmthjsjQ==",
-      "license": "MIT",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/bson": {
-      "version": "4.7.2",
-      "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.2.tgz",
-      "integrity": "sha512-Ry9wCtIZ5kGqkJoi6aD8KjxFZEx78guTQDnpXWiNthsxzrxAK/i8E6pCHAIZTbaEFWcOCvbecMukfK7XUvyLpQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "buffer": "^5.6.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/buffer": {
-      "version": "5.7.1",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
-      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.1.13"
-      }
-    },
-    "node_modules/buffer-equal-constant-time": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
-      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/call-bind-apply-helpers": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
-      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
-      "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0",
-        "function-bind": "^1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/call-bound": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
-      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bind-apply-helpers": "^1.0.2",
-        "get-intrinsic": "^1.3.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/caseless": {
-      "version": "0.12.0",
-      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
-      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw==",
-      "license": "Apache-2.0"
-    },
-    "node_modules/clone": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.2.tgz",
-      "integrity": "sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
-    "node_modules/combined-stream": {
-      "version": "1.0.8",
-      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
-      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
-      "license": "MIT",
-      "dependencies": {
-        "delayed-stream": "~1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/core-util-is": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
-      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ==",
-      "license": "MIT"
-    },
-    "node_modules/dashdash": {
-      "version": "1.14.1",
-      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
-      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
-      "license": "MIT",
-      "dependencies": {
-        "assert-plus": "^1.0.0"
-      },
-      "engines": {
-        "node": ">=0.10"
-      }
-    },
-    "node_modules/delayed-stream": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
-      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/dunder-proto": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
-      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bind-apply-helpers": "^1.0.1",
-        "es-errors": "^1.3.0",
-        "gopd": "^1.2.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/ecc-jsbn": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
-      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
-      "license": "MIT",
-      "dependencies": {
-        "jsbn": "~0.1.0",
-        "safer-buffer": "^2.1.0"
-      }
-    },
-    "node_modules/ecdsa-sig-formatter": {
-      "version": "1.0.11",
-      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
-      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/es-define-property": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
-      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/es-errors": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
-      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/es-object-atoms": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
-      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
-      "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/extend": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
-      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
-      "license": "MIT"
-    },
-    "node_modules/extsprintf": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
-      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
-      "engines": [
-        "node >=0.6.0"
-      ],
-      "license": "MIT"
-    },
-    "node_modules/fast-deep-equal": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
-      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
-      "license": "MIT"
-    },
-    "node_modules/fast-json-stable-stringify": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
-      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
-      "license": "MIT"
-    },
-    "node_modules/follow-redirects": {
-      "version": "1.15.11",
-      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
-      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
-      "funding": [
-        {
-          "type": "individual",
-          "url": "https://github.com/sponsors/RubenVerborgh"
-        }
-      ],
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0"
-      },
-      "peerDependenciesMeta": {
-        "debug": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/forever-agent": {
-      "version": "0.6.1",
-      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
-      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/form-data": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
-      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
-      "license": "MIT",
-      "dependencies": {
-        "asynckit": "^0.4.0",
-        "combined-stream": "^1.0.6",
-        "mime-types": "^2.1.12"
-      },
-      "engines": {
-        "node": ">= 0.12"
-      }
-    },
-    "node_modules/function-bind": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
-      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/get-intrinsic": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
-      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bind-apply-helpers": "^1.0.2",
-        "es-define-property": "^1.0.1",
-        "es-errors": "^1.3.0",
-        "es-object-atoms": "^1.1.1",
-        "function-bind": "^1.1.2",
-        "get-proto": "^1.0.1",
-        "gopd": "^1.2.0",
-        "has-symbols": "^1.1.0",
-        "hasown": "^2.0.2",
-        "math-intrinsics": "^1.1.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/get-proto": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
-      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
-      "license": "MIT",
-      "dependencies": {
-        "dunder-proto": "^1.0.1",
-        "es-object-atoms": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/getpass": {
-      "version": "0.1.7",
-      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
-      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
-      "license": "MIT",
-      "dependencies": {
-        "assert-plus": "^1.0.0"
-      }
-    },
-    "node_modules/gopd": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
-      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/har-schema": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
-      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/har-validator": {
-      "version": "5.1.5",
-      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
-      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
-      "deprecated": "this library is no longer supported",
-      "license": "MIT",
-      "dependencies": {
-        "ajv": "^6.12.3",
-        "har-schema": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/has-symbols": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
-      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/hasown": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
-      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
-      "license": "MIT",
-      "dependencies": {
-        "function-bind": "^1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/http-signature": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
-      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
-      "license": "MIT",
-      "dependencies": {
-        "assert-plus": "^1.0.0",
-        "jsprim": "^1.2.2",
-        "sshpk": "^1.7.0"
-      },
-      "engines": {
-        "node": ">=0.8",
-        "npm": ">=1.3.7"
-      }
-    },
-    "node_modules/humanize-ms": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
-      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.0.0"
-      }
-    },
-    "node_modules/ieee754": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
-      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/is-stream": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
-      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/is-typedarray": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
-      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
-      "license": "MIT"
-    },
-    "node_modules/isstream": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
-      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
-      "license": "MIT"
-    },
-    "node_modules/jsbn": {
-      "version": "0.1.1",
-      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
-      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
-      "license": "MIT"
-    },
-    "node_modules/json-bigint": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
-      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
-      "license": "MIT",
-      "dependencies": {
-        "bignumber.js": "^9.0.0"
-      }
-    },
-    "node_modules/json-schema": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
-      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
-      "license": "(AFL-2.1 OR BSD-3-Clause)"
-    },
-    "node_modules/json-schema-traverse": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
-      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
-      "license": "MIT"
-    },
-    "node_modules/json-stringify-safe": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
-      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
-      "license": "ISC"
-    },
-    "node_modules/jsonwebtoken": {
-      "version": "8.5.1",
-      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
-      "integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
-      "license": "MIT",
-      "dependencies": {
-        "jws": "^3.2.2",
-        "lodash.includes": "^4.3.0",
-        "lodash.isboolean": "^3.0.3",
-        "lodash.isinteger": "^4.0.4",
-        "lodash.isnumber": "^3.0.3",
-        "lodash.isplainobject": "^4.0.6",
-        "lodash.isstring": "^4.0.1",
-        "lodash.once": "^4.0.0",
-        "ms": "^2.1.1",
-        "semver": "^5.6.0"
-      },
-      "engines": {
-        "node": ">=4",
-        "npm": ">=1.4.28"
-      }
-    },
-    "node_modules/jsprim": {
-      "version": "1.4.2",
-      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
-      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
-      "license": "MIT",
-      "dependencies": {
-        "assert-plus": "1.0.0",
-        "extsprintf": "1.3.0",
-        "json-schema": "0.4.0",
-        "verror": "1.10.0"
-      },
-      "engines": {
-        "node": ">=0.6.0"
-      }
-    },
-    "node_modules/jwa": {
-      "version": "1.4.2",
-      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
-      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
-      "license": "MIT",
-      "dependencies": {
-        "buffer-equal-constant-time": "^1.0.1",
-        "ecdsa-sig-formatter": "1.0.11",
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/jws": {
-      "version": "3.2.2",
-      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
-      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
-      "license": "MIT",
-      "dependencies": {
-        "jwa": "^1.4.1",
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/lodash.clonedeep": {
-      "version": "4.5.0",
-      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
-      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.includes": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
-      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isboolean": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
-      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isinteger": {
-      "version": "4.0.4",
-      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
-      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isnumber": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
-      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isplainobject": {
-      "version": "4.0.6",
-      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
-      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isstring": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
-      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.once": {
-      "version": "4.1.1",
-      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
-      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.set": {
-      "version": "4.3.2",
-      "resolved": "https://registry.npmjs.org/lodash.set/-/lodash.set-4.3.2.tgz",
-      "integrity": "sha512-4hNPN5jlm/N/HLMCO43v8BXKq9Z7QdAGc/VGrRD61w8gN9g/6jF9A4L1pbUgBLCffi0w9VsXfTOij5x8iTyFvg==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.unset": {
-      "version": "4.5.2",
-      "resolved": "https://registry.npmjs.org/lodash.unset/-/lodash.unset-4.5.2.tgz",
-      "integrity": "sha512-bwKX88k2JhCV9D1vtE8+naDKlLiGrSmf8zi/Y9ivFHwbmRfA8RxS/aVJ+sIht2XOwqoNr4xUPUkGZpc1sHFEKg==",
-      "license": "MIT"
-    },
-    "node_modules/long": {
-      "version": "5.3.2",
-      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
-      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
-      "license": "Apache-2.0"
-    },
-    "node_modules/math-intrinsics": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
-      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/mime-db": {
-      "version": "1.52.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
-      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/mime-types": {
-      "version": "2.1.35",
-      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
-      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
-      "license": "MIT",
-      "dependencies": {
-        "mime-db": "1.52.0"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
-    "node_modules/oauth-sign": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
-      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/object-inspect": {
-      "version": "1.13.4",
-      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
-      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/performance-now": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
-      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
-      "license": "MIT"
-    },
-    "node_modules/protobufjs": {
-      "version": "7.5.3",
-      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.3.tgz",
-      "integrity": "sha512-sildjKwVqOI2kmFDiXQ6aEB0fjYTafpEvIBs8tOR8qI4spuL9OPROLVu2qZqi/xgCfsHIwVqlaF8JBjWFHnKbw==",
-      "hasInstallScript": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@protobufjs/aspromise": "^1.1.2",
-        "@protobufjs/base64": "^1.1.2",
-        "@protobufjs/codegen": "^2.0.4",
-        "@protobufjs/eventemitter": "^1.1.0",
-        "@protobufjs/fetch": "^1.1.0",
-        "@protobufjs/float": "^1.0.2",
-        "@protobufjs/inquire": "^1.1.0",
-        "@protobufjs/path": "^1.1.2",
-        "@protobufjs/pool": "^1.1.0",
-        "@protobufjs/utf8": "^1.1.0",
-        "@types/node": ">=13.7.0",
-        "long": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=12.0.0"
-      }
-    },
-    "node_modules/psl": {
-      "version": "1.15.0",
-      "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
-      "integrity": "sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==",
-      "license": "MIT",
-      "dependencies": {
-        "punycode": "^2.3.1"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/lupomontero"
-      }
-    },
-    "node_modules/punycode": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
-      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/qs": {
-      "version": "6.5.3",
-      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
-      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=0.6"
-      }
-    },
-    "node_modules/request": {
-      "version": "2.88.2",
-      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
-      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
-      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "aws-sign2": "~0.7.0",
-        "aws4": "^1.8.0",
-        "caseless": "~0.12.0",
-        "combined-stream": "~1.0.6",
-        "extend": "~3.0.2",
-        "forever-agent": "~0.6.1",
-        "form-data": "~2.3.2",
-        "har-validator": "~5.1.3",
-        "http-signature": "~1.2.0",
-        "is-typedarray": "~1.0.0",
-        "isstream": "~0.1.2",
-        "json-stringify-safe": "~5.0.1",
-        "mime-types": "~2.1.19",
-        "oauth-sign": "~0.9.0",
-        "performance-now": "^2.1.0",
-        "qs": "~6.5.2",
-        "safe-buffer": "^5.1.2",
-        "tough-cookie": "~2.5.0",
-        "tunnel-agent": "^0.6.0",
-        "uuid": "^3.3.2"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/retry": {
-      "version": "0.13.1",
-      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
-      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 4"
-      }
-    },
-    "node_modules/safe-buffer": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
-      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/safer-buffer": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
-      "license": "MIT"
-    },
-    "node_modules/sax": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
-      "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==",
-      "license": "ISC"
-    },
-    "node_modules/semver": {
-      "version": "5.7.2",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
-      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver"
-      }
-    },
-    "node_modules/side-channel": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
-      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
-      "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0",
-        "object-inspect": "^1.13.3",
-        "side-channel-list": "^1.0.0",
-        "side-channel-map": "^1.0.1",
-        "side-channel-weakmap": "^1.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/side-channel-list": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
-      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
-      "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0",
-        "object-inspect": "^1.13.3"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/side-channel-map": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
-      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bound": "^1.0.2",
-        "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.5",
-        "object-inspect": "^1.13.3"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/side-channel-weakmap": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
-      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bound": "^1.0.2",
-        "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.5",
-        "object-inspect": "^1.13.3",
-        "side-channel-map": "^1.0.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/sshpk": {
-      "version": "1.18.0",
-      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.18.0.tgz",
-      "integrity": "sha512-2p2KJZTSqQ/I3+HX42EpYOa2l3f8Erv8MWKsy2I9uf4wA7yFIkXRffYdsx86y6z4vHtV8u7g+pPlr8/4ouAxsQ==",
-      "license": "MIT",
-      "dependencies": {
-        "asn1": "~0.2.3",
-        "assert-plus": "^1.0.0",
-        "bcrypt-pbkdf": "^1.0.0",
-        "dashdash": "^1.12.0",
-        "ecc-jsbn": "~0.1.1",
-        "getpass": "^0.1.1",
-        "jsbn": "~0.1.0",
-        "safer-buffer": "^2.0.2",
-        "tweetnacl": "~0.14.0"
-      },
-      "bin": {
-        "sshpk-conv": "bin/sshpk-conv",
-        "sshpk-sign": "bin/sshpk-sign",
-        "sshpk-verify": "bin/sshpk-verify"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/tough-cookie": {
-      "version": "2.5.0",
-      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
-      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "psl": "^1.1.28",
-        "punycode": "^2.1.1"
-      },
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
-    "node_modules/tslib": {
-      "version": "1.14.1",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
-      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
-      "license": "0BSD"
-    },
-    "node_modules/tunnel-agent": {
-      "version": "0.6.0",
-      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
-      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "safe-buffer": "^5.0.1"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/tweetnacl": {
-      "version": "0.14.5",
-      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
-      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA==",
-      "license": "Unlicense"
-    },
-    "node_modules/undici-types": {
-      "version": "7.10.0",
-      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz",
-      "integrity": "sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==",
-      "license": "MIT"
-    },
-    "node_modules/uri-js": {
-      "version": "4.4.1",
-      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
-      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "punycode": "^2.1.0"
-      }
-    },
-    "node_modules/url": {
-      "version": "0.11.4",
-      "resolved": "https://registry.npmjs.org/url/-/url-0.11.4.tgz",
-      "integrity": "sha512-oCwdVC7mTuWiPyjLUz/COz5TLk6wgp0RCsN+wHZ2Ekneac9w8uuV0njcbbie2ME+Vs+d6duwmYuR3HgQXs1fOg==",
-      "license": "MIT",
-      "dependencies": {
-        "punycode": "^1.4.1",
-        "qs": "^6.12.3"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/url/node_modules/punycode": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
-      "integrity": "sha512-jmYNElW7yvO7TV33CjSmvSiE2yco3bV2czu/OzDKdMNVZQWfxCblURLhf+47syQRBntjfLdd/H0egrzIG+oaFQ==",
-      "license": "MIT"
-    },
-    "node_modules/url/node_modules/qs": {
-      "version": "6.14.0",
-      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
-      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "side-channel": "^1.1.0"
-      },
-      "engines": {
-        "node": ">=0.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/uuid": {
-      "version": "3.4.0",
-      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
-      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
-      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
-      "license": "MIT",
-      "bin": {
-        "uuid": "bin/uuid"
-      }
-    },
-    "node_modules/verror": {
-      "version": "1.10.0",
-      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
-      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
-      "engines": [
-        "node >=0.6.0"
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "assert-plus": "^1.0.0",
-        "core-util-is": "1.0.2",
-        "extsprintf": "^1.2.0"
-      }
-    },
-    "node_modules/wx-server-sdk": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/wx-server-sdk/-/wx-server-sdk-3.0.1.tgz",
-      "integrity": "sha512-b53tbqTV9knXJIfcmWTmksQvk+BC54vTU6WZNwEvAJ3iOxrRhPitcygyiwFfMBWpFm9YvkwITEhU821XoG8llQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@cloudbase/node-sdk": "2.10.0",
-        "json-bigint": "^1.0.0",
-        "protobufjs": "^7.2.4",
-        "tslib": "^1.9.3"
-      }
-    },
-    "node_modules/xml2js": {
-      "version": "0.5.0",
-      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.5.0.tgz",
-      "integrity": "sha512-drPFnkQJik/O+uPKpqSgr22mpuFHqKdbS835iAQrUC73L2F5WkboIRd63ai/2Yg6I1jzifPFKH2NTK+cfglkIA==",
-      "license": "MIT",
-      "dependencies": {
-        "sax": ">=0.6.0",
-        "xmlbuilder": "~11.0.0"
-      },
-      "engines": {
-        "node": ">=4.0.0"
-      }
-    },
-    "node_modules/xmlbuilder": {
-      "version": "11.0.1",
-      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
-      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0"
-      }
-    }
-  }
-}
+{
+  "name": "grantShareReward",
+  "version": "1.0.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "grantShareReward",
+      "version": "1.0.0",
+      "license": "ISC",
+      "dependencies": {
+        "wx-server-sdk": "latest"
+      }
+    },
+    "node_modules/@cloudbase/database": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/@cloudbase/database/-/database-1.4.1.tgz",
+      "integrity": "sha512-BYLXHS6c+WhxAvvdak8Z3W+heScqBBPu/CQ76gC8v1Scuy5qf4qxuPWNzyoxde/eZsmc+BRRCFyIq4xUnIot8g==",
+      "license": "ISC",
+      "dependencies": {
+        "bson": "^4.0.3",
+        "lodash.clonedeep": "4.5.0",
+        "lodash.set": "4.3.2",
+        "lodash.unset": "4.5.2"
+      }
+    },
+    "node_modules/@cloudbase/node-sdk": {
+      "version": "2.10.0",
+      "resolved": "https://registry.npmjs.org/@cloudbase/node-sdk/-/node-sdk-2.10.0.tgz",
+      "integrity": "sha512-P9loxdwN6qG3iIzjx2Z3uBk/4iyn9+KoiWYGi9ZwhWP1toijpQu0+eLSAaMupNJecJopS21IWUmmGSetlZh8UA==",
+      "license": "MIT",
+      "dependencies": {
+        "@cloudbase/database": "1.4.1",
+        "@cloudbase/signature-nodejs": "1.0.0-beta.0",
+        "agentkeepalive": "^4.3.0",
+        "axios": "^0.21.1",
+        "jsonwebtoken": "^8.5.1",
+        "request": "^2.87.0",
+        "retry": "^0.13.1",
+        "xml2js": "^0.5.0"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/@cloudbase/signature-nodejs": {
+      "version": "1.0.0-beta.0",
+      "resolved": "https://registry.npmjs.org/@cloudbase/signature-nodejs/-/signature-nodejs-1.0.0-beta.0.tgz",
+      "integrity": "sha512-gpKqwsVk/D2PzvFamYNReymXSdvRSY90eZ1ARf+1wZ8oT6OpK9kr6nmevGykMxN1n17Gn92hBbWqAxU9o3+kAQ==",
+      "dependencies": {
+        "@types/clone": "^0.1.30",
+        "clone": "^2.1.2",
+        "is-stream": "^2.0.0",
+        "url": "^0.11.0"
+      }
+    },
+    "node_modules/@protobufjs/aspromise": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
+      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/base64": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
+      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/codegen": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
+      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/eventemitter": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
+      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/fetch": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
+      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@protobufjs/aspromise": "^1.1.1",
+        "@protobufjs/inquire": "^1.1.0"
+      }
+    },
+    "node_modules/@protobufjs/float": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
+      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/inquire": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
+      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/path": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
+      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/pool": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
+      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@protobufjs/utf8": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
+      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/@types/clone": {
+      "version": "0.1.30",
+      "resolved": "https://registry.npmjs.org/@types/clone/-/clone-0.1.30.tgz",
+      "integrity": "sha512-vcxBr+ybljeSiasmdke1cQ9ICxoEwaBgM1OQ/P5h4MPj/kRyLcDl5L8PrftlbyV1kBbJIs3M3x1A1+rcWd4mEA==",
+      "license": "MIT"
+    },
+    "node_modules/@types/node": {
+      "version": "24.3.0",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.3.0.tgz",
+      "integrity": "sha512-aPTXCrfwnDLj4VvXrm+UUCQjNEvJgNA8s5F1cvwQU+3KNltTOkBm1j30uNLyqqPNe7gE3KFzImYoZEfLhp4Yow==",
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~7.10.0"
+      }
+    },
+    "node_modules/agentkeepalive": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
+      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
+      "license": "MIT",
+      "dependencies": {
+        "humanize-ms": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      }
+    },
+    "node_modules/ajv": {
+      "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.1",
+        "fast-json-stable-stringify": "^2.0.0",
+        "json-schema-traverse": "^0.4.1",
+        "uri-js": "^4.2.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/asn1": {
+      "version": "0.2.6",
+      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
+      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
+      "license": "MIT",
+      "dependencies": {
+        "safer-buffer": "~2.1.0"
+      }
+    },
+    "node_modules/assert-plus": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
+      "license": "MIT"
+    },
+    "node_modules/aws-sign2": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
+      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/aws4": {
+      "version": "1.13.2",
+      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.2.tgz",
+      "integrity": "sha512-lHe62zvbTB5eEABUVi/AwVh0ZKY9rMMDhmm+eeyuuUQbQ3+J+fONVQOZyj+DdrvD4BY33uYniyRJ4UJIaSKAfw==",
+      "license": "MIT"
+    },
+    "node_modules/axios": {
+      "version": "0.21.4",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz",
+      "integrity": "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==",
+      "license": "MIT",
+      "dependencies": {
+        "follow-redirects": "^1.14.0"
+      }
+    },
+    "node_modules/base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/bcrypt-pbkdf": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
+      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "tweetnacl": "^0.14.3"
+      }
+    },
+    "node_modules/bignumber.js": {
+      "version": "9.3.1",
+      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.1.tgz",
+      "integrity": "sha512-Ko0uX15oIUS7wJ3Rb30Fs6SkVbLmPBAKdlm7q9+ak9bbIeFf0MwuBsQV6z7+X768/cHsfg+WlysDWJcmthjsjQ==",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/bson": {
+      "version": "4.7.2",
+      "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.2.tgz",
+      "integrity": "sha512-Ry9wCtIZ5kGqkJoi6aD8KjxFZEx78guTQDnpXWiNthsxzrxAK/i8E6pCHAIZTbaEFWcOCvbecMukfK7XUvyLpQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "buffer": "^5.6.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/buffer": {
+      "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
+      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.1.13"
+      }
+    },
+    "node_modules/buffer-equal-constant-time": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
+      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/caseless": {
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
+      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/clone": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.2.tgz",
+      "integrity": "sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "license": "MIT",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/core-util-is": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ==",
+      "license": "MIT"
+    },
+    "node_modules/dashdash": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
+      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
+      "license": "MIT",
+      "dependencies": {
+        "assert-plus": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ecc-jsbn": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
+      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
+      "license": "MIT",
+      "dependencies": {
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.1.0"
+      }
+    },
+    "node_modules/ecdsa-sig-formatter": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
+      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/extend": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
+      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
+      "license": "MIT"
+    },
+    "node_modules/extsprintf": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
+      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
+      "engines": [
+        "node >=0.6.0"
+      ],
+      "license": "MIT"
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "license": "MIT"
+    },
+    "node_modules/fast-json-stable-stringify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "license": "MIT"
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.11",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
+      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/forever-agent": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
+      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/form-data": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
+      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
+      "license": "MIT",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.6",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 0.12"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/getpass": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
+      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
+      "license": "MIT",
+      "dependencies": {
+        "assert-plus": "^1.0.0"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/har-schema": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
+      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/har-validator": {
+      "version": "5.1.5",
+      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
+      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
+      "deprecated": "this library is no longer supported",
+      "license": "MIT",
+      "dependencies": {
+        "ajv": "^6.12.3",
+        "har-schema": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/http-signature": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
+      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
+      "license": "MIT",
+      "dependencies": {
+        "assert-plus": "^1.0.0",
+        "jsprim": "^1.2.2",
+        "sshpk": "^1.7.0"
+      },
+      "engines": {
+        "node": ">=0.8",
+        "npm": ">=1.3.7"
+      }
+    },
+    "node_modules/humanize-ms": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
+      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.0.0"
+      }
+    },
+    "node_modules/ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/is-stream": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
+      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/is-typedarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
+      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
+      "license": "MIT"
+    },
+    "node_modules/isstream": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
+      "license": "MIT"
+    },
+    "node_modules/jsbn": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
+      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
+      "license": "MIT"
+    },
+    "node_modules/json-bigint": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
+      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
+      "license": "MIT",
+      "dependencies": {
+        "bignumber.js": "^9.0.0"
+      }
+    },
+    "node_modules/json-schema": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
+      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
+      "license": "(AFL-2.1 OR BSD-3-Clause)"
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "license": "MIT"
+    },
+    "node_modules/json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
+      "license": "ISC"
+    },
+    "node_modules/jsonwebtoken": {
+      "version": "8.5.1",
+      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
+      "integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
+      "license": "MIT",
+      "dependencies": {
+        "jws": "^3.2.2",
+        "lodash.includes": "^4.3.0",
+        "lodash.isboolean": "^3.0.3",
+        "lodash.isinteger": "^4.0.4",
+        "lodash.isnumber": "^3.0.3",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.isstring": "^4.0.1",
+        "lodash.once": "^4.0.0",
+        "ms": "^2.1.1",
+        "semver": "^5.6.0"
+      },
+      "engines": {
+        "node": ">=4",
+        "npm": ">=1.4.28"
+      }
+    },
+    "node_modules/jsprim": {
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
+      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
+      "license": "MIT",
+      "dependencies": {
+        "assert-plus": "1.0.0",
+        "extsprintf": "1.3.0",
+        "json-schema": "0.4.0",
+        "verror": "1.10.0"
+      },
+      "engines": {
+        "node": ">=0.6.0"
+      }
+    },
+    "node_modules/jwa": {
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
+      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
+      "license": "MIT",
+      "dependencies": {
+        "buffer-equal-constant-time": "^1.0.1",
+        "ecdsa-sig-formatter": "1.0.11",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/jws": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
+      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
+      "license": "MIT",
+      "dependencies": {
+        "jwa": "^1.4.1",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/lodash.clonedeep": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
+      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.includes": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
+      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isboolean": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
+      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isinteger": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
+      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isnumber": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
+      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isplainobject": {
+      "version": "4.0.6",
+      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
+      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isstring": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
+      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.once": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
+      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.set": {
+      "version": "4.3.2",
+      "resolved": "https://registry.npmjs.org/lodash.set/-/lodash.set-4.3.2.tgz",
+      "integrity": "sha512-4hNPN5jlm/N/HLMCO43v8BXKq9Z7QdAGc/VGrRD61w8gN9g/6jF9A4L1pbUgBLCffi0w9VsXfTOij5x8iTyFvg==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.unset": {
+      "version": "4.5.2",
+      "resolved": "https://registry.npmjs.org/lodash.unset/-/lodash.unset-4.5.2.tgz",
+      "integrity": "sha512-bwKX88k2JhCV9D1vtE8+naDKlLiGrSmf8zi/Y9ivFHwbmRfA8RxS/aVJ+sIht2XOwqoNr4xUPUkGZpc1sHFEKg==",
+      "license": "MIT"
+    },
+    "node_modules/long": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
+      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "license": "MIT",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
+    },
+    "node_modules/oauth-sign": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
+      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/object-inspect": {
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/performance-now": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
+      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
+      "license": "MIT"
+    },
+    "node_modules/protobufjs": {
+      "version": "7.5.3",
+      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.3.tgz",
+      "integrity": "sha512-sildjKwVqOI2kmFDiXQ6aEB0fjYTafpEvIBs8tOR8qI4spuL9OPROLVu2qZqi/xgCfsHIwVqlaF8JBjWFHnKbw==",
+      "hasInstallScript": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@protobufjs/aspromise": "^1.1.2",
+        "@protobufjs/base64": "^1.1.2",
+        "@protobufjs/codegen": "^2.0.4",
+        "@protobufjs/eventemitter": "^1.1.0",
+        "@protobufjs/fetch": "^1.1.0",
+        "@protobufjs/float": "^1.0.2",
+        "@protobufjs/inquire": "^1.1.0",
+        "@protobufjs/path": "^1.1.2",
+        "@protobufjs/pool": "^1.1.0",
+        "@protobufjs/utf8": "^1.1.0",
+        "@types/node": ">=13.7.0",
+        "long": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      }
+    },
+    "node_modules/psl": {
+      "version": "1.15.0",
+      "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
+      "integrity": "sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==",
+      "license": "MIT",
+      "dependencies": {
+        "punycode": "^2.3.1"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/lupomontero"
+      }
+    },
+    "node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/qs": {
+      "version": "6.5.3",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
+      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.6"
+      }
+    },
+    "node_modules/request": {
+      "version": "2.88.2",
+      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
+      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
+      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "aws-sign2": "~0.7.0",
+        "aws4": "^1.8.0",
+        "caseless": "~0.12.0",
+        "combined-stream": "~1.0.6",
+        "extend": "~3.0.2",
+        "forever-agent": "~0.6.1",
+        "form-data": "~2.3.2",
+        "har-validator": "~5.1.3",
+        "http-signature": "~1.2.0",
+        "is-typedarray": "~1.0.0",
+        "isstream": "~0.1.2",
+        "json-stringify-safe": "~5.0.1",
+        "mime-types": "~2.1.19",
+        "oauth-sign": "~0.9.0",
+        "performance-now": "^2.1.0",
+        "qs": "~6.5.2",
+        "safe-buffer": "^5.1.2",
+        "tough-cookie": "~2.5.0",
+        "tunnel-agent": "^0.6.0",
+        "uuid": "^3.3.2"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/retry": {
+      "version": "0.13.1",
+      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
+      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "license": "MIT"
+    },
+    "node_modules/sax": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
+      "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==",
+      "license": "ISC"
+    },
+    "node_modules/semver": {
+      "version": "5.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
+      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver"
+      }
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/sshpk": {
+      "version": "1.18.0",
+      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.18.0.tgz",
+      "integrity": "sha512-2p2KJZTSqQ/I3+HX42EpYOa2l3f8Erv8MWKsy2I9uf4wA7yFIkXRffYdsx86y6z4vHtV8u7g+pPlr8/4ouAxsQ==",
+      "license": "MIT",
+      "dependencies": {
+        "asn1": "~0.2.3",
+        "assert-plus": "^1.0.0",
+        "bcrypt-pbkdf": "^1.0.0",
+        "dashdash": "^1.12.0",
+        "ecc-jsbn": "~0.1.1",
+        "getpass": "^0.1.1",
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.0.2",
+        "tweetnacl": "~0.14.0"
+      },
+      "bin": {
+        "sshpk-conv": "bin/sshpk-conv",
+        "sshpk-sign": "bin/sshpk-sign",
+        "sshpk-verify": "bin/sshpk-verify"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/tough-cookie": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
+      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "psl": "^1.1.28",
+        "punycode": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/tslib": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
+      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
+      "license": "0BSD"
+    },
+    "node_modules/tunnel-agent": {
+      "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
+      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/tweetnacl": {
+      "version": "0.14.5",
+      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
+      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA==",
+      "license": "Unlicense"
+    },
+    "node_modules/undici-types": {
+      "version": "7.10.0",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz",
+      "integrity": "sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==",
+      "license": "MIT"
+    },
+    "node_modules/uri-js": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "punycode": "^2.1.0"
+      }
+    },
+    "node_modules/url": {
+      "version": "0.11.4",
+      "resolved": "https://registry.npmjs.org/url/-/url-0.11.4.tgz",
+      "integrity": "sha512-oCwdVC7mTuWiPyjLUz/COz5TLk6wgp0RCsN+wHZ2Ekneac9w8uuV0njcbbie2ME+Vs+d6duwmYuR3HgQXs1fOg==",
+      "license": "MIT",
+      "dependencies": {
+        "punycode": "^1.4.1",
+        "qs": "^6.12.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/url/node_modules/punycode": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
+      "integrity": "sha512-jmYNElW7yvO7TV33CjSmvSiE2yco3bV2czu/OzDKdMNVZQWfxCblURLhf+47syQRBntjfLdd/H0egrzIG+oaFQ==",
+      "license": "MIT"
+    },
+    "node_modules/url/node_modules/qs": {
+      "version": "6.14.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
+      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=0.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/uuid": {
+      "version": "3.4.0",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
+      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
+      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
+      "license": "MIT",
+      "bin": {
+        "uuid": "bin/uuid"
+      }
+    },
+    "node_modules/verror": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
+      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
+      "engines": [
+        "node >=0.6.0"
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "assert-plus": "^1.0.0",
+        "core-util-is": "1.0.2",
+        "extsprintf": "^1.2.0"
+      }
+    },
+    "node_modules/wx-server-sdk": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/wx-server-sdk/-/wx-server-sdk-3.0.1.tgz",
+      "integrity": "sha512-b53tbqTV9knXJIfcmWTmksQvk+BC54vTU6WZNwEvAJ3iOxrRhPitcygyiwFfMBWpFm9YvkwITEhU821XoG8llQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@cloudbase/node-sdk": "2.10.0",
+        "json-bigint": "^1.0.0",
+        "protobufjs": "^7.2.4",
+        "tslib": "^1.9.3"
+      }
+    },
+    "node_modules/xml2js": {
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.5.0.tgz",
+      "integrity": "sha512-drPFnkQJik/O+uPKpqSgr22mpuFHqKdbS835iAQrUC73L2F5WkboIRd63ai/2Yg6I1jzifPFKH2NTK+cfglkIA==",
+      "license": "MIT",
+      "dependencies": {
+        "sax": ">=0.6.0",
+        "xmlbuilder": "~11.0.0"
+      },
+      "engines": {
+        "node": ">=4.0.0"
+      }
+    },
+    "node_modules/xmlbuilder": {
+      "version": "11.0.1",
+      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
+      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=4.0"
+      }
+    }
+  }
+}
diff --git a/cloudfunctions/grantShareReward/package.json b/cloudfunctions/grantShareReward/package.json
index f443e32..1aab316 100644
--- a/cloudfunctions/grantShareReward/package.json
+++ b/cloudfunctions/grantShareReward/package.json
@@ -1,14 +1,14 @@
-{
-  "name": "grantShareReward",
-  "version": "1.0.0",
-  "description": "处理分享奖励的云函数",
-  "main": "index.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "",
-  "license": "ISC",
-  "dependencies": {
-    "wx-server-sdk": "latest"
-  }
+{
+  "name": "grantShareReward",
+  "version": "1.0.0",
+  "description": "处理分享奖励的云函数",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "wx-server-sdk": "latest"
+  }
 } 
\ No newline at end of file
diff --git a/cloudfunctions/login/package.json b/cloudfunctions/login/package.json
index 4a4245c..ce90c12 100644
--- a/cloudfunctions/login/package.json
+++ b/cloudfunctions/login/package.json
@@ -1,3 +1,4 @@
+<<<<<<< Updated upstream:cloudfunctions/login/package.json
 {
   "name": "login",
   "version": "1.0.0",
@@ -11,4 +12,19 @@
   "dependencies": {
     "wx-server-sdk": "~2.6.3"
   }
+=======
+{
+  "name": "search",
+  "version": "1.0.0",
+  "description": "搜索功能云函数",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "wx-server-sdk": "~2.6.3"
+  }
+>>>>>>> Stashed changes:cloudfunctions/search/package.json
 } 
\ No newline at end of file
diff --git a/cloudfunctions/messageManage/package.json b/cloudfunctions/messageManage/package.json
index ad3cbf2..fd24648 100644
--- a/cloudfunctions/messageManage/package.json
+++ b/cloudfunctions/messageManage/package.json
@@ -1,14 +1,14 @@
-{
-  "name": "messageManage",
-  "version": "1.0.0",
-  "description": "消息管理云函数",
-  "main": "index.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "",
-  "license": "ISC",
-  "dependencies": {
-    "wx-server-sdk": "~2.6.3"
-  }
+{
+  "name": "messageManage",
+  "version": "1.0.0",
+  "description": "消息管理云函数",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "wx-server-sdk": "~2.6.3"
+  }
 } 
\ No newline at end of file
diff --git a/cloudfunctions/search/index.js b/cloudfunctions/search/index.js
new file mode 100644
index 0000000..3e4aab3
--- /dev/null
+++ b/cloudfunctions/search/index.js
@@ -0,0 +1,367 @@
+// 云函数入口文件
+const cloud = require('wx-server-sdk')
+
+cloud.init({
+  env: cloud.DYNAMIC_CURRENT_ENV
+})
+
+const db = cloud.database()
+const _ = db.command
+const $ = db.command.aggregate
+
+// 云函数入口函数
+exports.main = async (event, context) => {
+  const wxContext = cloud.getWXContext()
+  const { OPENID } = wxContext
+  const { action, keyword, category, limit = 20, skip = 0 } = event
+  
+  // 根据不同的操作执行不同的功能
+  switch (action) {
+    case 'searchNominations':
+      return await searchNominations(keyword, category, limit, skip)
+    case 'searchByLocation':
+      return await searchByLocation(event.location, event.radius, limit, skip)
+    case 'getRecommendations':
+      return await getRecommendations(OPENID, limit)
+    case 'getPopularSearches':
+      return await getPopularSearches(limit)
+    default:
+      return {
+        success: false,
+        message: '未知操作类型'
+      }
+  }
+}
+
+/**
+ * 搜索提名
+ * @param {string} keyword 搜索关键词
+ * @param {string} category 分类过滤（可选）
+ * @param {number} limit 每页数量
+ * @param {number} skip 跳过记录数
+ */
+async function searchNominations(keyword, category, limit = 20, skip = 0) {
+  try {
+    // 记录搜索关键词
+    if (keyword) {
+      await logSearch(keyword);
+    }
+    
+    // 构建查询条件
+    let query = {}
+    
+    // 如果提供了关键词，添加模糊搜索条件
+    if (keyword && keyword.trim()) {
+      // 分词处理关键词
+      const keywords = keyword.trim().split(/\s+/).filter(k => k);
+      
+      if (keywords.length > 0) {
+        // 构建OR条件，匹配任一关键词
+        const orConditions = keywords.map(k => {
+          return {
+            name: db.RegExp({
+              regexp: k,
+              options: 'i'
+            })
+          }
+        });
+        
+        // 再添加描述字段的搜索
+        keywords.forEach(k => {
+          orConditions.push({
+            description: db.RegExp({
+              regexp: k,
+              options: 'i'
+            })
+          });
+          
+          // 修改为搜索location字段
+          orConditions.push({
+            location: db.RegExp({
+              regexp: k,
+              options: 'i'
+            })
+          });
+        });
+        
+        query = _.or(orConditions);
+      }
+    }
+    
+    // 如果提供了分类，添加分类过滤
+    if (category) {
+      query = _.and([
+        query,
+        { category: category }
+      ]);
+    }
+    
+    // 执行搜索查询
+    const searchResult = await db.collection('entries')
+      .where(query)
+      .orderBy('votes', 'desc')
+      .skip(skip)
+      .limit(limit)
+      .get();
+    
+    // 获取总记录数
+    const countResult = await db.collection('entries')
+      .where(query)
+      .count();
+    
+    return {
+      success: true,
+      data: searchResult.data,
+      total: countResult.total,
+      hasMore: skip + searchResult.data.length < countResult.total
+    };
+  } catch (err) {
+    console.error('搜索提名失败:', err);
+    return {
+      success: false,
+      message: '搜索失败',
+      error: err.message
+    };
+  }
+}
+
+/**
+ * 根据位置搜索提名
+ * @param {object} location 位置坐标 {latitude, longitude}
+ * @param {number} radius 搜索半径（公里）
+ * @param {number} limit 每页数量
+ * @param {number} skip 跳过记录数
+ */
+async function searchByLocation(location, radius = 5, limit = 20, skip = 0) {
+  if (!location || !location.latitude || !location.longitude) {
+    return {
+      success: false,
+      message: '缺少位置信息'
+    }
+  }
+  
+  try {
+    // 使用聚合操作计算距离并筛选
+    const result = await db.collection('entries')
+      .aggregate()
+      .geoNear({
+        distanceField: 'distance', // 输出的距离字段名
+        spherical: true,
+        near: {
+          type: 'Point',
+          coordinates: [location.longitude, location.latitude]
+        },
+        maxDistance: radius * 1000, // 转换为米
+        query: {
+          location: _.exists(true) // 确保有位置字段
+        }
+      })
+      .skip(skip)
+      .limit(limit)
+      .end()
+    
+    // 计算总数（这是一个近似值，因为geoNear不支持直接计数）
+    const approximateTotal = await db.collection('entries')
+      .where({
+        location: _.exists(true) // 确保有位置字段
+      })
+      .count()
+    
+    return {
+      success: true,
+      data: result.list,
+      total: approximateTotal.total,
+      hasMore: result.list.length >= limit // 近似判断
+    }
+  } catch (err) {
+    console.error('位置搜索失败:', err)
+    return {
+      success: false,
+      message: '位置搜索失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 获取推荐提名
+ * @param {string} openid 用户的openid
+ * @param {number} limit 返回数量
+ */
+async function getRecommendations(openid, limit = 10) {
+  try {
+    // 获取用户信息
+    const userRes = await db.collection('users').where({
+      openid: openid
+    }).get()
+    
+    if (!userRes.data || userRes.data.length === 0) {
+      // 用户不存在，返回热门提名
+      return await getHotNominations(limit)
+    }
+    
+    const user = userRes.data[0]
+    
+    // 获取用户已投票的提名
+    const votedNominations = await db.collection('votes')
+      .where({
+        userId: user._id
+      })
+      .get()
+    
+    // 提取已投票的提名ID
+    const votedIds = votedNominations.data.map(vote => vote.targetId)
+    
+    // 查询用户可能喜欢的提名（基于投票历史的分类）
+    const userVotedCategories = await db.collection('votes')
+      .aggregate()
+      .match({
+        userId: user._id
+      })
+      .lookup({
+        from: 'entries',
+        localField: 'targetId',
+        foreignField: '_id',
+        as: 'nomination'
+      })
+      .unwind('$nomination')
+      .group({
+        _id: '$nomination.category',
+        count: $.sum(1)
+      })
+      .sort({
+        count: -1
+      })
+      .limit(3) // 取用户最常投票的3个分类
+      .end()
+    
+    // 如果用户有投票历史
+    if (userVotedCategories.list.length > 0) {
+      const preferredCategories = userVotedCategories.list.map(item => item._id).filter(Boolean)
+      
+      // 如果有明确的分类偏好
+      if (preferredCategories.length > 0) {
+        // 查询符合用户偏好分类且未投票的提名
+        const recommendResult = await db.collection('entries')
+          .where({
+            category: _.in(preferredCategories),
+            _id: _.nin(votedIds) // 排除已投票的
+          })
+          .orderBy('votes', 'desc')
+          .limit(limit)
+          .get()
+        
+        // 如果找到了推荐
+        if (recommendResult.data && recommendResult.data.length > 0) {
+          return {
+            success: true,
+            data: recommendResult.data,
+            type: 'personalized'
+          }
+        }
+      }
+    }
+    
+    // 如果没有找到个性化推荐，返回热门提名（排除已投票的）
+    return await getHotNominations(limit, votedIds)
+  } catch (err) {
+    console.error('获取推荐提名失败:', err)
+    return {
+      success: false,
+      message: '获取推荐失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 获取热门提名
+ * @param {number} limit 返回数量
+ * @param {array} excludeIds 排除的ID列表
+ */
+async function getHotNominations(limit = 10, excludeIds = []) {
+  try {
+    let query = {}
+    
+    // 如果有需要排除的ID
+    if (excludeIds && excludeIds.length > 0) {
+      query._id = _.nin(excludeIds)
+    }
+    
+    // 获取热门提名
+    const hotResult = await db.collection('entries')
+      .where(query)
+      .orderBy('votes', 'desc')
+      .limit(limit)
+      .get()
+    
+    return {
+      success: true,
+      data: hotResult.data,
+      type: 'trending'
+    }
+  } catch (err) {
+    console.error('获取热门提名失败:', err)
+    return {
+      success: false,
+      message: '获取热门提名失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 获取热门搜索关键词
+ * @param {number} limit 返回数量
+ */
+async function getPopularSearches(limit = 10) {
+  try {
+    const result = await db.collection('search_logs')
+      .aggregate()
+      .group({
+        _id: '$keyword',
+        count: $.sum(1)
+      })
+      .sort({
+        count: -1
+      })
+      .limit(limit)
+      .end()
+    
+    return {
+      success: true,
+      data: result.list.map(item => ({
+        keyword: item._id,
+        count: item.count
+      }))
+    }
+  } catch (err) {
+    console.error('获取热门搜索失败:', err)
+    return {
+      success: false,
+      message: '获取热门搜索失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 记录搜索日志
+ * @param {string} keyword 搜索关键词
+ */
+async function logSearch(keyword) {
+  try {
+    // 只记录有意义的关键词
+    if (keyword && keyword.trim().length > 1) {
+      await db.collection('search_logs').add({
+        data: {
+          keyword: keyword.trim().toLowerCase(), // 统一转小写便于统计
+          createTime: db.serverDate()
+        }
+      })
+    }
+  } catch (error) {
+    console.error('记录搜索日志失败:', error)
+    // 搜索日志记录失败不影响主流程
+  }
+} 
\ No newline at end of file
diff --git a/cloudfunctions/shareAnalytics/package.json b/cloudfunctions/shareAnalytics/package.json
index d7fd902..f7ca75a 100644
--- a/cloudfunctions/shareAnalytics/package.json
+++ b/cloudfunctions/shareAnalytics/package.json
@@ -1,14 +1,14 @@
-{
-  "name": "shareAnalytics",
-  "version": "1.0.0",
-  "description": "分享数据分析云函数",
-  "main": "index.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "",
-  "license": "ISC",
-  "dependencies": {
-    "wx-server-sdk": "~2.6.3"
-  }
+{
+  "name": "shareAnalytics",
+  "version": "1.0.0",
+  "description": "分享数据分析云函数",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "wx-server-sdk": "~2.6.3"
+  }
 } 
\ No newline at end of file
diff --git a/cloudfunctions/statistics/index.js b/cloudfunctions/statistics/index.js
index 210b8ea..7b8c765 100644
--- a/cloudfunctions/statistics/index.js
+++ b/cloudfunctions/statistics/index.js
@@ -1,354 +1,354 @@
-// 云函数入口文件
-const cloud = require('wx-server-sdk')
-
-cloud.init({
-  env: cloud.DYNAMIC_CURRENT_ENV
-})
-
-const db = cloud.database()
-const _ = db.command
-const $ = db.command.aggregate
-
-// 云函数入口函数
-exports.main = async (event, context) => {
-  const wxContext = cloud.getWXContext()
-  const { OPENID } = wxContext
-  const { action, timeRange } = event
-  
-  // 根据不同的操作执行不同的功能
-  switch (action) {
-    case 'getDashboardStats':
-      return await getDashboardStats()
-    case 'getRankingTrends':
-      return await getRankingTrends(timeRange)
-    case 'getUserStats':
-      return await getUserStats(OPENID, event.userId)
-    case 'getCategoryStats':
-      return await getCategoryStats()
-    default:
-      return {
-        success: false,
-        message: '未知操作类型'
-      }
-  }
-}
-
-/**
- * 获取首页仪表板统计数据
- */
-async function getDashboardStats() {
-  try {
-    // 获取各类统计数据
-    const [
-      nominationsCount,
-      totalUsers,
-      totalVotes,
-      todayVotes
-    ] = await Promise.all([
-      db.collection('entries').count(),
-      db.collection('users').count(),
-      getTotalVotes(),
-      getTodayVotes()
-    ])
-
-    // 计算增长率（与昨日相比）
-    const yesterdayVotes = await getYesterdayVotes()
-    const voteGrowthRate = yesterdayVotes > 0 ? (todayVotes.total / yesterdayVotes - 1) * 100 : 0
-
-    return {
-      success: true,
-      data: {
-        nominationsCount: nominationsCount.total,
-        totalUsers: totalUsers.total,
-        totalVotes: totalVotes,
-        todayVotes: todayVotes.total,
-        voteGrowthRate: parseFloat(voteGrowthRate.toFixed(2))
-      }
-    }
-  } catch (err) {
-    console.error('获取仪表板统计失败:', err)
-    return {
-      success: false,
-      message: '获取统计数据失败',
-      error: err.message
-    }
-  }
-}
-
-/**
- * 获取排名趋势数据
- * @param {string} timeRange 时间范围（week, month, all）
- */
-async function getRankingTrends(timeRange = 'week') {
-  try {
-    let dateFilter = {}
-    const now = new Date()
-    
-    // 根据时间范围设置过滤条件
-    if (timeRange === 'week') {
-      const weekAgo = new Date(now)
-      weekAgo.setDate(weekAgo.getDate() - 7)
-      dateFilter = _.gte(weekAgo)
-    } else if (timeRange === 'month') {
-      const monthAgo = new Date(now)
-      monthAgo.setMonth(monthAgo.getMonth() - 1)
-      dateFilter = _.gte(monthAgo)
-    }
-
-    // 获取排名前10的条目趋势
-    const topNominations = await db.collection('entries')
-      .orderBy('votes', 'desc')
-      .limit(10)
-      .get()
-
-    // 获取每个条目的投票历史
-    const trendsData = await Promise.all(
-      topNominations.data.map(async (nomination) => {
-        let query = db.collection('votes')
-          .where({
-            targetId: nomination._id
-          })
-        
-        // 添加时间过滤
-        if (Object.keys(dateFilter).length > 0) {
-          query = query.where({
-            createTime: dateFilter
-          })
-        }
-        
-        // 按日期分组统计
-        const votesAgg = await db.collection('votes')
-          .aggregate()
-          .match({
-            targetId: nomination._id,
-            ...(Object.keys(dateFilter).length > 0 ? { createTime: dateFilter } : {})
-          })
-          .group({
-            _id: {
-              year: $.dateToString({
-                date: '$createTime',
-                format: '%Y'
-              }),
-              month: $.dateToString({
-                date: '$createTime',
-                format: '%m'
-              }),
-              day: $.dateToString({
-                date: '$createTime',
-                format: '%d'
-              })
-            },
-            count: $.sum(1)
-          })
-          .sort({
-            '_id.year': 1,
-            '_id.month': 1,
-            '_id.day': 1
-          })
-          .end()
-
-        // 构造趋势数据
-        return {
-          id: nomination._id,
-          name: nomination.name,
-          currentVotes: nomination.votes,
-          trend: nomination.trend || 'stable',
-          dailyVotes: votesAgg.list.map(item => ({
-            date: `${item._id.year}-${item._id.month}-${item._id.day}`,
-            votes: item.count
-          }))
-        }
-      })
-    )
-
-    return {
-      success: true,
-      data: trendsData
-    }
-  } catch (err) {
-    console.error('获取排名趋势失败:', err)
-    return {
-      success: false,
-      message: '获取排名趋势失败',
-      error: err.message
-    }
-  }
-}
-
-/**
- * 获取用户统计数据
- * @param {string} openid 用户的openid
- * @param {string} userId 指定查询的用户ID (可选)
- */
-async function getUserStats(openid, userId) {
-  try {
-    // 获取用户信息
-    let userQuery = {}
-    if (userId) {
-      userQuery._id = userId
-    } else {
-      userQuery.openid = openid
-    }
-    
-    const userRes = await db.collection('users').where(userQuery).get()
-    
-    if (!userRes.data || userRes.data.length === 0) {
-      return {
-        success: false,
-        message: '用户不存在'
-      }
-    }
-    
-    const user = userRes.data[0]
-    
-    // 获取用户提名数量
-    const nominationsCount = await db.collection('entries')
-      .where({
-        createdBy: user._id
-      })
-      .count()
-    
-    // 获取用户投票数量
-    const votesCount = await db.collection('votes')
-      .where({
-        userId: user._id
-      })
-      .count()
-    
-    // 获取用户收到的投票数量（作为提名人）
-    const receivedVotesCount = await db.collection('votes')
-      .aggregate()
-      .lookup({
-        from: 'entries',
-        localField: 'targetId',
-        foreignField: '_id',
-        as: 'entry'
-      })
-      .match({
-        'entry.createdBy': user._id
-      })
-      .count('total')
-      .end()
-    
-    return {
-      success: true,
-      data: {
-        userId: user._id,
-        nominationsCount: nominationsCount.total,
-        votesCount: votesCount.total,
-        receivedVotesCount: receivedVotesCount.list.length > 0 ? receivedVotesCount.list[0].total : 0
-      }
-    }
-  } catch (err) {
-    console.error('获取用户统计失败:', err)
-    return {
-      success: false,
-      message: '获取用户统计失败',
-      error: err.message
-    }
-  }
-}
-
-/**
- * 获取分类统计数据
- */
-async function getCategoryStats() {
-  try {
-    // 按分类统计提名数量
-    const categoriesAgg = await db.collection('entries')
-      .aggregate()
-      .group({
-        _id: '$category',
-        count: $.sum(1),
-        totalVotes: $.sum('$votes')
-      })
-      .sort({
-        count: -1
-      })
-      .end()
-
-    // 处理没有分类的情况
-    const result = categoriesAgg.list.map(item => ({
-      category: item._id || '未分类',
-      count: item.count,
-      totalVotes: item.totalVotes,
-      averageVotes: parseFloat((item.totalVotes / item.count).toFixed(1))
-    }))
-
-    return {
-      success: true,
-      data: result
-    }
-  } catch (err) {
-    console.error('获取分类统计失败:', err)
-    return {
-      success: false,
-      message: '获取分类统计失败',
-      error: err.message
-    }
-  }
-}
-
-/**
- * 获取总投票数
- */
-async function getTotalVotes() {
-  try {
-    const result = await db.collection('entries')
-      .aggregate()
-      .group({
-        _id: null,
-        total: $.sum('$votes')
-      })
-      .end()
-    
-    return result.list.length > 0 ? result.list[0].total : 0
-  } catch (err) {
-    console.error('获取总投票数失败:', err)
-    return 0
-  }
-}
-
-/**
- * 获取今日投票数
- */
-async function getTodayVotes() {
-  try {
-    const today = new Date()
-    today.setHours(0, 0, 0, 0)
-    
-    return await db.collection('votes')
-      .where({
-        createTime: _.gte(today)
-      })
-      .count()
-  } catch (err) {
-    console.error('获取今日投票数失败:', err)
-    return { total: 0 }
-  }
-}
-
-/**
- * 获取昨日投票数
- */
-async function getYesterdayVotes() {
-  try {
-    const yesterday = new Date()
-    yesterday.setDate(yesterday.getDate() - 1)
-    yesterday.setHours(0, 0, 0, 0)
-    
-    const today = new Date()
-    today.setHours(0, 0, 0, 0)
-    
-    const result = await db.collection('votes')
-      .where({
-        createTime: _.gte(yesterday).and(_.lt(today))
-      })
-      .count()
-    
-    return result.total
-  } catch (err) {
-    console.error('获取昨日投票数失败:', err)
-    return 0
-  }
+// 云函数入口文件
+const cloud = require('wx-server-sdk')
+
+cloud.init({
+  env: cloud.DYNAMIC_CURRENT_ENV
+})
+
+const db = cloud.database()
+const _ = db.command
+const $ = db.command.aggregate
+
+// 云函数入口函数
+exports.main = async (event, context) => {
+  const wxContext = cloud.getWXContext()
+  const { OPENID } = wxContext
+  const { action, timeRange } = event
+  
+  // 根据不同的操作执行不同的功能
+  switch (action) {
+    case 'getDashboardStats':
+      return await getDashboardStats()
+    case 'getRankingTrends':
+      return await getRankingTrends(timeRange)
+    case 'getUserStats':
+      return await getUserStats(OPENID, event.userId)
+    case 'getCategoryStats':
+      return await getCategoryStats()
+    default:
+      return {
+        success: false,
+        message: '未知操作类型'
+      }
+  }
+}
+
+/**
+ * 获取首页仪表板统计数据
+ */
+async function getDashboardStats() {
+  try {
+    // 获取各类统计数据
+    const [
+      nominationsCount,
+      totalUsers,
+      totalVotes,
+      todayVotes
+    ] = await Promise.all([
+      db.collection('entries').count(),
+      db.collection('users').count(),
+      getTotalVotes(),
+      getTodayVotes()
+    ])
+
+    // 计算增长率（与昨日相比）
+    const yesterdayVotes = await getYesterdayVotes()
+    const voteGrowthRate = yesterdayVotes > 0 ? (todayVotes.total / yesterdayVotes - 1) * 100 : 0
+
+    return {
+      success: true,
+      data: {
+        nominationsCount: nominationsCount.total,
+        totalUsers: totalUsers.total,
+        totalVotes: totalVotes,
+        todayVotes: todayVotes.total,
+        voteGrowthRate: parseFloat(voteGrowthRate.toFixed(2))
+      }
+    }
+  } catch (err) {
+    console.error('获取仪表板统计失败:', err)
+    return {
+      success: false,
+      message: '获取统计数据失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 获取排名趋势数据
+ * @param {string} timeRange 时间范围（week, month, all）
+ */
+async function getRankingTrends(timeRange = 'week') {
+  try {
+    let dateFilter = {}
+    const now = new Date()
+    
+    // 根据时间范围设置过滤条件
+    if (timeRange === 'week') {
+      const weekAgo = new Date(now)
+      weekAgo.setDate(weekAgo.getDate() - 7)
+      dateFilter = _.gte(weekAgo)
+    } else if (timeRange === 'month') {
+      const monthAgo = new Date(now)
+      monthAgo.setMonth(monthAgo.getMonth() - 1)
+      dateFilter = _.gte(monthAgo)
+    }
+
+    // 获取排名前10的条目趋势
+    const topNominations = await db.collection('entries')
+      .orderBy('votes', 'desc')
+      .limit(10)
+      .get()
+
+    // 获取每个条目的投票历史
+    const trendsData = await Promise.all(
+      topNominations.data.map(async (nomination) => {
+        let query = db.collection('votes')
+          .where({
+            targetId: nomination._id
+          })
+        
+        // 添加时间过滤
+        if (Object.keys(dateFilter).length > 0) {
+          query = query.where({
+            createTime: dateFilter
+          })
+        }
+        
+        // 按日期分组统计
+        const votesAgg = await db.collection('votes')
+          .aggregate()
+          .match({
+            targetId: nomination._id,
+            ...(Object.keys(dateFilter).length > 0 ? { createTime: dateFilter } : {})
+          })
+          .group({
+            _id: {
+              year: $.dateToString({
+                date: '$createTime',
+                format: '%Y'
+              }),
+              month: $.dateToString({
+                date: '$createTime',
+                format: '%m'
+              }),
+              day: $.dateToString({
+                date: '$createTime',
+                format: '%d'
+              })
+            },
+            count: $.sum(1)
+          })
+          .sort({
+            '_id.year': 1,
+            '_id.month': 1,
+            '_id.day': 1
+          })
+          .end()
+
+        // 构造趋势数据
+        return {
+          id: nomination._id,
+          name: nomination.name,
+          currentVotes: nomination.votes,
+          trend: nomination.trend || 'stable',
+          dailyVotes: votesAgg.list.map(item => ({
+            date: `${item._id.year}-${item._id.month}-${item._id.day}`,
+            votes: item.count
+          }))
+        }
+      })
+    )
+
+    return {
+      success: true,
+      data: trendsData
+    }
+  } catch (err) {
+    console.error('获取排名趋势失败:', err)
+    return {
+      success: false,
+      message: '获取排名趋势失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 获取用户统计数据
+ * @param {string} openid 用户的openid
+ * @param {string} userId 指定查询的用户ID (可选)
+ */
+async function getUserStats(openid, userId) {
+  try {
+    // 获取用户信息
+    let userQuery = {}
+    if (userId) {
+      userQuery._id = userId
+    } else {
+      userQuery.openid = openid
+    }
+    
+    const userRes = await db.collection('users').where(userQuery).get()
+    
+    if (!userRes.data || userRes.data.length === 0) {
+      return {
+        success: false,
+        message: '用户不存在'
+      }
+    }
+    
+    const user = userRes.data[0]
+    
+    // 获取用户提名数量
+    const nominationsCount = await db.collection('entries')
+      .where({
+        createdBy: user._id
+      })
+      .count()
+    
+    // 获取用户投票数量
+    const votesCount = await db.collection('votes')
+      .where({
+        userId: user._id
+      })
+      .count()
+    
+    // 获取用户收到的投票数量（作为提名人）
+    const receivedVotesCount = await db.collection('votes')
+      .aggregate()
+      .lookup({
+        from: 'entries',
+        localField: 'targetId',
+        foreignField: '_id',
+        as: 'entry'
+      })
+      .match({
+        'entry.createdBy': user._id
+      })
+      .count('total')
+      .end()
+    
+    return {
+      success: true,
+      data: {
+        userId: user._id,
+        nominationsCount: nominationsCount.total,
+        votesCount: votesCount.total,
+        receivedVotesCount: receivedVotesCount.list.length > 0 ? receivedVotesCount.list[0].total : 0
+      }
+    }
+  } catch (err) {
+    console.error('获取用户统计失败:', err)
+    return {
+      success: false,
+      message: '获取用户统计失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 获取分类统计数据
+ */
+async function getCategoryStats() {
+  try {
+    // 按分类统计提名数量
+    const categoriesAgg = await db.collection('entries')
+      .aggregate()
+      .group({
+        _id: '$category',
+        count: $.sum(1),
+        totalVotes: $.sum('$votes')
+      })
+      .sort({
+        count: -1
+      })
+      .end()
+
+    // 处理没有分类的情况
+    const result = categoriesAgg.list.map(item => ({
+      category: item._id || '未分类',
+      count: item.count,
+      totalVotes: item.totalVotes,
+      averageVotes: parseFloat((item.totalVotes / item.count).toFixed(1))
+    }))
+
+    return {
+      success: true,
+      data: result
+    }
+  } catch (err) {
+    console.error('获取分类统计失败:', err)
+    return {
+      success: false,
+      message: '获取分类统计失败',
+      error: err.message
+    }
+  }
+}
+
+/**
+ * 获取总投票数
+ */
+async function getTotalVotes() {
+  try {
+    const result = await db.collection('entries')
+      .aggregate()
+      .group({
+        _id: null,
+        total: $.sum('$votes')
+      })
+      .end()
+    
+    return result.list.length > 0 ? result.list[0].total : 0
+  } catch (err) {
+    console.error('获取总投票数失败:', err)
+    return 0
+  }
+}
+
+/**
+ * 获取今日投票数
+ */
+async function getTodayVotes() {
+  try {
+    const today = new Date()
+    today.setHours(0, 0, 0, 0)
+    
+    return await db.collection('votes')
+      .where({
+        createTime: _.gte(today)
+      })
+      .count()
+  } catch (err) {
+    console.error('获取今日投票数失败:', err)
+    return { total: 0 }
+  }
+}
+
+/**
+ * 获取昨日投票数
+ */
+async function getYesterdayVotes() {
+  try {
+    const yesterday = new Date()
+    yesterday.setDate(yesterday.getDate() - 1)
+    yesterday.setHours(0, 0, 0, 0)
+    
+    const today = new Date()
+    today.setHours(0, 0, 0, 0)
+    
+    const result = await db.collection('votes')
+      .where({
+        createTime: _.gte(yesterday).and(_.lt(today))
+      })
+      .count()
+    
+    return result.total
+  } catch (err) {
+    console.error('获取昨日投票数失败:', err)
+    return 0
+  }
 } 
\ No newline at end of file
diff --git a/cloudfunctions/statistics/package.json b/cloudfunctions/statistics/package.json
index 3be3944..e514342 100644
--- a/cloudfunctions/statistics/package.json
+++ b/cloudfunctions/statistics/package.json
@@ -1,14 +1,14 @@
-{
-  "name": "statistics",
-  "version": "1.0.0",
-  "description": "统计数据分析云函数",
-  "main": "index.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "author": "",
-  "license": "ISC",
-  "dependencies": {
-    "wx-server-sdk": "~2.6.3"
-  }
+{
+  "name": "statistics",
+  "version": "1.0.0",
+  "description": "统计数据分析云函数",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1"
+  },
+  "author": "",
+  "license": "ISC",
+  "dependencies": {
+    "wx-server-sdk": "~2.6.3"
+  }
 } 
\ No newline at end of file
diff --git a/code-review-report.md b/code-review-report.md
index 80309d2..1c52366 100644
--- a/code-review-report.md
+++ b/code-review-report.md
@@ -1,355 +1,355 @@
-# 微信小程序代码审查报告
-
-## 问题总览表
-
-| 问题标题 | 严重级别 | 所在文件 | 大致行号 | 类型 |
-|---------|---------|---------|---------|-----|
-| 页面未在 app.json 注册 | 高 | app.json | 2-12 | Blocker |
-| 组件未在页面 JSON 中注册 | 高 | pages/index/index.json | - | Blocker |
-| 路径错误引用 | 高 | pages/index/index.wxml | 333-337 | Blocker |
-| 不安全的云开发环境 ID 硬编码 | 中 | app.js | 97 | Bug |
-| 测试代码和注释残留 | 中 | utils/cloudUtils.js | 192-222 | Bug |
-| 未授权检查缺失 | 中 | pages/index/index.js | 248-259 | Bug |
-| 云函数登录逻辑不一致 | 中 | cloudfunctions/userManage/index.js | 32-85 | Bug |
-| 资源路径错误 | 中 | pages/index/index.js | 333 | Bug |
-| 查询限制过小 | 低 | app.js | 167 | Perf |
-| 重复数据获取 | 低 | pages/index/index.js | 43-56 | Perf |
-| 频繁 setData 调用 | 低 | components/auth-dialog/auth-dialog.js | 33-45 | Perf |
-| 大对象一次性 setData | 低 | pages/index/index.js | 124-129 | Perf |
-| 图片未使用懒加载 | 低 | 多处 | - | Perf |
-
-## 详细问题分析
-
-### Blockers（致命问题）
-
-#### 1. 页面未在 app.json 注册
-
-**所在文件**: app.json (行 2-12)  
-**问题描述**: 项目中存在多个页面目录（如 `pages/search`、`pages/report-deed`、`pages/deeds-wall`）但未在 app.json 的 pages 数组中注册。未注册的页面无法在小程序中访问。
-
-**根因分析**: 可能是开发过程中创建了新页面但忘记在 app.json 中注册，或者这些页面暂时未投入使用。在 project.config.json 中 `pages/search` 被明确标记为忽略，但代码仍保留在项目中。
-
-**修复方案**: 
-```json
-// app.json
-{
-  "pages": [
-    "pages/index/index",
-    "pages/detail/detail",
-    "pages/create/create",
-    "pages/add/add",
-    "pages/about/about",
-    "pages/orders/orders",
-    "pages/my-nominations/my-nominations",
-    "pages/my-votes/my-votes",
-    "pages/sound-settings/sound-settings",
-    "pages/search/search",
-    "pages/report-deed/report-deed",
-    "pages/deeds-wall/deeds-wall"
-  ],
-  ...
-}
-```
-
-**影响范围**: 这些页面当前无法通过小程序导航访问，可能导致功能不完整或特定路径跳转失败。
-
-#### 2. 组件未在页面 JSON 中注册
-
-**所在文件**: pages/index/index.json  
-**问题描述**: index.wxml 中使用了 `<user-center-drawer>` 组件，但该组件未在对应的 index.json 中通过 usingComponents 注册。
-
-**根因分析**: 组件在全局 app.json 中只注册了 auth-dialog 组件，但其他自定义组件未注册。微信小程序规定，使用自定义组件必须先在 JSON 文件的 usingComponents 字段中注册。
-
-**修复方案**:
-```json
-// pages/index/index.json
-{
-  "usingComponents": {
-    "user-center-drawer": "/components/user-center-drawer/user-center-drawer"
-  }
-}
-```
-
-**影响范围**: 未注册的组件将导致页面渲染失败或白屏。这是一个严重的阻塞性问题。
-
-#### 3. 路径错误引用
-
-**所在文件**: pages/index/index.wxml (行 333-337)  
-**问题描述**: 使用了图片路径 `/public/placeholder.jpg`，但在项目结构中可能不正确，可能导致图片无法加载。
-
-**根因分析**: 微信小程序的路径规则要求以 `/` 开头的为绝对路径（从项目根目录算起），但项目中的静态资源可能位于 `/images/` 或其他目录。
-
-**修复方案**: 检查图片实际位置并修正路径，例如：
-```javascript
-// 修正为
-const imageUrl = '/images/placeholder.jpg'; 
-// 或
-const imageUrl = '../images/placeholder.jpg';
-```
-
-**影响范围**: 分享功能中的默认图片无法显示，可能影响分享的视觉效果和用户体验。
-
-### Bugs（逻辑错误）
-
-#### 4. 不安全的云开发环境 ID 硬编码
-
-**所在文件**: app.js (行 97)  
-**问题描述**: 云开发环境 ID 直接硬编码在源码中：`env: 'cloud1-2g2sby6z920b76cb'`。
-
-**根因分析**: 开发时直接将环境 ID 写入代码，没有使用配置文件或环境变量进行管理。这不仅不安全，也不便于环境切换（如开发环境、测试环境、生产环境）。
-
-**修复方案**: 创建配置文件管理环境相关参数：
-```javascript
-// config.js
-module.exports = {
-  envId: 'cloud1-2g2sby6z920b76cb'
-}
-
-// app.js 中引用
-const config = require('./config.js');
-wx.cloud.init({
-  traceUser: true,
-  env: config.envId
-})
-```
-
-**影响范围**: 当需要切换云环境时，需要手动修改多个文件中的硬编码值，增加出错风险和维护成本。
-
-#### 5. 测试代码和注释残留
-
-**所在文件**: utils/cloudUtils.js (行 192-222)  
-**问题描述**: 代码中包含明显的调试代码和关于 monkey patch 的注释，这些不应该出现在生产代码中。
-
-**根因分析**: 开发过程中的临时解决方案未被清理，保留了测试和调试代码。
-
-**修复方案**: 清理测试代码，使用更简洁和标准的实现：
-```javascript
-const getSystemInfo = () => {
-  try {
-    // 优先使用新API
-    if (typeof wx.getSystemSetting === 'function') {
-      const systemSetting = wx.getSystemSetting();
-      const deviceInfo = wx.getDeviceInfo();
-      const windowInfo = wx.getWindowInfo();
-      const appBaseInfo = wx.getAppBaseInfo();
-      
-      return { ...systemSetting, ...deviceInfo, ...windowInfo, ...appBaseInfo };
-    } else {
-      // 兼容旧版本
-      return wx.getSystemInfoSync();
-    }
-  } catch (error) {
-    console.error('获取系统信息出错:', error);
-    return {};
-  }
-};
-```
-
-**影响范围**: 可能导致潜在的代码执行问题，特别是在某些特定条件下，测试代码可能被意外触发。
-
-#### 6. 未授权检查缺失
-
-**所在文件**: pages/index/index.js (行 248-259)  
-**问题描述**: 用户中心弹窗逻辑中，`authDialog.showDialog()` 处理流程不完整，如果授权失败后用户再次点击，会再次触发相同流程。
-
-**根因分析**: 未妥善处理授权失败后的状态记录和后续行为控制。
-
-**修复方案**:
-```javascript
-this.authDialog.showDialog({
-  success: (userInfo) => {
-    console.log('授权登录成功:', userInfo);
-    this.setData({ userInfo: userInfo });
-    wx.setStorageSync('authFailed', false); // 记录成功状态
-    openDrawerAction();
-  },
-  fail: (err) => {
-    console.error('授权登录失败:', err);
-    wx.setStorageSync('authFailed', true); // 记录失败状态
-    wx.showToast({
-      title: '需要授权才能继续',
-      icon: 'none'
-    });
-  }
-});
-```
-
-**影响范围**: 用户拒绝授权后体验不佳，可能导致重复显示授权弹窗，影响用户体验。
-
-#### 7. 云函数登录逻辑不一致
-
-**所在文件**: cloudfunctions/userManage/index.js (行 32-85)  
-**问题描述**: 云函数返回的数据结构在成功时为 `{success: true, data: finalUserInfo, message: '登录成功'}`，但在 app.js 中接收时使用了 `res.result.user`。
-
-**根因分析**: 云函数和客户端的数据契约不一致，可能是由于历史代码修改导致的不匹配。
-
-**修复方案**:
-```javascript
-// 修改云函数返回结构
-return {
-  success: true,
-  user: finalUserInfo, // 改为 user 字段以匹配客户端
-  message: '登录成功'
-};
-
-// 或者修改客户端使用方式
-if (loginResult.result && loginResult.result.success) {
-  wx.setStorageSync('userInfo', loginResult.result.data); // 使用 data 而非 user
-  app.globalData.userInfo = loginResult.result.data;
-  // ...
-}
-```
-
-**影响范围**: 登录功能可能失败，用户信息无法正确存储和显示。
-
-#### 8. 资源路径错误
-
-**所在文件**: pages/index/index.js (行 333)  
-**问题描述**: 分享功能中使用了可能不存在的图片路径 `/public/placeholder.jpg`。
-
-**根因分析**: 代码中使用了相对路径引用静态资源，但路径可能有误或资源不存在。
-
-**修复方案**: 验证资源路径并修正：
-```javascript
-// 检查项目中是否有此图片，如果没有，使用其他存在的图片
-const imageUrl = '/images/share-cover.jpg'; // 修正为实际存在的图片路径
-```
-
-**影响范围**: 分享功能的缩略图无法显示，降低分享吸引力。
-
-### Performance/Smells（性能问题）
-
-#### 9. 查询限制过小
-
-**所在文件**: app.js (行 167)  
-**问题描述**: `db.collection('entries').limit(20)` 限制了排行榜数据的最大返回数量，但实际上可能需要更多数据来满足业务需求。
-
-**根因分析**: 查询限制设置可能未充分考虑实际数据量和业务需求，微信小程序云数据库单次查询上限为 100 条。
-
-**修复方案**: 根据实际需求调整查询限制，如果需要更多数据，可以使用分页查询：
-```javascript
-// 如果确实需要更多数据
-db.collection('entries')
-  .orderBy('votes', 'desc')
-  .limit(50) // 适当增加限制
-  .get()
-```
-
-**影响范围**: 可能导致部分排行数据无法显示，特别是在数据量增长后。
-
-#### 10. 重复数据获取
-
-**所在文件**: pages/index/index.js (行 43-56)  
-**问题描述**: 在 `loadData` 函数中，当 `rankings` 为空时会调用 `refreshData`，而 `refreshData` 函数又会重新获取数据，造成重复请求。
-
-**根因分析**: 数据加载逻辑设计不当，缺乏有效的缓存策略和判断机制。
-
-**修复方案**: 简化数据加载逻辑：
-```javascript
-loadData() {
-  // 检查是否有缓存数据
-  const app = getApp();
-  const rankings = app.globalData.rankings || [];
-  
-  // 如果没有数据，则刷新
-  if (!rankings || rankings.length === 0) {
-    this.refreshData();
-    return;
-  }
-  
-  // 有缓存数据，直接使用
-  this.setData({
-    rankings,
-    totalVotes: this.calculateTotalVotes(rankings),
-    totalUsers: this.calculatePopularUsers(rankings),
-    isLoading: false
-  });
-}
-```
-
-**影响范围**: 可能导致不必要的网络请求，增加用户等待时间和服务器负载。
-
-#### 11. 频繁 setData 调用
-
-**所在文件**: components/auth-dialog/auth-dialog.js (行 33-45)  
-**问题描述**: `onChooseAvatar` 和 `onNicknameInput` 函数中分别调用 setData，可能导致频繁的视图更新。
-
-**根因分析**: 未合并 setData 调用，每次用户输入或选择都会触发一次视图更新。
-
-**修复方案**: 对于频繁变化的数据，可以使用节流或防抖技术：
-```javascript
-onNicknameInput(e) {
-  // 使用防抖或直接赋值，避免频繁 setData
-  this.nickname = e.detail.value;
-  
-  // 使用计时器延迟更新，减少 setData 频率
-  if (this.nicknameTimer) clearTimeout(this.nicknameTimer);
-  this.nicknameTimer = setTimeout(() => {
-    this.setData({
-      nickname: this.nickname
-    });
-  }, 300);
-}
-```
-
-**影响范围**: 在输入昵称时可能导致性能下降，特别是在低端设备上。
-
-#### 12. 大对象一次性 setData
-
-**所在文件**: pages/index/index.js (行 124-129)  
-**问题描述**: 在 `refreshData` 中一次性更新了包含可能较大的 rankings 数组的数据，可能导致性能问题。
-
-**根因分析**: 未考虑数据量增长对性能的影响，将大型数据结构一次性传递给 setData。
-
-**修复方案**: 分拆大对象更新或使用分页渲染：
-```javascript
-// 先更新关键数据
-this.setData({
-  totalVotes: totalVotes,
-  totalUsers: totalPopular,
-  isLoading: false
-});
-
-// 再更新大数组
-this.setData({
-  rankings: validRankings
-});
-
-// 或考虑分页显示
-this.setData({
-  visibleRankings: validRankings.slice(0, 10), // 先显示前10条
-  rankings: validRankings,
-  hasMoreData: validRankings.length > 10
-});
-```
-
-**影响范围**: 随着排行榜数据增长，页面渲染性能可能下降，特别是在低端设备上。
-
-#### 13. 图片未使用懒加载
-
-**所在文件**: 多处  
-**问题描述**: 在 pages/index/index.wxml 中的排行榜图片使用了 lazy-load，但其他页面中的图片可能没有使用此属性。
-
-**根因分析**: 未统一使用图片懒加载策略，可能导致页面初始加载性能下降。
-
-**修复方案**: 为所有列表中的图片添加懒加载属性：
-```html
-<image lazy-load="true" src="{{item.avatar}}" mode="aspectFill"></image>
-```
-
-**影响范围**: 可能导致页面初始加载时间延长，尤其是在有大量图片的页面。
-
-## Top 10 修复优先队列
-
-1. **页面未在 app.json 注册** - 高优先级，阻塞功能访问，修复简单收益大
-2. **组件未在页面 JSON 中注册** - 高优先级，可能导致页面无法渲染
-3. **路径错误引用** - 高优先级，影响功能可用性
-4. **云函数登录逻辑不一致** - 中优先级，影响核心登录流程
-5. **未授权检查缺失** - 中优先级，影响用户体验
-6. **资源路径错误** - 中优先级，影响分享功能
-7. **不安全的云开发环境 ID 硬编码** - 中优先级，安全和可维护性问题
-8. **测试代码和注释残留** - 中优先级，代码质量问题
-9. **重复数据获取** - 低优先级，性能优化
-10. **大对象一次性 setData** - 低优先级，性能优化
-
+# 微信小程序代码审查报告
+
+## 问题总览表
+
+| 问题标题 | 严重级别 | 所在文件 | 大致行号 | 类型 |
+|---------|---------|---------|---------|-----|
+| 页面未在 app.json 注册 | 高 | app.json | 2-12 | Blocker |
+| 组件未在页面 JSON 中注册 | 高 | pages/index/index.json | - | Blocker |
+| 路径错误引用 | 高 | pages/index/index.wxml | 333-337 | Blocker |
+| 不安全的云开发环境 ID 硬编码 | 中 | app.js | 97 | Bug |
+| 测试代码和注释残留 | 中 | utils/cloudUtils.js | 192-222 | Bug |
+| 未授权检查缺失 | 中 | pages/index/index.js | 248-259 | Bug |
+| 云函数登录逻辑不一致 | 中 | cloudfunctions/userManage/index.js | 32-85 | Bug |
+| 资源路径错误 | 中 | pages/index/index.js | 333 | Bug |
+| 查询限制过小 | 低 | app.js | 167 | Perf |
+| 重复数据获取 | 低 | pages/index/index.js | 43-56 | Perf |
+| 频繁 setData 调用 | 低 | components/auth-dialog/auth-dialog.js | 33-45 | Perf |
+| 大对象一次性 setData | 低 | pages/index/index.js | 124-129 | Perf |
+| 图片未使用懒加载 | 低 | 多处 | - | Perf |
+
+## 详细问题分析
+
+### Blockers（致命问题）
+
+#### 1. 页面未在 app.json 注册
+
+**所在文件**: app.json (行 2-12)  
+**问题描述**: 项目中存在多个页面目录（如 `pages/search`、`pages/report-deed`、`pages/deeds-wall`）但未在 app.json 的 pages 数组中注册。未注册的页面无法在小程序中访问。
+
+**根因分析**: 可能是开发过程中创建了新页面但忘记在 app.json 中注册，或者这些页面暂时未投入使用。在 project.config.json 中 `pages/search` 被明确标记为忽略，但代码仍保留在项目中。
+
+**修复方案**: 
+```json
+// app.json
+{
+  "pages": [
+    "pages/index/index",
+    "pages/detail/detail",
+    "pages/create/create",
+    "pages/add/add",
+    "pages/about/about",
+    "pages/orders/orders",
+    "pages/my-nominations/my-nominations",
+    "pages/my-votes/my-votes",
+    "pages/sound-settings/sound-settings",
+    "pages/search/search",
+    "pages/report-deed/report-deed",
+    "pages/deeds-wall/deeds-wall"
+  ],
+  ...
+}
+```
+
+**影响范围**: 这些页面当前无法通过小程序导航访问，可能导致功能不完整或特定路径跳转失败。
+
+#### 2. 组件未在页面 JSON 中注册
+
+**所在文件**: pages/index/index.json  
+**问题描述**: index.wxml 中使用了 `<user-center-drawer>` 组件，但该组件未在对应的 index.json 中通过 usingComponents 注册。
+
+**根因分析**: 组件在全局 app.json 中只注册了 auth-dialog 组件，但其他自定义组件未注册。微信小程序规定，使用自定义组件必须先在 JSON 文件的 usingComponents 字段中注册。
+
+**修复方案**:
+```json
+// pages/index/index.json
+{
+  "usingComponents": {
+    "user-center-drawer": "/components/user-center-drawer/user-center-drawer"
+  }
+}
+```
+
+**影响范围**: 未注册的组件将导致页面渲染失败或白屏。这是一个严重的阻塞性问题。
+
+#### 3. 路径错误引用
+
+**所在文件**: pages/index/index.wxml (行 333-337)  
+**问题描述**: 使用了图片路径 `/public/placeholder.jpg`，但在项目结构中可能不正确，可能导致图片无法加载。
+
+**根因分析**: 微信小程序的路径规则要求以 `/` 开头的为绝对路径（从项目根目录算起），但项目中的静态资源可能位于 `/images/` 或其他目录。
+
+**修复方案**: 检查图片实际位置并修正路径，例如：
+```javascript
+// 修正为
+const imageUrl = '/images/placeholder.jpg'; 
+// 或
+const imageUrl = '../images/placeholder.jpg';
+```
+
+**影响范围**: 分享功能中的默认图片无法显示，可能影响分享的视觉效果和用户体验。
+
+### Bugs（逻辑错误）
+
+#### 4. 不安全的云开发环境 ID 硬编码
+
+**所在文件**: app.js (行 97)  
+**问题描述**: 云开发环境 ID 直接硬编码在源码中：`env: 'cloud1-2g2sby6z920b76cb'`。
+
+**根因分析**: 开发时直接将环境 ID 写入代码，没有使用配置文件或环境变量进行管理。这不仅不安全，也不便于环境切换（如开发环境、测试环境、生产环境）。
+
+**修复方案**: 创建配置文件管理环境相关参数：
+```javascript
+// config.js
+module.exports = {
+  envId: 'cloud1-2g2sby6z920b76cb'
+}
+
+// app.js 中引用
+const config = require('./config.js');
+wx.cloud.init({
+  traceUser: true,
+  env: config.envId
+})
+```
+
+**影响范围**: 当需要切换云环境时，需要手动修改多个文件中的硬编码值，增加出错风险和维护成本。
+
+#### 5. 测试代码和注释残留
+
+**所在文件**: utils/cloudUtils.js (行 192-222)  
+**问题描述**: 代码中包含明显的调试代码和关于 monkey patch 的注释，这些不应该出现在生产代码中。
+
+**根因分析**: 开发过程中的临时解决方案未被清理，保留了测试和调试代码。
+
+**修复方案**: 清理测试代码，使用更简洁和标准的实现：
+```javascript
+const getSystemInfo = () => {
+  try {
+    // 优先使用新API
+    if (typeof wx.getSystemSetting === 'function') {
+      const systemSetting = wx.getSystemSetting();
+      const deviceInfo = wx.getDeviceInfo();
+      const windowInfo = wx.getWindowInfo();
+      const appBaseInfo = wx.getAppBaseInfo();
+      
+      return { ...systemSetting, ...deviceInfo, ...windowInfo, ...appBaseInfo };
+    } else {
+      // 兼容旧版本
+      return wx.getSystemInfoSync();
+    }
+  } catch (error) {
+    console.error('获取系统信息出错:', error);
+    return {};
+  }
+};
+```
+
+**影响范围**: 可能导致潜在的代码执行问题，特别是在某些特定条件下，测试代码可能被意外触发。
+
+#### 6. 未授权检查缺失
+
+**所在文件**: pages/index/index.js (行 248-259)  
+**问题描述**: 用户中心弹窗逻辑中，`authDialog.showDialog()` 处理流程不完整，如果授权失败后用户再次点击，会再次触发相同流程。
+
+**根因分析**: 未妥善处理授权失败后的状态记录和后续行为控制。
+
+**修复方案**:
+```javascript
+this.authDialog.showDialog({
+  success: (userInfo) => {
+    console.log('授权登录成功:', userInfo);
+    this.setData({ userInfo: userInfo });
+    wx.setStorageSync('authFailed', false); // 记录成功状态
+    openDrawerAction();
+  },
+  fail: (err) => {
+    console.error('授权登录失败:', err);
+    wx.setStorageSync('authFailed', true); // 记录失败状态
+    wx.showToast({
+      title: '需要授权才能继续',
+      icon: 'none'
+    });
+  }
+});
+```
+
+**影响范围**: 用户拒绝授权后体验不佳，可能导致重复显示授权弹窗，影响用户体验。
+
+#### 7. 云函数登录逻辑不一致
+
+**所在文件**: cloudfunctions/userManage/index.js (行 32-85)  
+**问题描述**: 云函数返回的数据结构在成功时为 `{success: true, data: finalUserInfo, message: '登录成功'}`，但在 app.js 中接收时使用了 `res.result.user`。
+
+**根因分析**: 云函数和客户端的数据契约不一致，可能是由于历史代码修改导致的不匹配。
+
+**修复方案**:
+```javascript
+// 修改云函数返回结构
+return {
+  success: true,
+  user: finalUserInfo, // 改为 user 字段以匹配客户端
+  message: '登录成功'
+};
+
+// 或者修改客户端使用方式
+if (loginResult.result && loginResult.result.success) {
+  wx.setStorageSync('userInfo', loginResult.result.data); // 使用 data 而非 user
+  app.globalData.userInfo = loginResult.result.data;
+  // ...
+}
+```
+
+**影响范围**: 登录功能可能失败，用户信息无法正确存储和显示。
+
+#### 8. 资源路径错误
+
+**所在文件**: pages/index/index.js (行 333)  
+**问题描述**: 分享功能中使用了可能不存在的图片路径 `/public/placeholder.jpg`。
+
+**根因分析**: 代码中使用了相对路径引用静态资源，但路径可能有误或资源不存在。
+
+**修复方案**: 验证资源路径并修正：
+```javascript
+// 检查项目中是否有此图片，如果没有，使用其他存在的图片
+const imageUrl = '/images/share-cover.jpg'; // 修正为实际存在的图片路径
+```
+
+**影响范围**: 分享功能的缩略图无法显示，降低分享吸引力。
+
+### Performance/Smells（性能问题）
+
+#### 9. 查询限制过小
+
+**所在文件**: app.js (行 167)  
+**问题描述**: `db.collection('entries').limit(20)` 限制了排行榜数据的最大返回数量，但实际上可能需要更多数据来满足业务需求。
+
+**根因分析**: 查询限制设置可能未充分考虑实际数据量和业务需求，微信小程序云数据库单次查询上限为 100 条。
+
+**修复方案**: 根据实际需求调整查询限制，如果需要更多数据，可以使用分页查询：
+```javascript
+// 如果确实需要更多数据
+db.collection('entries')
+  .orderBy('votes', 'desc')
+  .limit(50) // 适当增加限制
+  .get()
+```
+
+**影响范围**: 可能导致部分排行数据无法显示，特别是在数据量增长后。
+
+#### 10. 重复数据获取
+
+**所在文件**: pages/index/index.js (行 43-56)  
+**问题描述**: 在 `loadData` 函数中，当 `rankings` 为空时会调用 `refreshData`，而 `refreshData` 函数又会重新获取数据，造成重复请求。
+
+**根因分析**: 数据加载逻辑设计不当，缺乏有效的缓存策略和判断机制。
+
+**修复方案**: 简化数据加载逻辑：
+```javascript
+loadData() {
+  // 检查是否有缓存数据
+  const app = getApp();
+  const rankings = app.globalData.rankings || [];
+  
+  // 如果没有数据，则刷新
+  if (!rankings || rankings.length === 0) {
+    this.refreshData();
+    return;
+  }
+  
+  // 有缓存数据，直接使用
+  this.setData({
+    rankings,
+    totalVotes: this.calculateTotalVotes(rankings),
+    totalUsers: this.calculatePopularUsers(rankings),
+    isLoading: false
+  });
+}
+```
+
+**影响范围**: 可能导致不必要的网络请求，增加用户等待时间和服务器负载。
+
+#### 11. 频繁 setData 调用
+
+**所在文件**: components/auth-dialog/auth-dialog.js (行 33-45)  
+**问题描述**: `onChooseAvatar` 和 `onNicknameInput` 函数中分别调用 setData，可能导致频繁的视图更新。
+
+**根因分析**: 未合并 setData 调用，每次用户输入或选择都会触发一次视图更新。
+
+**修复方案**: 对于频繁变化的数据，可以使用节流或防抖技术：
+```javascript
+onNicknameInput(e) {
+  // 使用防抖或直接赋值，避免频繁 setData
+  this.nickname = e.detail.value;
+  
+  // 使用计时器延迟更新，减少 setData 频率
+  if (this.nicknameTimer) clearTimeout(this.nicknameTimer);
+  this.nicknameTimer = setTimeout(() => {
+    this.setData({
+      nickname: this.nickname
+    });
+  }, 300);
+}
+```
+
+**影响范围**: 在输入昵称时可能导致性能下降，特别是在低端设备上。
+
+#### 12. 大对象一次性 setData
+
+**所在文件**: pages/index/index.js (行 124-129)  
+**问题描述**: 在 `refreshData` 中一次性更新了包含可能较大的 rankings 数组的数据，可能导致性能问题。
+
+**根因分析**: 未考虑数据量增长对性能的影响，将大型数据结构一次性传递给 setData。
+
+**修复方案**: 分拆大对象更新或使用分页渲染：
+```javascript
+// 先更新关键数据
+this.setData({
+  totalVotes: totalVotes,
+  totalUsers: totalPopular,
+  isLoading: false
+});
+
+// 再更新大数组
+this.setData({
+  rankings: validRankings
+});
+
+// 或考虑分页显示
+this.setData({
+  visibleRankings: validRankings.slice(0, 10), // 先显示前10条
+  rankings: validRankings,
+  hasMoreData: validRankings.length > 10
+});
+```
+
+**影响范围**: 随着排行榜数据增长，页面渲染性能可能下降，特别是在低端设备上。
+
+#### 13. 图片未使用懒加载
+
+**所在文件**: 多处  
+**问题描述**: 在 pages/index/index.wxml 中的排行榜图片使用了 lazy-load，但其他页面中的图片可能没有使用此属性。
+
+**根因分析**: 未统一使用图片懒加载策略，可能导致页面初始加载性能下降。
+
+**修复方案**: 为所有列表中的图片添加懒加载属性：
+```html
+<image lazy-load="true" src="{{item.avatar}}" mode="aspectFill"></image>
+```
+
+**影响范围**: 可能导致页面初始加载时间延长，尤其是在有大量图片的页面。
+
+## Top 10 修复优先队列
+
+1. **页面未在 app.json 注册** - 高优先级，阻塞功能访问，修复简单收益大
+2. **组件未在页面 JSON 中注册** - 高优先级，可能导致页面无法渲染
+3. **路径错误引用** - 高优先级，影响功能可用性
+4. **云函数登录逻辑不一致** - 中优先级，影响核心登录流程
+5. **未授权检查缺失** - 中优先级，影响用户体验
+6. **资源路径错误** - 中优先级，影响分享功能
+7. **不安全的云开发环境 ID 硬编码** - 中优先级，安全和可维护性问题
+8. **测试代码和注释残留** - 中优先级，代码质量问题
+9. **重复数据获取** - 低优先级，性能优化
+10. **大对象一次性 setData** - 低优先级，性能优化
+
 以上问题修复后，建议进行全面测试，特别是页面跳转、组件渲染、和用户认证流程，确保应用正常运行。 
\ No newline at end of file
diff --git a/components/.DS_Store b/components/.DS_Store
new file mode 100644
index 0000000000000000000000000000000000000000..4310ff92c8718998fdd9c3f411b9bd8d673c4643
GIT binary patch
literal 6148
zcmeHKyGjH>5Ukb<4lcRSaDKqRKNybl3;Y2e3o0yZpqFptcll{nKM<BZ6Tw8Pp}S^!
zyLOlgwzmP;;WXR;djMOyBR)K=&7Zrk?4mM8r1Kru81RY*jF?u{=M&D|k#WL1UKaf4
z;q7UBoTl+SQCTS<1*Cu!kOETRR|<IVrEPbKic&xdNP%w!{QJ=8j=gYBj86wci~z(9
z(_vi4EJ19ZAojvJkr|pLm6%kk5yO(se5<-%I433@R>OzY$yO7J#p!&1i*i^`RFncz
zV5z`mZuj2*Z|OhG|4Wi~Qa}p)D+O$GygMFvrRuG#%XzPD^n1G3eA3;x4hloGV`8*p
hZoC~|MN!r@U-Nk{oD+l2e9(#d8E{=>QsA!@_yVi&6>tCm

literal 0
HcmV?d00001

diff --git a/components/auth-dialog/auth-dialog.js b/components/auth-dialog/auth-dialog.js
new file mode 100644
index 0000000..dba1ed7
--- /dev/null
+++ b/components/auth-dialog/auth-dialog.js
@@ -0,0 +1,112 @@
+// components/auth-dialog/auth-dialog.js
+const app = getApp();
+
+Component({
+  data: {
+    show: false,
+    avatarUrl: '',
+    nickname: '',
+    callbacks: {},
+    isSaving: false // 用于防止重复提交
+  },
+  methods: {
+    preventBubble: function() {
+      // 阻止事件冒泡
+    },
+    showDialog(callbacks = {}) {
+      this.setData({
+        show: true,
+        avatarUrl: '',
+        nickname: '',
+        callbacks: callbacks
+      });
+    },
+
+    hideDialog() {
+      this.setData({ show: false });
+    },
+
+    preventClose() {
+      // 阻止点击遮罩关闭
+    },
+    
+    onChooseAvatar(e) {
+      if (this.data.isSaving) return;
+      const { avatarUrl } = e.detail;
+      this.setData({
+        avatarUrl: avatarUrl,
+        tempAvatarPath: avatarUrl
+      });
+    },
+
+    onNicknameInput(e) {
+      this.setData({
+        nickname: e.detail.value
+      });
+    },
+
+    async handleSaveAndLogin() {
+      if (!this.data.tempAvatarPath || !this.data.nickname.trim()) {
+        wx.showToast({
+          title: '请选择头像并输入昵称',
+          icon: 'none'
+        });
+        return;
+      }
+      
+      if (this.data.isSaving) return;
+      this.setData({ isSaving: true });
+
+      wx.showLoading({
+        title: '正在登录...',
+        mask: true
+      });
+      
+      try {
+        // 1. 上传头像到云存储
+        const uploadResult = await wx.cloud.uploadFile({
+          cloudPath: `user_avatars/${Date.now()}-${Math.floor(Math.random() * 1000)}.png`,
+          filePath: this.data.tempAvatarPath,
+        });
+        const fileID = uploadResult.fileID;
+
+        // 调用云函数进行登录/注册
+        const loginResult = await wx.cloud.callFunction({
+          name: 'userManage',
+          data: {
+            action: 'login',
+            userData: {
+              nickname: this.data.nickname,
+              avatarUrl: fileID // 使用云存储文件ID
+            }
+          }
+        });
+
+        if (loginResult.result.success) {
+          wx.setStorageSync('userInfo', loginResult.result.user);
+          app.globalData.userInfo = loginResult.result.user;
+          this.hideDialog();
+          
+          wx.showToast({
+            title: '登录成功',
+            icon: 'success'
+          });
+
+          // 触发登录成功事件
+          this.triggerEvent('loginsuccess');
+        } else {
+          throw new Error(loginResult.result.message);
+        }
+      } catch (err) {
+        console.error('登录或上传失败', err);
+        wx.showToast({
+          title: err.message || '登录失败，请重试',
+          icon: 'none'
+        });
+      } finally {
+        wx.hideLoading();
+        this.setData({ isSaving: false });
+      }
+    }
+  }
+}); 
\ No newline at end of file
diff --git a/components/auth-dialog/auth-dialog.wxml b/components/auth-dialog/auth-dialog.wxml
new file mode 100644
index 0000000..0a3104a
--- /dev/null
+++ b/components/auth-dialog/auth-dialog.wxml
@@ -0,0 +1,31 @@
+<!--components/auth-dialog/auth-dialog.wxml-->
+<view class="dialog-mask" wx:if="{{show}}" bindtap="hideDialog">
+  <view class="dialog-container" catchtap="preventBubble">
+    <view class="dialog-header">
+      <view class="dialog-title">授权登录</view>
+      <text class="dialog-subtitle">为了提供更好的服务，我们需要您的授权</text>
+    </view>
+    <view class="dialog-content">
+      <button class="avatar-wrapper" open-type="chooseAvatar" bind:chooseavatar="onChooseAvatar" disabled="{{isSaving}}">
+        <image class="avatar-image" src="{{avatarUrl}}"></image>
+        <view class="avatar-edit-icon">+</view>
+      </button>
+      <input 
+        class="nickname-input" 
+        type="nickname" 
+        placeholder="请输入昵称" 
+        bindinput="onNicknameInput"
+        value="{{nickname}}"
+        disabled="{{isSaving}}"
+      />
+    </view>
+    <view class="dialog-footer">
+      <button class="dialog-btn btn-primary" bindtap="handleSaveAndLogin" loading="{{isSaving}}" disabled="{{!tempAvatarPath || !nickname.trim()}}">
+        保存并登录
+      </button>
+      <button class="dialog-btn btn-secondary" bindtap="hideDialog" disabled="{{isSaving}}">
+        暂不登录
+      </button>
+    </view>
+  </view>
+</view> 
\ No newline at end of file
diff --git a/components/auth-dialog/auth-dialog.wxss b/components/auth-dialog/auth-dialog.wxss
new file mode 100644
index 0000000..cb827e6
--- /dev/null
+++ b/components/auth-dialog/auth-dialog.wxss
@@ -0,0 +1,111 @@
+/* components/auth-dialog/auth-dialog.wxss */
+.dialog-mask {
+  position: fixed;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  background-color: rgba(0, 0, 0, 0.6);
+  z-index: 1000;
+}
+
+.dialog-container {
+  position: fixed;
+  left: 50%;
+  top: 50%;
+  transform: translate(-50%, -50%);
+  width: 85vw;
+  max-width: 600rpx;
+  background-color: #ffffff;
+  border-radius: 24rpx;
+  z-index: 1001;
+  overflow: hidden;
+  padding: 40rpx;
+  box-sizing: border-box;
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+}
+
+.dialog-title {
+  font-size: 38rpx;
+  font-weight: bold;
+  color: #333;
+  margin-bottom: 24rpx;
+}
+
+.dialog-content {
+  width: 100%;
+  font-size: 28rpx;
+  color: #666;
+  margin-bottom: 40rpx;
+}
+
+.auth-tip {
+  text-align: center;
+  margin-bottom: 40rpx;
+  color: #888;
+  font-size: 26rpx;
+}
+
+.avatar-section {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  margin-bottom: 40rpx;
+}
+
+.avatar-wrapper {
+  padding: 0;
+  border: none;
+  background: none;
+  width: 160rpx;
+  height: 160rpx;
+  border-radius: 50%;
+  overflow: hidden;
+  margin-bottom: 16rpx;
+  box-shadow: 0 4rpx 12rpx rgba(0,0,0,0.1);
+}
+
+.avatar-image {
+  width: 100%;
+  height: 100%;
+}
+
+.avatar-tip {
+  font-size: 24rpx;
+  color: #aaa;
+}
+
+.nickname-section {
+  width: 100%;
+}
+
+.nickname-label {
+  font-size: 28rpx;
+  margin-bottom: 12rpx;
+  color: #333;
+}
+
+.nickname-input {
+  width: 100%;
+  background-color: #f7f7f7;
+  border-radius: 12rpx;
+  padding: 16rpx 24rpx;
+  box-sizing: border-box;
+  font-size: 30rpx;
+}
+
+.dialog-footer {
+  width: 100%;
+}
+
+.login-button {
+  width: 100%;
+  background-color: #07c160;
+  color: white;
+  border-radius: 12rpx;
+  font-size: 32rpx;
+  height: 90rpx;
+  line-height: 90rpx;
+} 
\ No newline at end of file
diff --git a/components/login-dialog/login-dialog.json b/components/login-dialog/login-dialog.json
index b8c1f40..ba96044 100644
--- a/components/login-dialog/login-dialog.json
+++ b/components/login-dialog/login-dialog.json
@@ -1,4 +1,4 @@
-{
-  "component": true,
-  "usingComponents": {}
+{
+  "component": true,
+  "usingComponents": {}
 } 
\ No newline at end of file
diff --git a/database-schema/content_review_logs.md b/database-schema/content_review_logs.md
index d2c30a6..8a3e442 100644
--- a/database-schema/content_review_logs.md
+++ b/database-schema/content_review_logs.md
@@ -1,119 +1,119 @@
-# Content Review Logs Collection Structure
-
-## 集合名称
-content_review_logs
-
-## 权限设置
-- 读取：仅管理员
-- 写入：仅云函数
-
-## 字段结构
-
-| 字段名称 | 类型 | 必填 | 描述 |
-| ------- | ---- | ---- | ---- |
-| _id | string | 是 | 文档ID，系统自动生成 |
-| type | string | 是 | 审核类型：'text'(文本),'image'(图片) |
-| contentType | string | 是 | 内容类型：'comment'(评论),'nomination'(提名),'avatar'(头像),'unknown'(未知) |
-| content | string | 是 | 被审核的内容（图片为URL，文本为内容片段） |
-| pass | boolean | 是 | 是否通过审核：true(通过),false(未通过) |
-| result | object | 是 | 审核结果详情（微信API返回或错误信息） |
-| createTime | date | 是 | 审核记录创建时间 |
-
-## 索引设置
-
-| 索引字段 | 排序方向 | 说明 |
-| ------- | ------- | ---- |
-| type | 升序 | 用于查询不同类型的审核记录 |
-| pass | 升序 | 用于查询通过/未通过的记录 |
-| contentType | 升序 | 用于查询不同内容类型的记录 |
-| createTime | 降序 | 用于按时间排序 |
-
-## 查询示例
-
-### 1. 获取最近失败的审核记录
-```javascript
-db.collection('content_review_logs')
-  .where({
-    pass: false
-  })
-  .orderBy('createTime', 'desc')
-  .limit(20)
-  .get()
-```
-
-### 2. 获取特定类型内容的审核记录
-```javascript
-db.collection('content_review_logs')
-  .where({
-    contentType: 'nomination'
-  })
-  .orderBy('createTime', 'desc')
-  .get()
-```
-
-### 3. 获取审核失败率统计
-```javascript
-const db = cloud.database()
-const $ = db.command.aggregate
-db.collection('content_review_logs')
-  .aggregate()
-  .match({
-    createTime: db.command.gte(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) // 最近7天
-  })
-  .group({
-    _id: '$contentType',
-    total: $.sum(1),
-    passed: $.sum($.cond({ if: '$pass', then: 1, else: 0 })),
-    failed: $.sum($.cond({ if: '$pass', then: 0, else: 1 }))
-  })
-  .end()
-```
-
-## 数据库权限设置（JSON格式）
-
-```json
-{
-  "read": "auth.is_administrator == true",
-  "write": "auth.is_administrator == true"
-}
-```
-
-## 触发器设置（建议）
-
-1. **定期清理触发器**：每月自动清理超过3个月的日志记录，以节省存储空间。
-
-```javascript
-exports.main = async (event, context) => {
-  const db = cloud.database();
-  const threeMonthsAgo = new Date();
-  threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
-  
-  try {
-    const result = await db.collection('content_review_logs')
-      .where({
-        createTime: db.command.lt(threeMonthsAgo)
-      })
-      .remove();
-    
-    return {
-      success: true,
-      deleted: result.deleted
-    };
-  } catch (err) {
-    return {
-      success: false,
-      error: err.message
-    };
-  }
-};
-```
-
-## 注意事项
-
-1. 审核日志应当仅记录必要的信息，避免存储完整的敏感内容。
-
-2. 对于文本内容，建议只存储前100个字符，足够用于调试和分析。
-
-3. 日志记录应当设置适当的TTL（Time-To-Live）或定期清理，避免过度积累。
-
+# Content Review Logs Collection Structure
+
+## 集合名称
+content_review_logs
+
+## 权限设置
+- 读取：仅管理员
+- 写入：仅云函数
+
+## 字段结构
+
+| 字段名称 | 类型 | 必填 | 描述 |
+| ------- | ---- | ---- | ---- |
+| _id | string | 是 | 文档ID，系统自动生成 |
+| type | string | 是 | 审核类型：'text'(文本),'image'(图片) |
+| contentType | string | 是 | 内容类型：'comment'(评论),'nomination'(提名),'avatar'(头像),'unknown'(未知) |
+| content | string | 是 | 被审核的内容（图片为URL，文本为内容片段） |
+| pass | boolean | 是 | 是否通过审核：true(通过),false(未通过) |
+| result | object | 是 | 审核结果详情（微信API返回或错误信息） |
+| createTime | date | 是 | 审核记录创建时间 |
+
+## 索引设置
+
+| 索引字段 | 排序方向 | 说明 |
+| ------- | ------- | ---- |
+| type | 升序 | 用于查询不同类型的审核记录 |
+| pass | 升序 | 用于查询通过/未通过的记录 |
+| contentType | 升序 | 用于查询不同内容类型的记录 |
+| createTime | 降序 | 用于按时间排序 |
+
+## 查询示例
+
+### 1. 获取最近失败的审核记录
+```javascript
+db.collection('content_review_logs')
+  .where({
+    pass: false
+  })
+  .orderBy('createTime', 'desc')
+  .limit(20)
+  .get()
+```
+
+### 2. 获取特定类型内容的审核记录
+```javascript
+db.collection('content_review_logs')
+  .where({
+    contentType: 'nomination'
+  })
+  .orderBy('createTime', 'desc')
+  .get()
+```
+
+### 3. 获取审核失败率统计
+```javascript
+const db = cloud.database()
+const $ = db.command.aggregate
+db.collection('content_review_logs')
+  .aggregate()
+  .match({
+    createTime: db.command.gte(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) // 最近7天
+  })
+  .group({
+    _id: '$contentType',
+    total: $.sum(1),
+    passed: $.sum($.cond({ if: '$pass', then: 1, else: 0 })),
+    failed: $.sum($.cond({ if: '$pass', then: 0, else: 1 }))
+  })
+  .end()
+```
+
+## 数据库权限设置（JSON格式）
+
+```json
+{
+  "read": "auth.is_administrator == true",
+  "write": "auth.is_administrator == true"
+}
+```
+
+## 触发器设置（建议）
+
+1. **定期清理触发器**：每月自动清理超过3个月的日志记录，以节省存储空间。
+
+```javascript
+exports.main = async (event, context) => {
+  const db = cloud.database();
+  const threeMonthsAgo = new Date();
+  threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
+  
+  try {
+    const result = await db.collection('content_review_logs')
+      .where({
+        createTime: db.command.lt(threeMonthsAgo)
+      })
+      .remove();
+    
+    return {
+      success: true,
+      deleted: result.deleted
+    };
+  } catch (err) {
+    return {
+      success: false,
+      error: err.message
+    };
+  }
+};
+```
+
+## 注意事项
+
+1. 审核日志应当仅记录必要的信息，避免存储完整的敏感内容。
+
+2. 对于文本内容，建议只存储前100个字符，足够用于调试和分析。
+
+3. 日志记录应当设置适当的TTL（Time-To-Live）或定期清理，避免过度积累。
+
 4. 审核失败率过高时应当发出系统告警，可能是内容质量问题或审核系统异常。 
\ No newline at end of file
diff --git a/database-schema/messages.md b/database-schema/messages.md
index a22201c..260bfcc 100644
--- a/database-schema/messages.md
+++ b/database-schema/messages.md
@@ -1,102 +1,102 @@
-# Messages Collection Structure
-
-## 集合名称
-messages
-
-## 权限设置
-- 读取：仅创建者
-- 写入：仅管理员和创建者
-
-## 字段结构
-
-| 字段名称 | 类型 | 必填 | 描述 |
-| ------- | ---- | ---- | ---- |
-| _id | string | 是 | 文档ID，系统自动生成 |
-| _openid | string | 否 | 创建者的openid，仅前端创建时自动生成 |
-| receiverId | string | 是 | 接收消息的用户ID |
-| senderId | string | 否 | 发送消息的用户ID，若为系统消息则为null |
-| senderName | string | 是 | 发送者名称，默认为"系统" |
-| senderAvatar | string | 是 | 发送者头像URL，默认为占位图片 |
-| type | string | 是 | 消息类型：'system'(系统),'vote'(投票),'comment'(评论),'nomination'(提名) |
-| content | string | 是 | 消息内容 |
-| read | boolean | 是 | 是否已读：false(未读),true(已读) |
-| nominationId | string | 否 | 相关提名的ID（如果有） |
-| nominationTitle | string | 否 | 相关提名的标题（如果有） |
-| readTime | date | 否 | 消息被阅读的时间（如果已读） |
-| createTime | date | 是 | 消息创建时间（服务器时间） |
-| _createTime | number | 是 | 消息创建时间的时间戳（用于排序） |
-
-## 索引设置
-
-| 索引字段 | 排序方向 | 说明 |
-| ------- | ------- | ---- |
-| receiverId | 升序 | 用于查询用户收到的消息 |
-| read | 升序 | 用于查询未读消息 |
-| createTime | 降序 | 用于按时间排序 |
-
-## 查询示例
-
-### 1. 获取用户所有消息
-```javascript
-db.collection('messages')
-  .where({
-    receiverId: 'user123'
-  })
-  .orderBy('createTime', 'desc')
-  .get()
-```
-
-### 2. 获取用户未读消息
-```javascript
-db.collection('messages')
-  .where({
-    receiverId: 'user123',
-    read: false
-  })
-  .orderBy('createTime', 'desc')
-  .get()
-```
-
-### 3. 获取用户未读消息数量
-```javascript
-db.collection('messages')
-  .where({
-    receiverId: 'user123',
-    read: false
-  })
-  .count()
-```
-
-### 4. 按类型获取消息
-```javascript
-db.collection('messages')
-  .where({
-    receiverId: 'user123',
-    type: 'vote'
-  })
-  .orderBy('createTime', 'desc')
-  .get()
-```
-
-## 数据库权限设置（JSON格式）
-
-```json
-{
-  "read": "doc._openid == auth.openid || doc.receiverId == auth.user_id",
-  "write": "doc._openid == auth.openid || auth.is_administrator == true"
-}
-```
-
-## 触发器设置（建议）
-
-1. **新消息通知触发器**：当新消息创建时，可以通过云函数触发器向用户发送订阅消息通知（需要用户事先订阅）。
-
-2. **消息清理触发器**：定期（如每月）清理过期消息（如已读且超过3个月的系统消息）。
-
-## 注意事项
-
-1. 为保证消息的安全性，消息应当由云函数创建和管理，避免直接在小程序端创建消息。
-
-2. 消息应当与用户账户系统深度集成，确保用户ID的一致性。
-
+# Messages Collection Structure
+
+## 集合名称
+messages
+
+## 权限设置
+- 读取：仅创建者
+- 写入：仅管理员和创建者
+
+## 字段结构
+
+| 字段名称 | 类型 | 必填 | 描述 |
+| ------- | ---- | ---- | ---- |
+| _id | string | 是 | 文档ID，系统自动生成 |
+| _openid | string | 否 | 创建者的openid，仅前端创建时自动生成 |
+| receiverId | string | 是 | 接收消息的用户ID |
+| senderId | string | 否 | 发送消息的用户ID，若为系统消息则为null |
+| senderName | string | 是 | 发送者名称，默认为"系统" |
+| senderAvatar | string | 是 | 发送者头像URL，默认为占位图片 |
+| type | string | 是 | 消息类型：'system'(系统),'vote'(投票),'comment'(评论),'nomination'(提名) |
+| content | string | 是 | 消息内容 |
+| read | boolean | 是 | 是否已读：false(未读),true(已读) |
+| nominationId | string | 否 | 相关提名的ID（如果有） |
+| nominationTitle | string | 否 | 相关提名的标题（如果有） |
+| readTime | date | 否 | 消息被阅读的时间（如果已读） |
+| createTime | date | 是 | 消息创建时间（服务器时间） |
+| _createTime | number | 是 | 消息创建时间的时间戳（用于排序） |
+
+## 索引设置
+
+| 索引字段 | 排序方向 | 说明 |
+| ------- | ------- | ---- |
+| receiverId | 升序 | 用于查询用户收到的消息 |
+| read | 升序 | 用于查询未读消息 |
+| createTime | 降序 | 用于按时间排序 |
+
+## 查询示例
+
+### 1. 获取用户所有消息
+```javascript
+db.collection('messages')
+  .where({
+    receiverId: 'user123'
+  })
+  .orderBy('createTime', 'desc')
+  .get()
+```
+
+### 2. 获取用户未读消息
+```javascript
+db.collection('messages')
+  .where({
+    receiverId: 'user123',
+    read: false
+  })
+  .orderBy('createTime', 'desc')
+  .get()
+```
+
+### 3. 获取用户未读消息数量
+```javascript
+db.collection('messages')
+  .where({
+    receiverId: 'user123',
+    read: false
+  })
+  .count()
+```
+
+### 4. 按类型获取消息
+```javascript
+db.collection('messages')
+  .where({
+    receiverId: 'user123',
+    type: 'vote'
+  })
+  .orderBy('createTime', 'desc')
+  .get()
+```
+
+## 数据库权限设置（JSON格式）
+
+```json
+{
+  "read": "doc._openid == auth.openid || doc.receiverId == auth.user_id",
+  "write": "doc._openid == auth.openid || auth.is_administrator == true"
+}
+```
+
+## 触发器设置（建议）
+
+1. **新消息通知触发器**：当新消息创建时，可以通过云函数触发器向用户发送订阅消息通知（需要用户事先订阅）。
+
+2. **消息清理触发器**：定期（如每月）清理过期消息（如已读且超过3个月的系统消息）。
+
+## 注意事项
+
+1. 为保证消息的安全性，消息应当由云函数创建和管理，避免直接在小程序端创建消息。
+
+2. 消息应当与用户账户系统深度集成，确保用户ID的一致性。
+
 3. 在显示消息时，应当检查相关的提名或评论是否仍然存在，避免显示已删除内容的相关消息。 
\ No newline at end of file
diff --git a/database-schema/search_logs.md b/database-schema/search_logs.md
new file mode 100644
index 0000000..f4c5215
--- /dev/null
+++ b/database-schema/search_logs.md
@@ -0,0 +1,138 @@
+# Search Logs Collection Structure
+
+## 集合名称
+search_logs
+
+## 权限设置
+- 读取：仅管理员
+- 写入：仅云函数
+
+## 字段结构
+
+| 字段名称 | 类型 | 必填 | 描述 |
+| ------- | ---- | ---- | ---- |
+| _id | string | 是 | 文档ID，系统自动生成 |
+| keyword | string | 是 | 搜索关键词，统一小写处理 |
+| createTime | date | 是 | 搜索记录创建时间 |
+
+## 索引设置
+
+| 索引字段 | 排序方向 | 说明 |
+| ------- | ------- | ---- |
+| keyword | 升序 | 用于查询特定关键词的搜索记录 |
+| createTime | 降序 | 用于按时间排序 |
+
+## 查询示例
+
+### 1. 获取最近的搜索记录
+```javascript
+db.collection('search_logs')
+  .orderBy('createTime', 'desc')
+  .limit(100)
+  .get()
+```
+
+### 2. 获取热门搜索关键词
+```javascript
+const db = cloud.database()
+const $ = db.command.aggregate
+
+db.collection('search_logs')
+  .aggregate()
+  .group({
+    _id: '$keyword',
+    count: $.sum(1)
+  })
+  .sort({
+    count: -1
+  })
+  .limit(10)
+  .end()
+```
+
+### 3. 获取特定时间段内的搜索趋势
+```javascript
+const db = cloud.database()
+const $ = db.command.aggregate
+const _ = db.command
+const oneWeekAgo = new Date()
+oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)
+
+db.collection('search_logs')
+  .aggregate()
+  .match({
+    createTime: _.gte(oneWeekAgo)
+  })
+  .group({
+    _id: {
+      keyword: '$keyword',
+      day: $.dateToString({
+        date: '$createTime',
+        format: '%Y-%m-%d'
+      })
+    },
+    count: $.sum(1)
+  })
+  .group({
+    _id: '$_id.keyword',
+    dailyCounts: $.push({
+      date: '$_id.day',
+      count: '$count'
+    }),
+    totalCount: $.sum('$count')
+  })
+  .sort({
+    totalCount: -1
+  })
+  .limit(10)
+  .end()
+```
+
+## 数据库权限设置（JSON格式）
+
+```json
+{
+  "read": "auth.is_administrator == true",
+  "write": "auth.is_administrator == true"
+}
+```
+
+## 触发器设置（建议）
+
+1. **定期清理触发器**：每月自动清理超过3个月的搜索日志记录，以节省存储空间。
+
+```javascript
+exports.main = async (event, context) => {
+  const db = cloud.database();
+  const threeMonthsAgo = new Date();
+  threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
+  
+  try {
+    const result = await db.collection('search_logs')
+      .where({
+        createTime: db.command.lt(threeMonthsAgo)
+      })
+      .remove();
+    
+    return {
+      success: true,
+      deleted: result.deleted
+    };
+  } catch (err) {
+    return {
+      success: false,
+      error: err.message
+    };
+  }
+};
+```
+
+## 注意事项
+
+1. 搜索日志仅记录有意义的关键词（长度大于1的关键词）。
+
+2. 关键词统一转为小写存储，便于统计和分析。
+
+3. 搜索日志应当设置适当的TTL（Time-To-Live）或定期清理，避免过度积累。
+
+4. 搜索日志数据可用于改进搜索功能和用户体验，例如提供热门搜索建议。 
\ No newline at end of file
diff --git a/database-schema/share_records.md b/database-schema/share_records.md
index 4fe0e9d..a45c517 100644
--- a/database-schema/share_records.md
+++ b/database-schema/share_records.md
@@ -1,145 +1,145 @@
-# Share Records Collection Structure
-
-## 集合名称
-share_records
-
-## 权限设置
-- 读取：仅创建者和管理员
-- 写入：仅云函数
-
-## 字段结构
-
-| 字段名称 | 类型 | 必填 | 描述 |
-| ------- | ---- | ---- | ---- |
-| _id | string | 是 | 文档ID，系统自动生成 |
-| userId | string | 是 | 分享者的用户ID |
-| type | string | 是 | 分享类型：'nomination'(提名),'ranking'(排行榜),'profile'(个人资料) |
-| targetId | string | 是 | 分享目标ID（如提名ID、用户ID等） |
-| platform | string | 是 | 分享平台：'wechat'(微信),'moments'(朋友圈),'qq'(QQ)等 |
-| title | string | 否 | 分享标题 |
-| path | string | 是 | 小程序路径，用于跳转 |
-| clicks | number | 是 | 点击次数 |
-| lastClickTime | date | 否 | 最后点击时间 |
-| createTime | date | 是 | 分享记录创建时间 |
-| _createTime | number | 是 | 分享记录创建时间戳，用于排序 |
-
-## 索引设置
-
-| 索引字段 | 排序方向 | 说明 |
-| ------- | ------- | ---- |
-| userId | 升序 | 用于查询用户的分享记录 |
-| type, targetId | 升序, 升序 | 用于查询特定类型和目标的分享记录 |
-| createTime | 降序 | 用于按时间排序 |
-
-## 查询示例
-
-### 1. 获取用户分享记录
-```javascript
-db.collection('share_records')
-  .where({
-    userId: 'user123'
-  })
-  .orderBy('createTime', 'desc')
-  .get()
-```
-
-### 2. 获取特定提名的分享记录
-```javascript
-db.collection('share_records')
-  .where({
-    type: 'nomination',
-    targetId: 'nomination123'
-  })
-  .get()
-```
-
-### 3. 按分享平台统计分享数量
-```javascript
-const db = cloud.database()
-const $ = db.command.aggregate
-
-db.collection('share_records')
-  .aggregate()
-  .group({
-    _id: '$platform',
-    count: $.sum(1),
-    clicks: $.sum('$clicks')
-  })
-  .sort({
-    count: -1
-  })
-  .end()
-```
-
-### 4. 获取分享最多的提名
-```javascript
-const db = cloud.database()
-const $ = db.command.aggregate
-
-db.collection('share_records')
-  .aggregate()
-  .match({
-    type: 'nomination'
-  })
-  .group({
-    _id: '$targetId',
-    count: $.sum(1),
-    clicks: $.sum('$clicks')
-  })
-  .sort({
-    count: -1
-  })
-  .limit(10)
-  .end()
-```
-
-## 数据库权限设置（JSON格式）
-
-```json
-{
-  "read": "doc.userId == auth.user_id || auth.is_administrator == true",
-  "write": "auth.is_administrator == true"
-}
-```
-
-## 触发器设置（建议）
-
-1. **分享热度计算触发器**：当分享记录被点击一定次数（如10次）时，触发计算该提名的热度值并更新提名记录。
-
-```javascript
-exports.main = async (event, context) => {
-  const db = cloud.database();
-  const shareId = event.docId;
-  
-  try {
-    // 获取分享记录
-    const shareRes = await db.collection('share_records').doc(shareId).get();
-    const share = shareRes.data;
-    
-    // 如果是提名分享且点击数达到阈值
-    if (share && share.type === 'nomination' && share.clicks >= 10) {
-      // 更新提名热度
-      await db.collection('entries').doc(share.targetId).update({
-        data: {
-          hotLevel: db.command.inc(1)
-        }
-      });
-    }
-    
-    return { success: true };
-  } catch (err) {
-    console.error('分享热度计算失败:', err);
-    return { success: false, error: err.message };
-  }
-};
-```
-
-## 注意事项
-
-1. 分享记录应当与提名系统紧密集成，当分享带来转化（如投票）时应当有额外奖励机制。
-
-2. 分享点击统计需要防范刷点击行为，可以考虑添加IP限制或用户限制。
-
-3. 分享链接应当支持参数携带，以便于跟踪分享来源和计算转化率。
-
+# Share Records Collection Structure
+
+## 集合名称
+share_records
+
+## 权限设置
+- 读取：仅创建者和管理员
+- 写入：仅云函数
+
+## 字段结构
+
+| 字段名称 | 类型 | 必填 | 描述 |
+| ------- | ---- | ---- | ---- |
+| _id | string | 是 | 文档ID，系统自动生成 |
+| userId | string | 是 | 分享者的用户ID |
+| type | string | 是 | 分享类型：'nomination'(提名),'ranking'(排行榜),'profile'(个人资料) |
+| targetId | string | 是 | 分享目标ID（如提名ID、用户ID等） |
+| platform | string | 是 | 分享平台：'wechat'(微信),'moments'(朋友圈),'qq'(QQ)等 |
+| title | string | 否 | 分享标题 |
+| path | string | 是 | 小程序路径，用于跳转 |
+| clicks | number | 是 | 点击次数 |
+| lastClickTime | date | 否 | 最后点击时间 |
+| createTime | date | 是 | 分享记录创建时间 |
+| _createTime | number | 是 | 分享记录创建时间戳，用于排序 |
+
+## 索引设置
+
+| 索引字段 | 排序方向 | 说明 |
+| ------- | ------- | ---- |
+| userId | 升序 | 用于查询用户的分享记录 |
+| type, targetId | 升序, 升序 | 用于查询特定类型和目标的分享记录 |
+| createTime | 降序 | 用于按时间排序 |
+
+## 查询示例
+
+### 1. 获取用户分享记录
+```javascript
+db.collection('share_records')
+  .where({
+    userId: 'user123'
+  })
+  .orderBy('createTime', 'desc')
+  .get()
+```
+
+### 2. 获取特定提名的分享记录
+```javascript
+db.collection('share_records')
+  .where({
+    type: 'nomination',
+    targetId: 'nomination123'
+  })
+  .get()
+```
+
+### 3. 按分享平台统计分享数量
+```javascript
+const db = cloud.database()
+const $ = db.command.aggregate
+
+db.collection('share_records')
+  .aggregate()
+  .group({
+    _id: '$platform',
+    count: $.sum(1),
+    clicks: $.sum('$clicks')
+  })
+  .sort({
+    count: -1
+  })
+  .end()
+```
+
+### 4. 获取分享最多的提名
+```javascript
+const db = cloud.database()
+const $ = db.command.aggregate
+
+db.collection('share_records')
+  .aggregate()
+  .match({
+    type: 'nomination'
+  })
+  .group({
+    _id: '$targetId',
+    count: $.sum(1),
+    clicks: $.sum('$clicks')
+  })
+  .sort({
+    count: -1
+  })
+  .limit(10)
+  .end()
+```
+
+## 数据库权限设置（JSON格式）
+
+```json
+{
+  "read": "doc.userId == auth.user_id || auth.is_administrator == true",
+  "write": "auth.is_administrator == true"
+}
+```
+
+## 触发器设置（建议）
+
+1. **分享热度计算触发器**：当分享记录被点击一定次数（如10次）时，触发计算该提名的热度值并更新提名记录。
+
+```javascript
+exports.main = async (event, context) => {
+  const db = cloud.database();
+  const shareId = event.docId;
+  
+  try {
+    // 获取分享记录
+    const shareRes = await db.collection('share_records').doc(shareId).get();
+    const share = shareRes.data;
+    
+    // 如果是提名分享且点击数达到阈值
+    if (share && share.type === 'nomination' && share.clicks >= 10) {
+      // 更新提名热度
+      await db.collection('entries').doc(share.targetId).update({
+        data: {
+          hotLevel: db.command.inc(1)
+        }
+      });
+    }
+    
+    return { success: true };
+  } catch (err) {
+    console.error('分享热度计算失败:', err);
+    return { success: false, error: err.message };
+  }
+};
+```
+
+## 注意事项
+
+1. 分享记录应当与提名系统紧密集成，当分享带来转化（如投票）时应当有额外奖励机制。
+
+2. 分享点击统计需要防范刷点击行为，可以考虑添加IP限制或用户限制。
+
+3. 分享链接应当支持参数携带，以便于跟踪分享来源和计算转化率。
+
 4. 为避免数据库过大，可以定期归档较早的分享记录或设置TTL。 
\ No newline at end of file
diff --git a/open-project.sh b/open-project.sh
new file mode 100644
index 0000000..5ce697f
--- /dev/null
+++ b/open-project.sh
@@ -0,0 +1,26 @@
+#!/bin/bash
+# 快速打开项目脚本
+
+echo "🚀 正在启动伦敦必吃榜小程序..."
+
+# 检查微信开发者工具是否安装
+if [ -d "/Applications/wechatwebdevtools.app" ]; then
+    echo "✅ 检测到微信开发者工具"
+    
+    # 使用命令行打开项目
+    /Applications/wechatwebdevtools.app/Contents/MacOS/cli open --project /Users/jimmu/vdogo.com/伦敦必吃榜
+    
+    echo "✅ 项目已在微信开发者工具中打开"
+else
+    echo "❌ 未检测到微信开发者工具"
+    echo "请先下载安装：https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html"
+    
+    # 尝试打开下载页面
+    open "https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html"
+fi
+
+echo ""
+echo "📋 项目信息："
+echo "- 项目路径: /Users/jimmu/vdogo.com/伦敦必吃榜"
+echo "- AppID: wx29cb754190a5c042"
+echo "- 云开发环境: cloud1-2g2sby6z920b76cb"
\ No newline at end of file
diff --git a/pages/.DS_Store b/pages/.DS_Store
new file mode 100644
index 0000000000000000000000000000000000000000..4870729310f8e021c956c2a905539ecd985c8094
GIT binary patch
literal 6148
zcmeHKJ5EDE474GjNHi%a_X^x#6(uL&0(>3?(i15FDdnp;7e~vCZ6Sph3JMxDmb|m;
z_3Ub=cz!lBU%wAGW-BvW!io05VQ$=~&+M!sM2|C`Z5&=7$A{f+oMoR5kb7x^J=vSx
z+c*9N0xz+-|K+i#FH=+sNC7Dz1*Cu!V9lm2uM#y%0VyB_z7*j1p}~p0a7v6%2Zm??
zfD44fFppjW*cbrz!YL6Em?ssORIe7pla6?+yk0mZCfz)4#yNGfSBK(pJK`<U&3mFo
zDIf)o6*$l3iuHdB|DpdsCTS%Fq`<#Yz!#g_%^FXt+B$n2Yi)zy!I|?3r(qrx3{j4O
iQI4@-Ilhjh%xj!uzZXu4K}S63K>Z9*7nv0JYXuIhZyNCc

literal 0
HcmV?d00001

diff --git a/pages/deeds-wall/deeds-wall.js b/pages/deeds-wall/deeds-wall.js
index f6d0f15..ec446e2 100644
--- a/pages/deeds-wall/deeds-wall.js
+++ b/pages/deeds-wall/deeds-wall.js
@@ -1,189 +1,189 @@
-// pages/deeds-wall/deeds-wall.js
-Page({
-  /**
-   * 页面的初始数据
-   */
-  data: {
-    deedsList: [],
-    loading: true,
-    hasMore: true,
-    pageSize: 10,
-    currentPage: 0
-  },
-
-  /**
-   * 生命周期函数--监听页面加载
-   */
-  onLoad: function (options) {
-    this.loadDeeds();
-    
-    // 启用分享菜单
-    wx.showShareMenu({
-      withShareTicket: true,
-      menus: ['shareAppMessage', 'shareTimeline']
-    });
-  },
-
-  /**
-   * 页面相关事件处理函数--监听用户下拉动作
-   */
-  onPullDownRefresh: function () {
-    this.setData({
-      deedsList: [],
-      currentPage: 0,
-      hasMore: true
-    });
-    this.loadDeeds().then(() => {
-      wx.stopPullDownRefresh();
-    });
-  },
-
-  /**
-   * 页面上拉触底事件的处理函数
-   */
-  onReachBottom: function () {
-    if (this.data.hasMore && !this.data.loading) {
-      this.loadDeeds();
-    }
-  },
-
-  /**
-   * 用户点击右上角分享
-   */
-  onShareAppMessage: function () {
-    return {
-      title: '战绩墙 - 伦敦必吃榜',
-      path: '/pages/deeds-wall/deeds-wall'
-    };
-  },
-
-  /**
-   * 分享到朋友圈
-   */
-  onShareTimeline: function () {
-    return {
-      title: '战绩墙 - 伦敦必吃榜',
-      query: ''
-    };
-  },
-
-  /**
-   * 加载事迹数据
-   */
-  loadDeeds: async function () {
-    if (this.data.loading || !this.data.hasMore) return;
-    
-    try {
-      this.setData({ loading: true });
-      wx.showLoading({ title: '加载中...' });
-      
-      // 模拟数据，实际项目中应该调用云函数获取数据
-      const mockData = this.getMockData();
-      
-      // 模拟网络延迟
-      await new Promise(resolve => setTimeout(resolve, 800));
-      
-      // 计算分页
-      const start = this.data.currentPage * this.data.pageSize;
-      const end = start + this.data.pageSize;
-      const pageData = mockData.slice(start, end);
-      
-      // 更新数据
-      this.setData({
-        deedsList: [...this.data.deedsList, ...pageData],
-        currentPage: this.data.currentPage + 1,
-        hasMore: end < mockData.length,
-        loading: false
-      });
-      
-      wx.hideLoading();
-    } catch (error) {
-      console.error('加载事迹失败:', error);
-      this.setData({ loading: false });
-      wx.hideLoading();
-      wx.showToast({
-        title: '加载失败，请重试',
-        icon: 'none'
-      });
-    }
-  },
-
-  /**
-   * 获取模拟数据
-   */
-  getMockData: function () {
-    return [
-      {
-        id: '1',
-        nickname: '张三',
-        avatarUrl: 'https://placekitten.com/80/80',
-        content: '张三路过Soho，12对情侣当场改口喊他老公',
-        location: '伦敦 Soho',
-        createTime: '2024-07-12'
-      },
-      {
-        id: '2',
-        nickname: '李四',
-        avatarUrl: 'https://placekitten.com/81/81',
-        content: '曾经Hyde Park天鹅围住张三跳求偶舞，我全程直播',
-        location: '伦敦 Hyde Park',
-        createTime: '2024-07-05'
-      },
-      {
-        id: '3',
-        nickname: '王五',
-        avatarUrl: 'https://placekitten.com/82/82',
-        content: '张三在Covent Garden请整条街免费喝酒',
-        location: '伦敦 Covent Garden',
-        createTime: '2024-06-28'
-      },
-      {
-        id: '4',
-        nickname: '赵六',
-        avatarUrl: 'https://placekitten.com/83/83',
-        content: '张三约会路过泰晤士河，The Shard外墙自行亮起"约吗"霓虹字母',
-        location: '伦敦 泰晤士河',
-        createTime: '2024-06-03'
-      },
-      {
-        id: '5',
-        nickname: '小明',
-        avatarUrl: 'https://placekitten.com/84/84',
-        content: '上周在Camden Market看到张三，结果所有摊主都争着送他东西',
-        location: '伦敦 Camden Market',
-        createTime: '2024-05-25'
-      }
-    ];
-  },
-
-  /**
-   * "爆料新事迹"按钮点击事件
-   */
-  onReportNewDeed: function() {
-    const app = getApp();
-    
-    // 检查登录状态
-    if (!app.checkUserLogin) {
-      wx.showToast({
-        title: '请先登录',
-        icon: 'none'
-      });
-      return;
-    }
-    
-    // 跳转到事迹提交页面
-    wx.navigateTo({
-      url: '/pages/report-deed/report-deed',
-      fail: function(err) {
-        console.error("跳转失败:", err);
-        
-        // 如果页面不存在，显示提示
-        wx.showModal({
-          title: '功能开发中',
-          content: '爆料新事迹功能正在开发中，敬请期待！',
-          showCancel: false
-        });
-      }
-    });
-  }
+// pages/deeds-wall/deeds-wall.js
+Page({
+  /**
+   * 页面的初始数据
+   */
+  data: {
+    deedsList: [],
+    loading: true,
+    hasMore: true,
+    pageSize: 10,
+    currentPage: 0
+  },
+
+  /**
+   * 生命周期函数--监听页面加载
+   */
+  onLoad: function (options) {
+    this.loadDeeds();
+    
+    // 启用分享菜单
+    wx.showShareMenu({
+      withShareTicket: true,
+      menus: ['shareAppMessage', 'shareTimeline']
+    });
+  },
+
+  /**
+   * 页面相关事件处理函数--监听用户下拉动作
+   */
+  onPullDownRefresh: function () {
+    this.setData({
+      deedsList: [],
+      currentPage: 0,
+      hasMore: true
+    });
+    this.loadDeeds().then(() => {
+      wx.stopPullDownRefresh();
+    });
+  },
+
+  /**
+   * 页面上拉触底事件的处理函数
+   */
+  onReachBottom: function () {
+    if (this.data.hasMore && !this.data.loading) {
+      this.loadDeeds();
+    }
+  },
+
+  /**
+   * 用户点击右上角分享
+   */
+  onShareAppMessage: function () {
+    return {
+      title: '战绩墙 - 伦敦必吃榜',
+      path: '/pages/deeds-wall/deeds-wall'
+    };
+  },
+
+  /**
+   * 分享到朋友圈
+   */
+  onShareTimeline: function () {
+    return {
+      title: '战绩墙 - 伦敦必吃榜',
+      query: ''
+    };
+  },
+
+  /**
+   * 加载事迹数据
+   */
+  loadDeeds: async function () {
+    if (this.data.loading || !this.data.hasMore) return;
+    
+    try {
+      this.setData({ loading: true });
+      wx.showLoading({ title: '加载中...' });
+      
+      // 模拟数据，实际项目中应该调用云函数获取数据
+      const mockData = this.getMockData();
+      
+      // 模拟网络延迟
+      await new Promise(resolve => setTimeout(resolve, 800));
+      
+      // 计算分页
+      const start = this.data.currentPage * this.data.pageSize;
+      const end = start + this.data.pageSize;
+      const pageData = mockData.slice(start, end);
+      
+      // 更新数据
+      this.setData({
+        deedsList: [...this.data.deedsList, ...pageData],
+        currentPage: this.data.currentPage + 1,
+        hasMore: end < mockData.length,
+        loading: false
+      });
+      
+      wx.hideLoading();
+    } catch (error) {
+      console.error('加载事迹失败:', error);
+      this.setData({ loading: false });
+      wx.hideLoading();
+      wx.showToast({
+        title: '加载失败，请重试',
+        icon: 'none'
+      });
+    }
+  },
+
+  /**
+   * 获取模拟数据
+   */
+  getMockData: function () {
+    return [
+      {
+        id: '1',
+        nickname: '张三',
+        avatarUrl: 'https://placekitten.com/80/80',
+        content: '张三路过Soho，12对情侣当场改口喊他老公',
+        location: '伦敦 Soho',
+        createTime: '2024-07-12'
+      },
+      {
+        id: '2',
+        nickname: '李四',
+        avatarUrl: 'https://placekitten.com/81/81',
+        content: '曾经Hyde Park天鹅围住张三跳求偶舞，我全程直播',
+        location: '伦敦 Hyde Park',
+        createTime: '2024-07-05'
+      },
+      {
+        id: '3',
+        nickname: '王五',
+        avatarUrl: 'https://placekitten.com/82/82',
+        content: '张三在Covent Garden请整条街免费喝酒',
+        location: '伦敦 Covent Garden',
+        createTime: '2024-06-28'
+      },
+      {
+        id: '4',
+        nickname: '赵六',
+        avatarUrl: 'https://placekitten.com/83/83',
+        content: '张三约会路过泰晤士河，The Shard外墙自行亮起"约吗"霓虹字母',
+        location: '伦敦 泰晤士河',
+        createTime: '2024-06-03'
+      },
+      {
+        id: '5',
+        nickname: '小明',
+        avatarUrl: 'https://placekitten.com/84/84',
+        content: '上周在Camden Market看到张三，结果所有摊主都争着送他东西',
+        location: '伦敦 Camden Market',
+        createTime: '2024-05-25'
+      }
+    ];
+  },
+
+  /**
+   * "爆料新事迹"按钮点击事件
+   */
+  onReportNewDeed: function() {
+    const app = getApp();
+    
+    // 检查登录状态
+    if (!app.checkUserLogin) {
+      wx.showToast({
+        title: '请先登录',
+        icon: 'none'
+      });
+      return;
+    }
+    
+    // 跳转到事迹提交页面
+    wx.navigateTo({
+      url: '/pages/report-deed/report-deed',
+      fail: function(err) {
+        console.error("跳转失败:", err);
+        
+        // 如果页面不存在，显示提示
+        wx.showModal({
+          title: '功能开发中',
+          content: '爆料新事迹功能正在开发中，敬请期待！',
+          showCancel: false
+        });
+      }
+    });
+  }
 }) 
\ No newline at end of file
diff --git a/pages/deeds-wall/deeds-wall.json b/pages/deeds-wall/deeds-wall.json
index de29ce9..f4bdc45 100644
--- a/pages/deeds-wall/deeds-wall.json
+++ b/pages/deeds-wall/deeds-wall.json
@@ -1,7 +1,7 @@
-{
-  "navigationBarTitleText": "战绩墙",
-  "enablePullDownRefresh": true,
-  "backgroundColor": "#F7F8FA",
-  "backgroundTextStyle": "dark",
-  "usingComponents": {}
+{
+  "navigationBarTitleText": "战绩墙",
+  "enablePullDownRefresh": true,
+  "backgroundColor": "#F7F8FA",
+  "backgroundTextStyle": "dark",
+  "usingComponents": {}
 } 
\ No newline at end of file
diff --git a/pages/deeds-wall/deeds-wall.wxml b/pages/deeds-wall/deeds-wall.wxml
index 2060e9a..68d2d13 100644
--- a/pages/deeds-wall/deeds-wall.wxml
+++ b/pages/deeds-wall/deeds-wall.wxml
@@ -1,33 +1,33 @@
-<view class="container">
-  <view class="header">
-    <text class="header-title">战绩墙</text>
-    <text class="header-subtitle">记录精彩事迹，分享欢乐时刻</text>
-  </view>
-
-  <scroll-view scroll-y="true" class="deeds-container">
-    <block wx:for="{{ deedsList }}" wx:key="id">
-      <view class="deed-card">
-        <view class="card-header">
-          <image class="avatar" src="{{ item.avatarUrl }}" mode="aspectFill"></image>
-          <view class="user-info">
-            <text class="nickname">{{ item.nickname }}</text>
-            <text class="timestamp">{{ item.createTime }}</text>
-          </view>
-        </view>
-        <view class="card-body">
-          <text class="content">{{ item.content }}</text>
-        </view>
-        <view wx:if="{{ item.location }}" class="card-footer">
-          <view class="location">
-            <text class="location-icon">📍</text>
-            <text class="location-text">{{ item.location }}</text>
-          </view>
-        </view>
-      </view>
-    </block>
-  </scroll-view>
-
-  <view class="action-container">
-    <button class="report-button" bindtap="onReportNewDeed">爆料新事迹</button>
-  </view>
+<view class="container">
+  <view class="header">
+    <text class="header-title">战绩墙</text>
+    <text class="header-subtitle">记录精彩事迹，分享欢乐时刻</text>
+  </view>
+
+  <scroll-view scroll-y="true" class="deeds-container">
+    <block wx:for="{{ deedsList }}" wx:key="id">
+      <view class="deed-card">
+        <view class="card-header">
+          <image class="avatar" src="{{ item.avatarUrl }}" mode="aspectFill"></image>
+          <view class="user-info">
+            <text class="nickname">{{ item.nickname }}</text>
+            <text class="timestamp">{{ item.createTime }}</text>
+          </view>
+        </view>
+        <view class="card-body">
+          <text class="content">{{ item.content }}</text>
+        </view>
+        <view wx:if="{{ item.location }}" class="card-footer">
+          <view class="location">
+            <text class="location-icon">📍</text>
+            <text class="location-text">{{ item.location }}</text>
+          </view>
+        </view>
+      </view>
+    </block>
+  </scroll-view>
+
+  <view class="action-container">
+    <button class="report-button" bindtap="onReportNewDeed">爆料新事迹</button>
+  </view>
 </view> 
\ No newline at end of file
diff --git a/pages/deeds-wall/deeds-wall.wxss b/pages/deeds-wall/deeds-wall.wxss
index 5825f7e..b36a3d1 100644
--- a/pages/deeds-wall/deeds-wall.wxss
+++ b/pages/deeds-wall/deeds-wall.wxss
@@ -1,141 +1,141 @@
-/* pages/deeds-wall/deeds-wall.wxss */
-.container {
-  min-height: 100vh;
-  background-color: #F7F8FA;
-  padding-bottom: 120rpx; /* 为底部按钮留出空间 */
-}
-
-/* 头部样式 */
-.header {
-  padding: 40rpx 40rpx 20rpx;
-  background-color: #FFFFFF;
-  text-align: center;
-  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.05);
-  margin-bottom: 24rpx;
-}
-
-.header-title {
-  font-size: 48rpx;
-  font-weight: 700;
-  color: #1F2937;
-  margin-bottom: 12rpx;
-  display: block;
-}
-
-.header-subtitle {
-  font-size: 28rpx;
-  color: #6B7280;
-  display: block;
-}
-
-/* 事迹列表容器 */
-.deeds-container {
-  padding: 0 32rpx;
-}
-
-/* 事迹卡片样式 */
-.deed-card {
-  background-color: #FFFFFF;
-  border-radius: 24rpx;
-  margin-bottom: 32rpx;
-  padding: 32rpx;
-  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.08);
-}
-
-/* 卡片头部：用户信息 */
-.card-header {
-  display: flex;
-  align-items: center;
-  margin-bottom: 24rpx;
-}
-
-.avatar {
-  width: 80rpx;
-  height: 80rpx;
-  border-radius: 50%;
-  margin-right: 24rpx;
-  background-color: #F3F4F6;
-}
-
-.user-info {
-  flex: 1;
-}
-
-.nickname {
-  font-size: 32rpx;
-  font-weight: 600;
-  color: #1F2937;
-  display: block;
-  margin-bottom: 4rpx;
-}
-
-.timestamp {
-  font-size: 24rpx;
-  color: #9CA3AF;
-  display: block;
-}
-
-/* 卡片内容 */
-.card-body {
-  margin-bottom: 24rpx;
-}
-
-.content {
-  font-size: 30rpx;
-  color: #374151;
-  line-height: 1.6;
-}
-
-/* 卡片底部：位置信息 */
-.card-footer {
-  padding-top: 16rpx;
-  border-top: 1rpx solid #F3F4F6;
-}
-
-.location {
-  display: flex;
-  align-items: center;
-}
-
-.location-icon {
-  font-size: 28rpx;
-  margin-right: 8rpx;
-}
-
-.location-text {
-  font-size: 26rpx;
-  color: #6B7280;
-}
-
-/* 底部操作区 */
-.action-container {
-  position: fixed;
-  bottom: 0;
-  left: 0;
-  right: 0;
-  padding: 24rpx 32rpx;
-  background-color: #FFFFFF;
-  box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.05);
-  z-index: 100;
-  display: flex;
-  justify-content: center;
-}
-
-.report-button {
-  background-color: #10B981;
-  color: #FFFFFF;
-  font-size: 32rpx;
-  font-weight: 600;
-  padding: 20rpx 0;
-  width: 90%;
-  border-radius: 999rpx; /* 胶囊形状 */
-  display: flex;
-  align-items: center;
-  justify-content: center;
-}
-
-.report-button::before {
-  content: "➕";
-  margin-right: 12rpx;
-  font-size: 32rpx;
+/* pages/deeds-wall/deeds-wall.wxss */
+.container {
+  min-height: 100vh;
+  background-color: #F7F8FA;
+  padding-bottom: 120rpx; /* 为底部按钮留出空间 */
+}
+
+/* 头部样式 */
+.header {
+  padding: 40rpx 40rpx 20rpx;
+  background-color: #FFFFFF;
+  text-align: center;
+  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.05);
+  margin-bottom: 24rpx;
+}
+
+.header-title {
+  font-size: 48rpx;
+  font-weight: 700;
+  color: #1F2937;
+  margin-bottom: 12rpx;
+  display: block;
+}
+
+.header-subtitle {
+  font-size: 28rpx;
+  color: #6B7280;
+  display: block;
+}
+
+/* 事迹列表容器 */
+.deeds-container {
+  padding: 0 32rpx;
+}
+
+/* 事迹卡片样式 */
+.deed-card {
+  background-color: #FFFFFF;
+  border-radius: 24rpx;
+  margin-bottom: 32rpx;
+  padding: 32rpx;
+  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.08);
+}
+
+/* 卡片头部：用户信息 */
+.card-header {
+  display: flex;
+  align-items: center;
+  margin-bottom: 24rpx;
+}
+
+.avatar {
+  width: 80rpx;
+  height: 80rpx;
+  border-radius: 50%;
+  margin-right: 24rpx;
+  background-color: #F3F4F6;
+}
+
+.user-info {
+  flex: 1;
+}
+
+.nickname {
+  font-size: 32rpx;
+  font-weight: 600;
+  color: #1F2937;
+  display: block;
+  margin-bottom: 4rpx;
+}
+
+.timestamp {
+  font-size: 24rpx;
+  color: #9CA3AF;
+  display: block;
+}
+
+/* 卡片内容 */
+.card-body {
+  margin-bottom: 24rpx;
+}
+
+.content {
+  font-size: 30rpx;
+  color: #374151;
+  line-height: 1.6;
+}
+
+/* 卡片底部：位置信息 */
+.card-footer {
+  padding-top: 16rpx;
+  border-top: 1rpx solid #F3F4F6;
+}
+
+.location {
+  display: flex;
+  align-items: center;
+}
+
+.location-icon {
+  font-size: 28rpx;
+  margin-right: 8rpx;
+}
+
+.location-text {
+  font-size: 26rpx;
+  color: #6B7280;
+}
+
+/* 底部操作区 */
+.action-container {
+  position: fixed;
+  bottom: 0;
+  left: 0;
+  right: 0;
+  padding: 24rpx 32rpx;
+  background-color: #FFFFFF;
+  box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.05);
+  z-index: 100;
+  display: flex;
+  justify-content: center;
+}
+
+.report-button {
+  background-color: #10B981;
+  color: #FFFFFF;
+  font-size: 32rpx;
+  font-weight: 600;
+  padding: 20rpx 0;
+  width: 90%;
+  border-radius: 999rpx; /* 胶囊形状 */
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+.report-button::before {
+  content: "➕";
+  margin-right: 12rpx;
+  font-size: 32rpx;
 } 
\ No newline at end of file
diff --git a/pages/detail/detail.wxml b/pages/detail/detail.wxml
index 48a0c61..4b6a373 100644
--- a/pages/detail/detail.wxml
+++ b/pages/detail/detail.wxml
@@ -240,5 +240,4 @@
   
   <!-- 登录授权弹窗 -->
   <auth-dialog id="authDialog"></auth-dialog>
-</view>
-
+</view>
\ No newline at end of file
diff --git a/pages/index/index.js b/pages/index/index.js
index 332f40c..0f5e03d 100644
--- a/pages/index/index.js
+++ b/pages/index/index.js
@@ -16,10 +16,18 @@ Page({
     shareSupport: {
       canShareTimeline: false,
       canShowShareMenu: false
-    }
+    },
+    isRefreshing: false, // 防止重复刷新
+    hasInitialized: false // 标记是否已初始化
   },
 
   onLoad() {
+    // 检查用户登录状态
+    const userInfo = wx.getStorageSync('userInfo');
+    if (userInfo && userInfo._id) {
+      this.setData({ userInfo });
+    }
+    
     // 首次加载时强制刷新数据，而不是使用可能为空的缓存数据
     this.refreshData();
     
@@ -29,13 +37,11 @@ Page({
   },
   
   onShow() {
-    // 页面显示时检查是否有数据，如果没有则刷新
-    if (!this.data.rankings || this.data.rankings.length === 0) {
-      this.refreshData();
-    } else {
-      // 否则使用常规加载
+    // 如果已经初始化过，使用常规加载
+    if (this.data.hasInitialized) {
       this.loadData();
     }
+    // 否则等待 onLoad 中的初始化完成
   },
 
   // 加载数据
@@ -47,12 +53,7 @@ Page({
     const app = getApp();
     const rankings = app.globalData.rankings || [];
     
-    // 如果rankings为空，则强制刷新数据
-    if (!rankings || rankings.length === 0) {
-      wx.hideLoading();
-      this.refreshData();
-      return;
-    }
+    // 移除自动刷新逻辑，避免死循环
     
     // 计算总投票数
     const totalVotes = this.calculateTotalVotes(rankings);
@@ -105,8 +106,14 @@ Page({
 
   // 刷新数据
   refreshData() {
+    // 防止重复刷新
+    if (this.data.isRefreshing) {
+      console.log('正在刷新中，跳过重复请求');
+      return;
+    }
+    
     const app = getApp();
-    this.setData({ isLoading: true, loadError: false });
+    this.setData({ isLoading: true, loadError: false, isRefreshing: true });
     wx.showLoading({ title: '刷新中...', mask: true });
 
     // 刷新排行榜数据
@@ -125,7 +132,9 @@ Page({
           rankings: validRankings,
           totalVotes: totalVotes, // 明确设置计算出的总投票数
           totalUsers: totalPopular, // 更新为超过百人想吃的人数
-          isLoading: false
+          isLoading: false,
+          isRefreshing: false, // 刷新完成
+          hasInitialized: true // 标记已初始化
         });
 
         // 刷新统计数据
@@ -150,7 +159,9 @@ Page({
           totalVotes: totalVotes, // 明确设置计算出的总投票数
           totalUsers: totalPopular, // 更新为超过百人想吃的人数
           isLoading: false,
-          loadError: true // 显示错误状态
+          loadError: true, // 显示错误状态
+          isRefreshing: false, // 错误时也要重置刷新状态
+          hasInitialized: true // 错误时也标记已初始化
         });
         
         wx.hideLoading();
diff --git a/pages/orders/orders.wxml b/pages/orders/orders.wxml
index fc96996..aa7dd5f 100644
--- a/pages/orders/orders.wxml
+++ b/pages/orders/orders.wxml
@@ -1,2 +1,2 @@
-<!--pages/orders/orders.wxml-->
+<!--pages/orders/orders.wxml-->
 <text>pages/orders/orders.wxml</text>
\ No newline at end of file
diff --git a/pages/report-deed/report-deed.js b/pages/report-deed/report-deed.js
index 6cd5ba7..505a37f 100644
--- a/pages/report-deed/report-deed.js
+++ b/pages/report-deed/report-deed.js
@@ -1,165 +1,165 @@
-// pages/report-deed/report-deed.js
-Page({
-  /**
-   * 页面的初始数据
-   */
-  data: {
-    users: [],
-    selectedUser: null,
-    content: '',
-    location: '',
-    date: '',
-    type: 'success', // 默认为成功事迹
-    isFormValid: false
-  },
-
-  /**
-   * 生命周期函数--监听页面加载
-   */
-  onLoad: function (options) {
-    // 加载用户列表
-    this.loadUsers();
-    
-    // 设置默认日期为今天
-    const today = new Date();
-    const year = today.getFullYear();
-    const month = String(today.getMonth() + 1).padStart(2, '0');
-    const day = String(today.getDate()).padStart(2, '0');
-    this.setData({
-      date: `${year}-${month}-${day}`
-    });
-    
-    // 检查表单有效性
-    this.checkFormValidity();
-  },
-
-  /**
-   * 加载用户列表
-   */
-  loadUsers: function () {
-    // 这里应该调用云函数获取用户列表
-    // 为了演示，使用模拟数据
-    const mockUsers = [
-      { id: '1', name: '张三', avatar: 'https://placekitten.com/80/80' },
-      { id: '2', name: '李四', avatar: 'https://placekitten.com/81/81' },
-      { id: '3', name: '王五', avatar: 'https://placekitten.com/82/82' },
-      { id: '4', name: '赵六', avatar: 'https://placekitten.com/83/83' }
-    ];
-    
-    this.setData({
-      users: mockUsers
-    });
-  },
-
-  /**
-   * 用户选择变更
-   */
-  onUserChange: function (e) {
-    const index = e.detail.value;
-    this.setData({
-      selectedUser: this.data.users[index]
-    });
-    this.checkFormValidity();
-  },
-
-  /**
-   * 内容输入变更
-   */
-  onContentInput: function (e) {
-    this.setData({
-      content: e.detail.value
-    });
-    this.checkFormValidity();
-  },
-
-  /**
-   * 地点输入变更
-   */
-  onLocationInput: function (e) {
-    this.setData({
-      location: e.detail.value
-    });
-    this.checkFormValidity();
-  },
-
-  /**
-   * 日期选择变更
-   */
-  onDateChange: function (e) {
-    this.setData({
-      date: e.detail.value
-    });
-    this.checkFormValidity();
-  },
-
-  /**
-   * 类型选择变更
-   */
-  onTypeChange: function (e) {
-    this.setData({
-      type: e.detail.value
-    });
-    this.checkFormValidity();
-  },
-
-  /**
-   * 检查表单有效性
-   */
-  checkFormValidity: function () {
-    const { selectedUser, content, date } = this.data;
-    const isValid = selectedUser && content.trim().length > 0 && date;
-    
-    this.setData({
-      isFormValid: isValid
-    });
-  },
-
-  /**
-   * 取消按钮点击事件
-   */
-  onCancel: function () {
-    wx.navigateBack();
-  },
-
-  /**
-   * 提交按钮点击事件
-   */
-  onSubmit: function () {
-    if (!this.data.isFormValid) return;
-    
-    // 显示加载提示
-    wx.showLoading({
-      title: '提交中...',
-      mask: true
-    });
-    
-    // 构建事迹数据
-    const deedData = {
-      userId: this.data.selectedUser.id,
-      nickname: this.data.selectedUser.name,
-      avatarUrl: this.data.selectedUser.avatar,
-      content: this.data.content,
-      location: this.data.location,
-      date: this.data.date,
-      type: this.data.type,
-      createTime: new Date().getTime()
-    };
-    
-    // 这里应该调用云函数保存事迹
-    // 为了演示，使用setTimeout模拟网络请求
-    setTimeout(() => {
-      wx.hideLoading();
-      
-      wx.showToast({
-        title: '提交成功',
-        icon: 'success',
-        duration: 2000
-      });
-      
-      // 延迟返回上一页
-      setTimeout(() => {
-        wx.navigateBack();
-      }, 1500);
-    }, 1000);
-  }
+// pages/report-deed/report-deed.js
+Page({
+  /**
+   * 页面的初始数据
+   */
+  data: {
+    users: [],
+    selectedUser: null,
+    content: '',
+    location: '',
+    date: '',
+    type: 'success', // 默认为成功事迹
+    isFormValid: false
+  },
+
+  /**
+   * 生命周期函数--监听页面加载
+   */
+  onLoad: function (options) {
+    // 加载用户列表
+    this.loadUsers();
+    
+    // 设置默认日期为今天
+    const today = new Date();
+    const year = today.getFullYear();
+    const month = String(today.getMonth() + 1).padStart(2, '0');
+    const day = String(today.getDate()).padStart(2, '0');
+    this.setData({
+      date: `${year}-${month}-${day}`
+    });
+    
+    // 检查表单有效性
+    this.checkFormValidity();
+  },
+
+  /**
+   * 加载用户列表
+   */
+  loadUsers: function () {
+    // 这里应该调用云函数获取用户列表
+    // 为了演示，使用模拟数据
+    const mockUsers = [
+      { id: '1', name: '张三', avatar: 'https://placekitten.com/80/80' },
+      { id: '2', name: '李四', avatar: 'https://placekitten.com/81/81' },
+      { id: '3', name: '王五', avatar: 'https://placekitten.com/82/82' },
+      { id: '4', name: '赵六', avatar: 'https://placekitten.com/83/83' }
+    ];
+    
+    this.setData({
+      users: mockUsers
+    });
+  },
+
+  /**
+   * 用户选择变更
+   */
+  onUserChange: function (e) {
+    const index = e.detail.value;
+    this.setData({
+      selectedUser: this.data.users[index]
+    });
+    this.checkFormValidity();
+  },
+
+  /**
+   * 内容输入变更
+   */
+  onContentInput: function (e) {
+    this.setData({
+      content: e.detail.value
+    });
+    this.checkFormValidity();
+  },
+
+  /**
+   * 地点输入变更
+   */
+  onLocationInput: function (e) {
+    this.setData({
+      location: e.detail.value
+    });
+    this.checkFormValidity();
+  },
+
+  /**
+   * 日期选择变更
+   */
+  onDateChange: function (e) {
+    this.setData({
+      date: e.detail.value
+    });
+    this.checkFormValidity();
+  },
+
+  /**
+   * 类型选择变更
+   */
+  onTypeChange: function (e) {
+    this.setData({
+      type: e.detail.value
+    });
+    this.checkFormValidity();
+  },
+
+  /**
+   * 检查表单有效性
+   */
+  checkFormValidity: function () {
+    const { selectedUser, content, date } = this.data;
+    const isValid = selectedUser && content.trim().length > 0 && date;
+    
+    this.setData({
+      isFormValid: isValid
+    });
+  },
+
+  /**
+   * 取消按钮点击事件
+   */
+  onCancel: function () {
+    wx.navigateBack();
+  },
+
+  /**
+   * 提交按钮点击事件
+   */
+  onSubmit: function () {
+    if (!this.data.isFormValid) return;
+    
+    // 显示加载提示
+    wx.showLoading({
+      title: '提交中...',
+      mask: true
+    });
+    
+    // 构建事迹数据
+    const deedData = {
+      userId: this.data.selectedUser.id,
+      nickname: this.data.selectedUser.name,
+      avatarUrl: this.data.selectedUser.avatar,
+      content: this.data.content,
+      location: this.data.location,
+      date: this.data.date,
+      type: this.data.type,
+      createTime: new Date().getTime()
+    };
+    
+    // 这里应该调用云函数保存事迹
+    // 为了演示，使用setTimeout模拟网络请求
+    setTimeout(() => {
+      wx.hideLoading();
+      
+      wx.showToast({
+        title: '提交成功',
+        icon: 'success',
+        duration: 2000
+      });
+      
+      // 延迟返回上一页
+      setTimeout(() => {
+        wx.navigateBack();
+      }, 1500);
+    }, 1000);
+  }
 }) 
\ No newline at end of file
diff --git a/pages/report-deed/report-deed.json b/pages/report-deed/report-deed.json
index 46c1f15..4cc37ae 100644
--- a/pages/report-deed/report-deed.json
+++ b/pages/report-deed/report-deed.json
@@ -1,6 +1,6 @@
-{
-  "navigationBarTitleText": "爆料新事迹",
-  "backgroundColor": "#F7F8FA",
-  "backgroundTextStyle": "dark",
-  "usingComponents": {}
+{
+  "navigationBarTitleText": "爆料新事迹",
+  "backgroundColor": "#F7F8FA",
+  "backgroundTextStyle": "dark",
+  "usingComponents": {}
 } 
\ No newline at end of file
diff --git a/pages/report-deed/report-deed.wxml b/pages/report-deed/report-deed.wxml
index 262b66a..5b4b004 100644
--- a/pages/report-deed/report-deed.wxml
+++ b/pages/report-deed/report-deed.wxml
@@ -1,73 +1,73 @@
-<view class="container">
-  <view class="header">
-    <text class="header-title">爆料新事迹</text>
-    <text class="header-subtitle">分享有趣的故事和精彩瞬间</text>
-  </view>
-  
-  <view class="form-container">
-    <view class="form-group">
-      <view class="form-label">选择用户</view>
-      <picker bindchange="onUserChange" range="{{users}}" range-key="name">
-        <view class="picker">
-          <view class="picker-value">{{selectedUser ? selectedUser.name : '请选择用户'}}</view>
-          <view class="picker-arrow">▼</view>
-        </view>
-      </picker>
-    </view>
-    
-    <view class="form-group">
-      <view class="form-label">事迹内容</view>
-      <textarea 
-        class="content-textarea" 
-        placeholder="描述一下发生的有趣事情..." 
-        bindinput="onContentInput"
-        value="{{content}}"
-        maxlength="200"
-      ></textarea>
-      <view class="character-count">{{content.length}}/200</view>
-    </view>
-    
-    <view class="form-group">
-      <view class="form-label">发生地点</view>
-      <input 
-        class="location-input" 
-        placeholder="例如：伦敦 Soho" 
-        bindinput="onLocationInput"
-        value="{{location}}"
-      />
-    </view>
-    
-    <view class="form-group">
-      <view class="form-label">发生日期</view>
-      <picker mode="date" bindchange="onDateChange" value="{{date}}">
-        <view class="picker">
-          <view class="picker-value">{{date || '请选择日期'}}</view>
-          <view class="picker-arrow">▼</view>
-        </view>
-      </picker>
-    </view>
-    
-    <view class="form-group">
-      <view class="form-label">事迹类型</view>
-      <radio-group class="type-group" bindchange="onTypeChange">
-        <label class="type-item">
-          <radio value="success" checked="{{type === 'success'}}" />
-          <text class="type-label">成功事迹</text>
-        </label>
-        <label class="type-item">
-          <radio value="neutral" checked="{{type === 'neutral'}}" />
-          <text class="type-label">普通事迹</text>
-        </label>
-        <label class="type-item">
-          <radio value="fail" checked="{{type === 'fail'}}" />
-          <text class="type-label">失败事迹</text>
-        </label>
-      </radio-group>
-    </view>
-  </view>
-  
-  <view class="action-container">
-    <button class="cancel-button" bindtap="onCancel">取消</button>
-    <button class="submit-button" bindtap="onSubmit" disabled="{{!isFormValid}}">提交爆料</button>
-  </view>
+<view class="container">
+  <view class="header">
+    <text class="header-title">爆料新事迹</text>
+    <text class="header-subtitle">分享有趣的故事和精彩瞬间</text>
+  </view>
+  
+  <view class="form-container">
+    <view class="form-group">
+      <view class="form-label">选择用户</view>
+      <picker bindchange="onUserChange" range="{{users}}" range-key="name">
+        <view class="picker">
+          <view class="picker-value">{{selectedUser ? selectedUser.name : '请选择用户'}}</view>
+          <view class="picker-arrow">▼</view>
+        </view>
+      </picker>
+    </view>
+    
+    <view class="form-group">
+      <view class="form-label">事迹内容</view>
+      <textarea 
+        class="content-textarea" 
+        placeholder="描述一下发生的有趣事情..." 
+        bindinput="onContentInput"
+        value="{{content}}"
+        maxlength="200"
+      ></textarea>
+      <view class="character-count">{{content.length}}/200</view>
+    </view>
+    
+    <view class="form-group">
+      <view class="form-label">发生地点</view>
+      <input 
+        class="location-input" 
+        placeholder="例如：伦敦 Soho" 
+        bindinput="onLocationInput"
+        value="{{location}}"
+      />
+    </view>
+    
+    <view class="form-group">
+      <view class="form-label">发生日期</view>
+      <picker mode="date" bindchange="onDateChange" value="{{date}}">
+        <view class="picker">
+          <view class="picker-value">{{date || '请选择日期'}}</view>
+          <view class="picker-arrow">▼</view>
+        </view>
+      </picker>
+    </view>
+    
+    <view class="form-group">
+      <view class="form-label">事迹类型</view>
+      <radio-group class="type-group" bindchange="onTypeChange">
+        <label class="type-item">
+          <radio value="success" checked="{{type === 'success'}}" />
+          <text class="type-label">成功事迹</text>
+        </label>
+        <label class="type-item">
+          <radio value="neutral" checked="{{type === 'neutral'}}" />
+          <text class="type-label">普通事迹</text>
+        </label>
+        <label class="type-item">
+          <radio value="fail" checked="{{type === 'fail'}}" />
+          <text class="type-label">失败事迹</text>
+        </label>
+      </radio-group>
+    </view>
+  </view>
+  
+  <view class="action-container">
+    <button class="cancel-button" bindtap="onCancel">取消</button>
+    <button class="submit-button" bindtap="onSubmit" disabled="{{!isFormValid}}">提交爆料</button>
+  </view>
 </view> 
\ No newline at end of file
diff --git a/pages/report-deed/report-deed.wxss b/pages/report-deed/report-deed.wxss
index fc308bc..812c9a0 100644
--- a/pages/report-deed/report-deed.wxss
+++ b/pages/report-deed/report-deed.wxss
@@ -1,160 +1,160 @@
-/* pages/report-deed/report-deed.wxss */
-.container {
-  min-height: 100vh;
-  background-color: #F7F8FA;
-  padding-bottom: 120rpx; /* 为底部按钮留出空间 */
-}
-
-/* 头部样式 */
-.header {
-  padding: 40rpx 40rpx 20rpx;
-  background-color: #FFFFFF;
-  text-align: center;
-  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.05);
-  margin-bottom: 24rpx;
-}
-
-.header-title {
-  font-size: 48rpx;
-  font-weight: 700;
-  color: #1F2937;
-  margin-bottom: 12rpx;
-  display: block;
-}
-
-.header-subtitle {
-  font-size: 28rpx;
-  color: #6B7280;
-  display: block;
-}
-
-/* 表单容器 */
-.form-container {
-  padding: 32rpx;
-}
-
-/* 表单组 */
-.form-group {
-  margin-bottom: 32rpx;
-}
-
-.form-label {
-  font-size: 28rpx;
-  font-weight: 600;
-  color: #1F2937;
-  margin-bottom: 16rpx;
-}
-
-/* 选择器样式 */
-.picker {
-  background-color: #FFFFFF;
-  border-radius: 999rpx; /* 胶囊形状 */
-  padding: 24rpx 32rpx;
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
-}
-
-.picker-value {
-  color: #374151;
-  font-size: 28rpx;
-}
-
-.picker-arrow {
-  color: #9CA3AF;
-  font-size: 24rpx;
-}
-
-/* 文本域样式 */
-.content-textarea {
-  background-color: #FFFFFF;
-  border-radius: 24rpx;
-  padding: 24rpx;
-  width: 100%;
-  height: 240rpx;
-  box-sizing: border-box;
-  font-size: 28rpx;
-  color: #374151;
-  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
-}
-
-.character-count {
-  text-align: right;
-  font-size: 24rpx;
-  color: #9CA3AF;
-  margin-top: 8rpx;
-}
-
-/* 输入框样式 */
-.location-input {
-  background-color: #FFFFFF;
-  border-radius: 999rpx; /* 胶囊形状 */
-  padding: 24rpx 32rpx;
-  font-size: 28rpx;
-  color: #374151;
-  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
-}
-
-/* 单选组样式 */
-.type-group {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 24rpx;
-}
-
-.type-item {
-  display: flex;
-  align-items: center;
-  background-color: #FFFFFF;
-  border-radius: 999rpx; /* 胶囊形状 */
-  padding: 16rpx 24rpx;
-  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
-}
-
-.type-label {
-  font-size: 28rpx;
-  color: #374151;
-  margin-left: 8rpx;
-}
-
-/* 底部操作区 */
-.action-container {
-  position: fixed;
-  bottom: 0;
-  left: 0;
-  right: 0;
-  padding: 24rpx 32rpx;
-  background-color: #FFFFFF;
-  box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.05);
-  z-index: 100;
-  display: flex;
-  justify-content: space-between;
-  gap: 24rpx;
-}
-
-.cancel-button, .submit-button {
-  flex: 1;
-  padding: 20rpx 0;
-  font-size: 32rpx;
-  font-weight: 600;
-  border-radius: 999rpx; /* 胶囊形状 */
-  display: flex;
-  align-items: center;
-  justify-content: center;
-}
-
-.cancel-button {
-  background-color: #F3F4F6;
-  color: #4B5563;
-}
-
-.submit-button {
-  background-color: #10B981;
-  color: #FFFFFF;
-}
-
-.submit-button[disabled] {
-  background-color: #D1D5DB;
-  color: #9CA3AF;
+/* pages/report-deed/report-deed.wxss */
+.container {
+  min-height: 100vh;
+  background-color: #F7F8FA;
+  padding-bottom: 120rpx; /* 为底部按钮留出空间 */
+}
+
+/* 头部样式 */
+.header {
+  padding: 40rpx 40rpx 20rpx;
+  background-color: #FFFFFF;
+  text-align: center;
+  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.05);
+  margin-bottom: 24rpx;
+}
+
+.header-title {
+  font-size: 48rpx;
+  font-weight: 700;
+  color: #1F2937;
+  margin-bottom: 12rpx;
+  display: block;
+}
+
+.header-subtitle {
+  font-size: 28rpx;
+  color: #6B7280;
+  display: block;
+}
+
+/* 表单容器 */
+.form-container {
+  padding: 32rpx;
+}
+
+/* 表单组 */
+.form-group {
+  margin-bottom: 32rpx;
+}
+
+.form-label {
+  font-size: 28rpx;
+  font-weight: 600;
+  color: #1F2937;
+  margin-bottom: 16rpx;
+}
+
+/* 选择器样式 */
+.picker {
+  background-color: #FFFFFF;
+  border-radius: 999rpx; /* 胶囊形状 */
+  padding: 24rpx 32rpx;
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
+}
+
+.picker-value {
+  color: #374151;
+  font-size: 28rpx;
+}
+
+.picker-arrow {
+  color: #9CA3AF;
+  font-size: 24rpx;
+}
+
+/* 文本域样式 */
+.content-textarea {
+  background-color: #FFFFFF;
+  border-radius: 24rpx;
+  padding: 24rpx;
+  width: 100%;
+  height: 240rpx;
+  box-sizing: border-box;
+  font-size: 28rpx;
+  color: #374151;
+  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
+}
+
+.character-count {
+  text-align: right;
+  font-size: 24rpx;
+  color: #9CA3AF;
+  margin-top: 8rpx;
+}
+
+/* 输入框样式 */
+.location-input {
+  background-color: #FFFFFF;
+  border-radius: 999rpx; /* 胶囊形状 */
+  padding: 24rpx 32rpx;
+  font-size: 28rpx;
+  color: #374151;
+  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
+}
+
+/* 单选组样式 */
+.type-group {
+  display: flex;
+  flex-wrap: wrap;
+  gap: 24rpx;
+}
+
+.type-item {
+  display: flex;
+  align-items: center;
+  background-color: #FFFFFF;
+  border-radius: 999rpx; /* 胶囊形状 */
+  padding: 16rpx 24rpx;
+  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.05);
+}
+
+.type-label {
+  font-size: 28rpx;
+  color: #374151;
+  margin-left: 8rpx;
+}
+
+/* 底部操作区 */
+.action-container {
+  position: fixed;
+  bottom: 0;
+  left: 0;
+  right: 0;
+  padding: 24rpx 32rpx;
+  background-color: #FFFFFF;
+  box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.05);
+  z-index: 100;
+  display: flex;
+  justify-content: space-between;
+  gap: 24rpx;
+}
+
+.cancel-button, .submit-button {
+  flex: 1;
+  padding: 20rpx 0;
+  font-size: 32rpx;
+  font-weight: 600;
+  border-radius: 999rpx; /* 胶囊形状 */
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+.cancel-button {
+  background-color: #F3F4F6;
+  color: #4B5563;
+}
+
+.submit-button {
+  background-color: #10B981;
+  color: #FFFFFF;
+}
+
+.submit-button[disabled] {
+  background-color: #D1D5DB;
+  color: #9CA3AF;
 } 
\ No newline at end of file
diff --git a/preview.html b/preview.html
new file mode 100644
index 0000000..abf9230
--- /dev/null
+++ b/preview.html
@@ -0,0 +1,329 @@
+<!DOCTYPE html>
+<html lang="zh-CN">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>伦敦必吃榜 - 预览</title>
+    <style>
+        * {
+            margin: 0;
+            padding: 0;
+            box-sizing: border-box;
+        }
+        
+        body {
+            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica', 'Arial', sans-serif;
+            background-color: #f8fafc;
+            color: #333;
+        }
+        
+        .phone-frame {
+            width: 375px;
+            height: 812px;
+            margin: 20px auto;
+            background: white;
+            border-radius: 40px;
+            box-shadow: 0 0 60px rgba(0,0,0,0.3);
+            overflow: hidden;
+            position: relative;
+        }
+        
+        .status-bar {
+            height: 44px;
+            background: white;
+            display: flex;
+            align-items: center;
+            justify-content: space-between;
+            padding: 0 20px;
+            font-size: 14px;
+        }
+        
+        .navbar {
+            height: 44px;
+            background: white;
+            border-bottom: 1px solid #e5e5e5;
+            display: flex;
+            align-items: center;
+            justify-content: center;
+            font-size: 18px;
+            font-weight: 500;
+        }
+        
+        .content {
+            height: calc(100% - 88px);
+            overflow-y: auto;
+            padding: 20px;
+        }
+        
+        .search-bar {
+            background: #f5f5f5;
+            border-radius: 20px;
+            padding: 10px 20px;
+            margin-bottom: 20px;
+            display: flex;
+            align-items: center;
+            gap: 10px;
+        }
+        
+        .search-icon {
+            width: 20px;
+            height: 20px;
+            opacity: 0.5;
+        }
+        
+        .search-input {
+            flex: 1;
+            border: none;
+            background: none;
+            outline: none;
+            font-size: 16px;
+        }
+        
+        .ranking-item {
+            display: flex;
+            align-items: center;
+            padding: 15px 0;
+            border-bottom: 1px solid #f0f0f0;
+        }
+        
+        .rank-number {
+            width: 30px;
+            font-size: 20px;
+            font-weight: bold;
+            color: #ff6b6b;
+        }
+        
+        .avatar {
+            width: 50px;
+            height: 50px;
+            border-radius: 50%;
+            margin: 0 15px;
+            display: flex;
+            align-items: center;
+            justify-content: center;
+            flex-shrink: 0;
+        }
+        
+        .info {
+            flex: 1;
+        }
+        
+        .name {
+            font-size: 16px;
+            font-weight: 500;
+            margin-bottom: 5px;
+        }
+        
+        .votes {
+            font-size: 14px;
+            color: #666;
+        }
+        
+        .vote-btn {
+            background: #ff6b6b;
+            color: white;
+            border: none;
+            padding: 8px 20px;
+            border-radius: 20px;
+            font-size: 14px;
+            cursor: pointer;
+        }
+        
+        .tab-bar {
+            position: absolute;
+            bottom: 0;
+            left: 0;
+            right: 0;
+            height: 50px;
+            background: white;
+            border-top: 1px solid #e5e5e5;
+            display: flex;
+            justify-content: space-around;
+            align-items: center;
+        }
+        
+        .tab-item {
+            text-align: center;
+            font-size: 12px;
+            color: #666;
+        }
+        
+        .tab-item.active {
+            color: #ff6b6b;
+        }
+        
+        .floating-btn {
+            position: absolute;
+            bottom: 70px;
+            right: 20px;
+            width: 56px;
+            height: 56px;
+            background: #ff6b6b;
+            border-radius: 50%;
+            display: flex;
+            align-items: center;
+            justify-content: center;
+            color: white;
+            font-size: 24px;
+            box-shadow: 0 4px 12px rgba(255, 107, 107, 0.4);
+            cursor: pointer;
+        }
+    </style>
+</head>
+<body>
+    <div class="phone-frame">
+        <div class="status-bar">
+            <span>9:41</span>
+            <span>100%🔋</span>
+        </div>
+        
+        <div class="navbar">伦敦必吃榜</div>
+        
+        <div class="content">
+            <div class="search-bar">
+                <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
+                    <circle cx="11" cy="11" r="8"></circle>
+                    <path d="m21 21-4.35-4.35"></path>
+                </svg>
+                <input type="text" class="search-input" placeholder="搜索餐厅名称">
+            </div>
+            
+            <div class="ranking-list">
+                <div class="ranking-item">
+                    <div class="rank-number">1</div>
+                    <div class="avatar" style="background: #ff6b6b;">
+                        <span style="color: white; font-size: 20px; font-weight: bold;">鼎</span>
+                    </div>
+                    <div class="info">
+                        <div class="name">鼎泰丰</div>
+                        <div class="votes">128 票</div>
+                    </div>
+                    <button class="vote-btn">投票</button>
+                </div>
+                
+                <div class="ranking-item">
+                    <div class="rank-number">2</div>
+                    <div class="avatar" style="background: #4ecdc4;">
+                        <span style="color: white; font-size: 20px; font-weight: bold;">湘</span>
+                    </div>
+                    <div class="info">
+                        <div class="name">湘满楼</div>
+                        <div class="votes">115 票</div>
+                    </div>
+                    <button class="vote-btn">投票</button>
+                </div>
+                
+                <div class="ranking-item">
+                    <div class="rank-number">3</div>
+                    <div class="avatar" style="background: #45b7d1;">
+                        <span style="color: white; font-size: 20px; font-weight: bold;">和</span>
+                    </div>
+                    <div class="info">
+                        <div class="name">和牛烧肉</div>
+                        <div class="votes">98 票</div>
+                    </div>
+                    <button class="vote-btn">投票</button>
+                </div>
+                
+                <div class="ranking-item">
+                    <div class="rank-number">4</div>
+                    <div class="avatar" style="background: #f7b731;">
+                        <span style="color: white; font-size: 20px; font-weight: bold;">川</span>
+                    </div>
+                    <div class="info">
+                        <div class="name">川味观</div>
+                        <div class="votes">87 票</div>
+                    </div>
+                    <button class="vote-btn">投票</button>
+                </div>
+                
+                <div class="ranking-item">
+                    <div class="rank-number">5</div>
+                    <div class="avatar" style="background: #786fa6;">
+                        <span style="color: white; font-size: 20px; font-weight: bold;">味</span>
+                    </div>
+                    <div class="info">
+                        <div class="name">味千拉面</div>
+                        <div class="votes">76 票</div>
+                    </div>
+                    <button class="vote-btn">投票</button>
+                </div>
+                
+                <div class="ranking-item">
+                    <div class="rank-number">6</div>
+                    <div class="avatar" style="background: #63cdda;">
+                        <span style="color: white; font-size: 20px; font-weight: bold;">粤</span>
+                    </div>
+                    <div class="info">
+                        <div class="name">粤海轩</div>
+                        <div class="votes">65 票</div>
+                    </div>
+                    <button class="vote-btn">投票</button>
+                </div>
+            </div>
+        </div>
+        
+        <div class="floating-btn">+</div>
+        
+        <div class="tab-bar">
+            <div class="tab-item active">首页</div>
+            <div class="tab-item">我的提名</div>
+            <div class="tab-item">善行墙</div>
+            <div class="tab-item">我的</div>
+        </div>
+    </div>
+    
+    <script>
+        // 投票交互
+        document.querySelectorAll('.vote-btn').forEach(btn => {
+            btn.addEventListener('click', function() {
+                const votesEl = this.parentElement.querySelector('.votes');
+                const currentVotes = parseInt(votesEl.textContent);
+                votesEl.textContent = (currentVotes + 1) + ' 票';
+                this.textContent = '已投票';
+                this.style.background = '#95e1d3';
+                this.style.cursor = 'not-allowed';
+                this.disabled = true;
+            });
+        });
+        
+        // 添加按钮
+        document.querySelector('.floating-btn').addEventListener('click', function() {
+            alert('点击了添加按钮！在实际小程序中会跳转到提名页面');
+        });
+        
+        // 餐厅项点击
+        document.querySelectorAll('.ranking-item').forEach(item => {
+            item.style.cursor = 'pointer';
+            item.addEventListener('click', function(e) {
+                if (e.target.classList.contains('vote-btn')) return;
+                const name = this.querySelector('.name').textContent;
+                alert(`查看 ${name} 的详情页面`);
+            });
+        });
+        
+        // 搜索功能
+        document.querySelector('.search-input').addEventListener('input', function(e) {
+            const searchTerm = e.target.value.toLowerCase();
+            document.querySelectorAll('.ranking-item').forEach(item => {
+                const name = item.querySelector('.name').textContent.toLowerCase();
+                if (name.includes(searchTerm)) {
+                    item.style.display = 'flex';
+                } else {
+                    item.style.display = 'none';
+                }
+            });
+        });
+        
+        // 底部标签栏
+        document.querySelectorAll('.tab-item').forEach(tab => {
+            tab.style.cursor = 'pointer';
+            tab.addEventListener('click', function() {
+                document.querySelectorAll('.tab-item').forEach(t => t.classList.remove('active'));
+                this.classList.add('active');
+                alert(`切换到 ${this.textContent} 页面`);
+            });
+        });
+    </script>
+</body>
+</html>
\ No newline at end of file
diff --git a/quick-start-uniapp.md b/quick-start-uniapp.md
new file mode 100644
index 0000000..a3223de
--- /dev/null
+++ b/quick-start-uniapp.md
@@ -0,0 +1,278 @@
+# 快速开发方案 - uni-app + uView UI
+
+## 1. 快速初始化项目（5分钟）
+
+```bash
+# 使用 HBuilderX（推荐）或命令行
+npm install -g @vue/cli
+vue create -p dcloudio/uni-preset-vue london-food-rank
+
+# 安装 uView UI
+npm install uview-ui
+```
+
+## 2. 主要页面代码示例
+
+### 首页 - 排行榜（pages/index/index.vue）
+```vue
+<template>
+  <view class="container">
+    <!-- 搜索栏 -->
+    <u-search 
+      v-model="keyword" 
+      placeholder="搜索餐厅名称"
+      @search="handleSearch"
+    ></u-search>
+    
+    <!-- 统计卡片 -->
+    <view class="stats-card">
+      <u-row>
+        <u-col span="4">
+          <view class="stat-item">
+            <text class="stat-num">{{ stats.total }}</text>
+            <text class="stat-label">总餐厅</text>
+          </view>
+        </u-col>
+        <u-col span="4">
+          <view class="stat-item">
+            <text class="stat-num">{{ stats.votes }}</text>
+            <text class="stat-label">总票数</text>
+          </view>
+        </u-col>
+        <u-col span="4">
+          <view class="stat-item">
+            <text class="stat-num">{{ stats.users }}</text>
+            <text class="stat-label">参与人数</text>
+          </view>
+        </u-col>
+      </u-row>
+    </view>
+    
+    <!-- 排行榜列表 -->
+    <u-list @scrolltolower="loadMore">
+      <u-list-item v-for="(item, index) in list" :key="item._id">
+        <u-cell-group>
+          <u-cell @click="goDetail(item)">
+            <view slot="title" class="restaurant-item">
+              <text class="rank">{{ index + 1 }}</text>
+              <u-avatar :src="item.avatar" size="40"></u-avatar>
+              <view class="info">
+                <text class="name">{{ item.name }}</text>
+                <text class="votes">{{ item.votes }} 票</text>
+              </view>
+              <u-button 
+                type="primary" 
+                size="mini"
+                @click.stop="handleVote(item)"
+              >
+                投票
+              </u-button>
+            </view>
+          </u-cell>
+        </u-cell-group>
+      </u-list-item>
+    </u-list>
+    
+    <!-- 悬浮按钮 -->
+    <u-fixed bottom="100" right="30">
+      <u-button 
+        type="primary" 
+        shape="circle"
+        icon="plus"
+        @click="goCreate"
+      ></u-button>
+    </u-fixed>
+  </view>
+</template>
+
+<script>
+export default {
+  data() {
+    return {
+      keyword: '',
+      list: [],
+      stats: {
+        total: 0,
+        votes: 0,
+        users: 0
+      }
+    }
+  },
+  
+  onLoad() {
+    this.loadData()
+  },
+  
+  methods: {
+    // 加载数据
+    async loadData() {
+      const db = wx.cloud.database()
+      const res = await db.collection('entries')
+        .orderBy('votes', 'desc')
+        .get()
+      
+      this.list = res.data
+    },
+    
+    // 投票
+    async handleVote(item) {
+      // 检查登录
+      if (!this.checkLogin()) return
+      
+      // 调用云函数
+      wx.cloud.callFunction({
+        name: 'voteManage',
+        data: {
+          action: 'vote',
+          entryId: item._id
+        }
+      }).then(res => {
+        if (res.result.success) {
+          item.votes++
+          this.$u.toast('投票成功')
+        } else {
+          this.$u.toast(res.result.message)
+        }
+      })
+    },
+    
+    // 跳转详情
+    goDetail(item) {
+      uni.navigateTo({
+        url: `/pages/detail/detail?id=${item._id}`
+      })
+    },
+    
+    // 创建提名
+    goCreate() {
+      if (!this.checkLogin()) return
+      uni.navigateTo({
+        url: '/pages/create/create'
+      })
+    },
+    
+    // 检查登录
+    checkLogin() {
+      const userInfo = uni.getStorageSync('userInfo')
+      if (!userInfo) {
+        this.$u.toast('请先登录')
+        return false
+      }
+      return true
+    }
+  }
+}
+</script>
+
+<style lang="scss">
+.container {
+  padding: 20rpx;
+}
+
+.stats-card {
+  background: #fff;
+  border-radius: 20rpx;
+  padding: 30rpx;
+  margin: 20rpx 0;
+  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
+  
+  .stat-item {
+    text-align: center;
+    
+    .stat-num {
+      display: block;
+      font-size: 48rpx;
+      font-weight: bold;
+      color: #ff6b6b;
+    }
+    
+    .stat-label {
+      display: block;
+      font-size: 24rpx;
+      color: #666;
+      margin-top: 10rpx;
+    }
+  }
+}
+
+.restaurant-item {
+  display: flex;
+  align-items: center;
+  padding: 20rpx 0;
+  
+  .rank {
+    font-size: 36rpx;
+    font-weight: bold;
+    color: #ff6b6b;
+    margin-right: 20rpx;
+    min-width: 60rpx;
+  }
+  
+  .info {
+    flex: 1;
+    margin-left: 20rpx;
+    
+    .name {
+      display: block;
+      font-size: 32rpx;
+      font-weight: 500;
+    }
+    
+    .votes {
+      display: block;
+      font-size: 24rpx;
+      color: #666;
+      margin-top: 8rpx;
+    }
+  }
+}
+</style>
+```
+
+## 3. 关键优势
+
+### 开发效率提升点：
+1. **组件开箱即用**：搜索框、列表、按钮、头像等直接使用
+2. **样式统一**：uView 提供统一的设计规范
+3. **交互简单**：Toast、Loading、Modal 等一行代码搞定
+4. **响应式数据**：Vue 的双向绑定让数据处理极其简单
+
+### 时间对比：
+- 原生开发一个页面：2-3小时
+- uni-app + uView：30分钟
+
+## 4. 快速部署
+
+```bash
+# 编译到微信小程序
+npm run dev:mp-weixin
+
+# 用 HBuilderX 打开 dist/dev/mp-weixin
+# 或用微信开发者工具打开
+```
+
+## 5. 云函数对接（保持不变）
+
+uni-app 完美支持微信云开发，原有的云函数无需修改：
+
+```javascript
+// 初始化云开发
+wx.cloud.init({
+  env: 'cloud1-2g2sby6z920b76cb'
+})
+
+// 调用云函数
+wx.cloud.callFunction({
+  name: 'userManage',
+  data: { action: 'login' }
+})
+```
+
+## 预计开发时间
+
+- 页面搭建：1天
+- 功能对接：1天  
+- 测试优化：0.5天
+- **总计：2.5天完成整个应用**
+
+比原生开发节省 60% 以上的时间！
\ No newline at end of file
-- 
2.49.0

